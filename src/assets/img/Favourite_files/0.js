(this['webpackJsonpfind-your-house-frontend'] = this['webpackJsonpfind-your-house-frontend'] || []).push([[0], {

  /***/ './node_modules/@babel/runtime/helpers/esm/extends.js':
  /*! ************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \*********************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => _extends);
    function _extends() {
      _extends = Object.assign || function (target) {
        for (let i = 1; i < arguments.length; i++) {
          const source = arguments[i];

          for (const key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends.apply(this, arguments);
    }
    /***/ }),

  /***/ './node_modules/@babel/runtime/helpers/esm/inheritsLoose.js':
  /*! ******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \***************************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => _inheritsLoose);
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    /***/ }),

  /***/ './node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js':
  /*! *********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \******************************************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => _objectWithoutPropertiesLoose);
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      const target = {};
      const sourceKeys = Object.keys(source);
      let key; let
        i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }
    /***/ }),

  /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ReactRefreshEntry.js':
  /*! ***************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ReactRefreshEntry.js ***!
  \************************************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const safeThis = __webpack_require__(/*! ./utils/safeThis */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/safeThis.js');

    if (true && typeof safeThis !== 'undefined') {
      // Only inject the runtime if it hasn't been injected
      if (!safeThis.__reactRefreshInjected) {
        const RefreshRuntime = __webpack_require__(/*! react-refresh/runtime */ './node_modules/react-refresh/runtime.js'); // Inject refresh runtime into global scope

        RefreshRuntime.injectIntoGlobalHook(safeThis); // Mark the runtime as injected to prevent double-injection

        safeThis.__reactRefreshInjected = true;
      }
    }
    /***/ }),

  /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/safeThis.js':
  /*! ************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/safeThis.js ***!
  \*********************************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function (global) { /* global globalThis */
      /*
  This file is copied from `core-js`.
  https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js

  MIT License
  Author: Denis Pushkarev (@zloirock)
*/
      const check = function (it) {
        return it && it.Math == Math && it;
      };

      module.exports = check(typeof globalThis === 'object' && globalThis) || check(typeof window === 'object' && window) || check(typeof self === 'object' && self) || check(typeof global === 'object' && global) || Function('return this')();
      /* WEBPACK VAR INJECTION */ }.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ './node_modules/webpack/buildin/global.js')));
    /***/ }),

  /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js':
  /*! ***************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js ***!
  \************************************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /* global __webpack_require__ */
    const Refresh = __webpack_require__(/*! react-refresh/runtime */ './node_modules/react-refresh/runtime.js');
    /**
 * Extracts exports from a webpack module object.
 * @param {string} moduleId A Webpack module ID.
 * @returns {*} An exports object from the module.
 */

    function getModuleExports(moduleId) {
      return __webpack_require__.c[moduleId].exports;
    }
    /**
 * Calculates the signature of a React refresh boundary.
 * If this signature changes, it's unsafe to accept the boundary.
 *
 * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/907d6af22ac6ebe58572be418e9253a90665ecbd/packages/metro/src/lib/polyfills/require.js#L795-L816).
 * @param {*} moduleExports A Webpack module exports object.
 * @returns {string[]} A React refresh boundary signature array.
 */

    function getReactRefreshBoundarySignature(moduleExports) {
      const signature = [];
      signature.push(Refresh.getFamilyByType(moduleExports));

      if (moduleExports == null || typeof moduleExports !== 'object') {
        // Exit if we can't iterate over exports.
        return signature;
      }

      for (const key in moduleExports) {
        if (key === '__esModule') {
          continue;
        }

        signature.push(key);
        signature.push(Refresh.getFamilyByType(moduleExports[key]));
      }

      return signature;
    }
    /**
 * Creates a helper that performs a delayed React refresh.
 * @returns {enqueueUpdate} A debounced React refresh function.
 */

    function createDebounceUpdate() {
      /**
   * A cached setTimeout handler.
   * @type {number | undefined}
   */
      let refreshTimeout;
      /**
   * Performs react refresh on a delay and clears the error overlay.
   * @param {function(): void} callback
   * @returns {void}
   */

      function enqueueUpdate(callback) {
        if (typeof refreshTimeout === 'undefined') {
          refreshTimeout = setTimeout(() => {
            refreshTimeout = undefined;
            Refresh.performReactRefresh();
            callback();
          }, 30);
        }
      }

      return enqueueUpdate;
    }
    /**
 * Checks if all exports are likely a React component.
 *
 * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/febdba2383113c88296c61e28e4ef6a7f4939fda/packages/metro/src/lib/polyfills/require.js#L748-L774).
 * @param {*} moduleExports A Webpack module exports object.
 * @returns {boolean} Whether the exports are React component like.
 */

    function isReactRefreshBoundary(moduleExports) {
      if (Refresh.isLikelyComponentType(moduleExports)) {
        return true;
      }

      if (moduleExports === undefined || moduleExports === null || typeof moduleExports !== 'object') {
        // Exit if we can't iterate over exports.
        return false;
      }

      let hasExports = false;
      let areAllExportsComponents = true;

      for (const key in moduleExports) {
        hasExports = true; // This is the ES Module indicator flag

        if (key === '__esModule') {
          continue;
        } // We can (and have to) safely execute getters here,
        // as Webpack manually assigns harmony exports to getters,
        // without any side-effects attached.
        // Ref: https://github.com/webpack/webpack/blob/b93048643fe74de2a6931755911da1212df55897/lib/MainTemplate.js#L281

        const exportValue = moduleExports[key];

        if (!Refresh.isLikelyComponentType(exportValue)) {
          areAllExportsComponents = false;
        }
      }

      return hasExports && areAllExportsComponents;
    }
    /**
 * Checks if exports are likely a React component and registers them.
 *
 * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/febdba2383113c88296c61e28e4ef6a7f4939fda/packages/metro/src/lib/polyfills/require.js#L818-L835).
 * @param {*} moduleExports A Webpack module exports object.
 * @param {string} moduleId A Webpack module ID.
 * @returns {void}
 */

    function registerExportsForReactRefresh(moduleExports, moduleId) {
      if (Refresh.isLikelyComponentType(moduleExports)) {
        // Register module.exports if it is likely a component
        Refresh.register(moduleExports, `${moduleId} %exports%`);
      }

      if (moduleExports === undefined || moduleExports === null || typeof moduleExports !== 'object') {
        // Exit if we can't iterate over the exports.
        return;
      }

      for (const key in moduleExports) {
        // Skip registering the ES Module indicator
        if (key === '__esModule') {
          continue;
        }

        const exportValue = moduleExports[key];

        if (Refresh.isLikelyComponentType(exportValue)) {
          const typeID = `${moduleId} %exports% ${key}`;
          Refresh.register(exportValue, typeID);
        }
      }
    }
    /**
 * Compares previous and next module objects to check for mutated boundaries.
 *
 * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/907d6af22ac6ebe58572be418e9253a90665ecbd/packages/metro/src/lib/polyfills/require.js#L776-L792).
 * @param {*} prevExports The current Webpack module exports object.
 * @param {*} nextExports The next Webpack module exports object.
 * @returns {boolean} Whether the React refresh boundary should be invalidated.
 */

    function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
      const prevSignature = getReactRefreshBoundarySignature(prevExports);
      const nextSignature = getReactRefreshBoundarySignature(nextExports);

      if (prevSignature.length !== nextSignature.length) {
        return true;
      }

      for (let i = 0; i < nextSignature.length; i += 1) {
        if (prevSignature[i] !== nextSignature[i]) {
          return true;
        }
      }

      return false;
    }

    module.exports = Object.freeze({
      enqueueUpdate: createDebounceUpdate(),
      getModuleExports,
      isReactRefreshBoundary,
      shouldInvalidateReactRefreshBoundary,
      registerExportsForReactRefresh,
    });
    /***/ }),

  /***/ './node_modules/ansi-regex/index.js':
  /*! ******************************************!*\
  !*** ./node_modules/ansi-regex/index.js ***!
  \***************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    module.exports = ({
      onlyFirst = false,
    } = {}) => {
      const pattern = ['[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)', '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
      return new RegExp(pattern, onlyFirst ? undefined : 'g');
    };
    /***/ }),

  /***/ './node_modules/axios/index.js':
  /*! *************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \************************************ */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    module.exports = __webpack_require__(/*! ./lib/axios */ './node_modules/axios/lib/axios.js');
    /***/ }),

  /***/ './node_modules/axios/lib/adapters/xhr.js':
  /*! ************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \*********************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js');

    const settle = __webpack_require__(/*! ./../core/settle */ './node_modules/axios/lib/core/settle.js');

    const cookies = __webpack_require__(/*! ./../helpers/cookies */ './node_modules/axios/lib/helpers/cookies.js');

    const buildURL = __webpack_require__(/*! ./../helpers/buildURL */ './node_modules/axios/lib/helpers/buildURL.js');

    const buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ './node_modules/axios/lib/core/buildFullPath.js');

    const parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ './node_modules/axios/lib/helpers/parseHeaders.js');

    const isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ './node_modules/axios/lib/helpers/isURLSameOrigin.js');

    const createError = __webpack_require__(/*! ../core/createError */ './node_modules/axios/lib/core/createError.js');

    module.exports = function xhrAdapter(config) {
      return new Promise((resolve, reject) => {
        let requestData = config.data;
        const requestHeaders = config.headers;

        if (utils.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        let request = new XMLHttpRequest(); // HTTP basic authentication

        if (config.auth) {
          const username = config.auth.username || '';
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = `Basic ${btoa(`${username}:${password}`)}`;
        }

        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

        request.timeout = config.timeout; // Listen for ready state

        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          } // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request

          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          } // Prepare the response

          const responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          const responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request,
          };
          settle(resolve, reject, response); // Clean up request

          request = null;
        }; // Handle browser request cancellation (as opposed to a manual cancellation)

        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

          request = null;
        }; // Handle low level network errors

        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError('Network Error', config, null, request)); // Clean up request

          request = null;
        }; // Handle timeout

        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = `timeout of ${config.timeout}ms exceeded`;

          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }

          reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request)); // Clean up request

          request = null;
        }; // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.

        if (utils.isStandardBrowserEnv()) {
          // Add xsrf header
          const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        } // Add headers to the request

        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, (val, key) => {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        } // Add withCredentials to request if needed

        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        } // Add responseType to request if needed

        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== 'json') {
              throw e;
            }
          }
        } // Handle progress if needed

        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        } // Not all browsers support upload events

        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken) {
          // Handle cancellation
          config.cancelToken.promise.then(cancel => {
            if (!request) {
              return;
            }

            request.abort();
            reject(cancel); // Clean up request

            request = null;
          });
        }

        if (!requestData) {
          requestData = null;
        } // Send the request

        request.send(requestData);
      });
    };
    /***/ }),

  /***/ './node_modules/axios/lib/axios.js':
  /*! *****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \**************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./utils */ './node_modules/axios/lib/utils.js');

    const bind = __webpack_require__(/*! ./helpers/bind */ './node_modules/axios/lib/helpers/bind.js');

    const Axios = __webpack_require__(/*! ./core/Axios */ './node_modules/axios/lib/core/Axios.js');

    const mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ './node_modules/axios/lib/core/mergeConfig.js');

    const defaults = __webpack_require__(/*! ./defaults */ './node_modules/axios/lib/defaults.js');
    /**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

    function createInstance(defaultConfig) {
      const context = new Axios(defaultConfig);
      const instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

      utils.extend(instance, Axios.prototype, context); // Copy context to instance

      utils.extend(instance, context);
      return instance;
    } // Create the default instance to be exported

    const axios = createInstance(defaults); // Expose Axios class to allow class inheritance

    axios.Axios = Axios; // Factory for creating new instances

    axios.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios.defaults, instanceConfig));
    }; // Expose Cancel & CancelToken

    axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ './node_modules/axios/lib/cancel/Cancel.js');
    axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ './node_modules/axios/lib/cancel/CancelToken.js');
    axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ './node_modules/axios/lib/cancel/isCancel.js'); // Expose all/spread

    axios.all = function all(promises) {
      return Promise.all(promises);
    };

    axios.spread = __webpack_require__(/*! ./helpers/spread */ './node_modules/axios/lib/helpers/spread.js'); // Expose isAxiosError

    axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ './node_modules/axios/lib/helpers/isAxiosError.js');
    module.exports = axios; // Allow use of default import syntax in TypeScript

    module.exports.default = axios;
    /***/ }),

  /***/ './node_modules/axios/lib/cancel/Cancel.js':
  /*! *************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \************************************************ */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

    function Cancel(message) {
      this.message = message;
    }

    Cancel.prototype.toString = function toString() {
      return `Cancel${this.message ? `: ${this.message}` : ''}`;
    };

    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
    /***/ }),

  /***/ './node_modules/axios/lib/cancel/CancelToken.js':
  /*! ******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \***************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const Cancel = __webpack_require__(/*! ./Cancel */ './node_modules/axios/lib/cancel/Cancel.js');
    /**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      let resolvePromise;
      this.promise = new Promise(resolve => {
        resolvePromise = resolve;
      });
      const token = this;
      executor(message => {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    /**
 * Throws a `Cancel` if cancellation has been requested.
 */

    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    /**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

    CancelToken.source = function source() {
      let cancel;
      const token = new CancelToken(c => {
        cancel = c;
      });
      return {
        token,
        cancel,
      };
    };

    module.exports = CancelToken;
    /***/ }),

  /***/ './node_modules/axios/lib/cancel/isCancel.js':
  /*! ***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
    /***/ }),

  /***/ './node_modules/axios/lib/core/Axios.js':
  /*! **********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \********************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js');

    const buildURL = __webpack_require__(/*! ../helpers/buildURL */ './node_modules/axios/lib/helpers/buildURL.js');

    const InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ './node_modules/axios/lib/core/InterceptorManager.js');

    const dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ './node_modules/axios/lib/core/dispatchRequest.js');

    const mergeConfig = __webpack_require__(/*! ./mergeConfig */ './node_modules/axios/lib/core/mergeConfig.js');
    /**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager(),
      };
    }
    /**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

    Axios.prototype.request = function request(config) {
      /* eslint no-param-reassign:0 */
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof config === 'string') {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }

      config = mergeConfig(this.defaults, config); // Set config.method

      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      } // Hook up interceptors middleware

      const chain = [dispatchRequest, undefined];
      let promise = Promise.resolve(config);
      this.interceptors.request.forEach(interceptor => {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(interceptor => {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });

      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    }; // Provide aliases for supported request methods

    utils.forEach(['delete', 'get', 'head', 'options'], method => {
      /* eslint func-names:0 */
      Axios.prototype[method] = function (url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data,
        }));
      };
    });
    utils.forEach(['post', 'put', 'patch'], method => {
      /* eslint func-names:0 */
      Axios.prototype[method] = function (url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data,
        }));
      };
    });
    module.exports = Axios;
    /***/ }),

  /***/ './node_modules/axios/lib/core/InterceptorManager.js':
  /*! ***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \********************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js');

    function InterceptorManager() {
      this.handlers = [];
    }
    /**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled,
        rejected,
      });
      return this.handlers.length - 1;
    };
    /**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    /**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, h => {
        if (h !== null) {
          fn(h);
        }
      });
    };

    module.exports = InterceptorManager;
    /***/ }),

  /***/ './node_modules/axios/lib/core/buildFullPath.js':
  /*! ******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \***************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ './node_modules/axios/lib/helpers/isAbsoluteURL.js');

    const combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ './node_modules/axios/lib/helpers/combineURLs.js');
    /**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */

    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }

      return requestedURL;
    };
    /***/ }),

  /***/ './node_modules/axios/lib/core/createError.js':
  /*! ****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \*************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const enhanceError = __webpack_require__(/*! ./enhanceError */ './node_modules/axios/lib/core/enhanceError.js');
    /**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

    module.exports = function createError(message, config, code, request, response) {
      const error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
    /***/ }),

  /***/ './node_modules/axios/lib/core/dispatchRequest.js':
  /*! ********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \******************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js');

    const transformData = __webpack_require__(/*! ./transformData */ './node_modules/axios/lib/core/transformData.js');

    const isCancel = __webpack_require__(/*! ../cancel/isCancel */ './node_modules/axios/lib/cancel/isCancel.js');

    const defaults = __webpack_require__(/*! ../defaults */ './node_modules/axios/lib/defaults.js');
    /**
 * Throws a `Cancel` if cancellation has been requested.
 */

    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    /**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config); // Ensure headers exist

      config.headers = config.headers || {}; // Transform request data

      config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers

      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], method => {
        delete config.headers[method];
      });
      const adapter = config.adapter || defaults.adapter;
      return adapter(config).then(response => {
        throwIfCancellationRequested(config); // Transform response data

        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
      }, reason => {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config); // Transform response data

          if (reason && reason.response) {
            reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
          }
        }

        return Promise.reject(reason);
      });
    };
    /***/ }),

  /***/ './node_modules/axios/lib/core/enhanceError.js':
  /*! *****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \**************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;

      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
        };
      };

      return error;
    };
    /***/ }),

  /***/ './node_modules/axios/lib/core/mergeConfig.js':
  /*! ****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \*************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ../utils */ './node_modules/axios/lib/utils.js');
    /**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

    module.exports = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      const config = {};
      const valueFromConfig2Keys = ['url', 'method', 'data'];
      const mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
      const defaultToConfig2Keys = ['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress', 'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'];
      const directMergeKeys = ['validateStatus'];

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } if (utils.isArray(source)) {
          return source.slice();
        }

        return source;
      }

      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      }

      utils.forEach(valueFromConfig2Keys, prop => {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils.forEach(defaultToConfig2Keys, prop => {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });
      utils.forEach(directMergeKeys, prop => {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });
      const axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      const otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(key => axiosKeys.indexOf(key) === -1);
      utils.forEach(otherKeys, mergeDeepProperties);
      return config;
    };
    /***/ }),

  /***/ './node_modules/axios/lib/core/settle.js':
  /*! ***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \********************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const createError = __webpack_require__(/*! ./createError */ './node_modules/axios/lib/core/createError.js');
    /**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

    module.exports = function settle(resolve, reject, response) {
      const { validateStatus } = response.config;

      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(`Request failed with status code ${response.status}`, response.config, null, response.request, response));
      }
    };
    /***/ }),

  /***/ './node_modules/axios/lib/core/transformData.js':
  /*! ******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \***************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js');
    /**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

    module.exports = function transformData(data, headers, fns) {
      /* eslint no-param-reassign:0 */
      utils.forEach(fns, fn => {
        data = fn(data, headers);
      });
      return data;
    };
    /***/ }),

  /***/ './node_modules/axios/lib/defaults.js':
  /*! ********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \******************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function (process) {
      const utils = __webpack_require__(/*! ./utils */ './node_modules/axios/lib/utils.js');

      const normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ './node_modules/axios/lib/helpers/normalizeHeaderName.js');

      const DEFAULT_CONTENT_TYPE = {
        'Content-Type': 'application/x-www-form-urlencoded',
      };

      function setContentTypeIfUnset(headers, value) {
        if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
          headers['Content-Type'] = value;
        }
      }

      function getDefaultAdapter() {
        let adapter;

        if (typeof XMLHttpRequest !== 'undefined') {
          // For browsers use XHR adapter
          adapter = __webpack_require__(/*! ./adapters/xhr */ './node_modules/axios/lib/adapters/xhr.js');
        } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
          // For node use HTTP adapter
          adapter = __webpack_require__(/*! ./adapters/http */ './node_modules/axios/lib/adapters/xhr.js');
        }

        return adapter;
      }

      const defaults = {
        adapter: getDefaultAdapter(),
        transformRequest: [function transformRequest(data, headers) {
          normalizeHeaderName(headers, 'Accept');
          normalizeHeaderName(headers, 'Content-Type');

          if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
            return data;
          }

          if (utils.isArrayBufferView(data)) {
            return data.buffer;
          }

          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
            return data.toString();
          }

          if (utils.isObject(data)) {
            setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
            return JSON.stringify(data);
          }

          return data;
        }],
        transformResponse: [function transformResponse(data) {
          /* eslint no-param-reassign:0 */
          if (typeof data === 'string') {
            try {
              data = JSON.parse(data);
            } catch (e) {
              /* Ignore */
            }
          }

          return data;
        }],

        /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        },
      };
      defaults.headers = {
        common: {
          Accept: 'application/json, text/plain, */*',
        },
      };
      utils.forEach(['delete', 'get', 'head'], method => {
        defaults.headers[method] = {};
      });
      utils.forEach(['post', 'put', 'patch'], method => {
        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
      });
      module.exports = defaults;
      /* WEBPACK VAR INJECTION */ }.call(this, __webpack_require__(/*! ./../../process/browser.js */ './node_modules/process/browser.js')));
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/bind.js':
  /*! ************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \*********************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        const args = new Array(arguments.length);

        for (let i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        return fn.apply(thisArg, args);
      };
    };
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/buildURL.js':
  /*! ****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \*************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js');

    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',')
        .replace(/%20/g, '+')
        .replace(/%5B/gi, '[')
        .replace(/%5D/gi, ']');
    }
    /**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

    module.exports = function buildURL(url, params, paramsSerializer) {
      /* eslint no-param-reassign:0 */
      if (!params) {
        return url;
      }

      let serializedParams;

      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        const parts = [];
        utils.forEach(params, (val, key) => {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = `${key}[]`;
          } else {
            val = [val];
          }

          utils.forEach(val, v => {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }

            parts.push(`${encode(key)}=${encode(v)}`);
          });
        });
        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        const hashmarkIndex = url.indexOf('#');

        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/combineURLs.js':
  /*! *******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \****************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? `${baseURL.replace(/\/+$/, '')}/${relativeURL.replace(/^\/+/, '')}` : baseURL;
    };
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/cookies.js':
  /*! ***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js');

    module.exports = utils.isStandardBrowserEnv() // Standard browser envs support document.cookie
      ? (function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            const cookie = [];
            cookie.push(`${name}=${encodeURIComponent(value)}`);

            if (utils.isNumber(expires)) {
              cookie.push(`expires=${new Date(expires).toGMTString()}`);
            }

            if (utils.isString(path)) {
              cookie.push(`path=${path}`);
            }

            if (utils.isString(domain)) {
              cookie.push(`domain=${domain}`);
            }

            if (secure === true) {
              cookie.push('secure');
            }

            document.cookie = cookie.join('; ');
          },
          read: function read(name) {
            const match = document.cookie.match(new RegExp(`(^|;\\s*)(${name})=([^;]*)`));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
          },
        };
      }()) // Non standard browser env (web workers, react-native) lack needed support.
      : (function nonStandardBrowserEnv() {
        return {
          write: function write() {},
          read: function read() {
            return null;
          },
          remove: function remove() {},
        };
      }());
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/isAbsoluteURL.js':
  /*! *********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \******************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

    module.exports = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/isAxiosError.js':
  /*! ********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \******************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */

    module.exports = function isAxiosError(payload) {
      return typeof payload === 'object' && payload.isAxiosError === true;
    };
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/isURLSameOrigin.js':
  /*! ***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \********************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js');

    module.exports = utils.isStandardBrowserEnv() // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
      ? (function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement('a');
        let originURL;
        /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

        function resolveURL(url) {
          let href = url;

          if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
          }

          urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : `/${urlParsingNode.pathname}`,
          };
        }

        originURL = resolveURL(window.location.href);
        /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

        return function isURLSameOrigin(requestURL) {
          const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()) // Non standard browser envs (web workers, react-native) lack needed support.
      : (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }());
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/normalizeHeaderName.js':
  /*! ***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ../utils */ './node_modules/axios/lib/utils.js');

    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, (value, name) => {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/parseHeaders.js':
  /*! ********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \******************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const utils = __webpack_require__(/*! ./../utils */ './node_modules/axios/lib/utils.js'); // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers

    const ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
    /**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

    module.exports = function parseHeaders(headers) {
      const parsed = {};
      let key;
      let val;
      let i;

      if (!headers) {
        return parsed;
      }

      utils.forEach(headers.split('\n'), line => {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }

          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? `${parsed[key]}, ${val}` : val;
          }
        }
      });
      return parsed;
    };
    /***/ }),

  /***/ './node_modules/axios/lib/helpers/spread.js':
  /*! **************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
    /***/ }),

  /***/ './node_modules/axios/lib/utils.js':
  /*! *****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \**************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const bind = __webpack_require__(/*! ./helpers/bind */ './node_modules/axios/lib/helpers/bind.js');
    /* global toString:true */
    // utils is a library of generic helper functions non-specific to axios

    const { toString } = Object.prototype;
    /**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

    function isArray(val) {
      return toString.call(val) === '[object Array]';
    }
    /**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

    function isUndefined(val) {
      return typeof val === 'undefined';
    }
    /**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */

    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }
    /**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

    function isArrayBuffer(val) {
      return toString.call(val) === '[object ArrayBuffer]';
    }
    /**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

    function isFormData(val) {
      return typeof FormData !== 'undefined' && val instanceof FormData;
    }
    /**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

    function isArrayBufferView(val) {
      let result;

      if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }

      return result;
    }
    /**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

    function isString(val) {
      return typeof val === 'string';
    }
    /**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

    function isNumber(val) {
      return typeof val === 'number';
    }
    /**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

    function isObject(val) {
      return val !== null && typeof val === 'object';
    }
    /**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */

    function isPlainObject(val) {
      if (toString.call(val) !== '[object Object]') {
        return false;
      }

      const prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    /**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

    function isDate(val) {
      return toString.call(val) === '[object Date]';
    }
    /**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

    function isFile(val) {
      return toString.call(val) === '[object File]';
    }
    /**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

    function isBlob(val) {
      return toString.call(val) === '[object Blob]';
    }
    /**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }
    /**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    /**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

    function isURLSearchParams(val) {
      return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
    }
    /**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

    function trim(str) {
      return str.replace(/^\s*/, '').replace(/\s*$/, '');
    }
    /**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
        return false;
      }

      return typeof window !== 'undefined' && typeof document !== 'undefined';
    }
    /**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      } // Force an array if not already something iterable

      if (typeof obj !== 'object') {
        /* eslint no-param-reassign:0 */
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (let i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (const key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    /**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

    function merge()
    /* obj1, obj2, obj3, ... */
    {
      const result = {};

      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (let i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }

      return result;
    }
    /**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

    function extend(a, b, thisArg) {
      forEach(b, (val, key) => {
        if (thisArg && typeof val === 'function') {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    /**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */

    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }

      return content;
    }

    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
    };
    /***/ }),

  /***/ './node_modules/color-convert/conversions.js':
  /*! ***************************************************!*\
  !*** ./node_modules/color-convert/conversions.js ***!
  \************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /* MIT license */
    const cssKeywords = __webpack_require__(/*! color-name */ './node_modules/color-convert/node_modules/color-name/index.js'); // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)

    const reverseKeywords = {};

    for (const key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }

    const convert = module.exports = {
      rgb: {
        channels: 3,
        labels: 'rgb',
      },
      hsl: {
        channels: 3,
        labels: 'hsl',
      },
      hsv: {
        channels: 3,
        labels: 'hsv',
      },
      hwb: {
        channels: 3,
        labels: 'hwb',
      },
      cmyk: {
        channels: 4,
        labels: 'cmyk',
      },
      xyz: {
        channels: 3,
        labels: 'xyz',
      },
      lab: {
        channels: 3,
        labels: 'lab',
      },
      lch: {
        channels: 3,
        labels: 'lch',
      },
      hex: {
        channels: 1,
        labels: ['hex'],
      },
      keyword: {
        channels: 1,
        labels: ['keyword'],
      },
      ansi16: {
        channels: 1,
        labels: ['ansi16'],
      },
      ansi256: {
        channels: 1,
        labels: ['ansi256'],
      },
      hcg: {
        channels: 3,
        labels: ['h', 'c', 'g'],
      },
      apple: {
        channels: 3,
        labels: ['r16', 'g16', 'b16'],
      },
      gray: {
        channels: 1,
        labels: ['gray'],
      },
    }; // hide .channels and .labels properties

    for (const model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!('channels' in convert[model])) {
          throw new Error(`missing channels property: ${model}`);
        }

        if (!('labels' in convert[model])) {
          throw new Error(`missing channel labels property: ${model}`);
        }

        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error(`channel and label counts mismatch: ${model}`);
        }

        const { channels } = convert[model];
        const { labels } = convert[model];
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], 'channels', {
          value: channels,
        });
        Object.defineProperty(convert[model], 'labels', {
          value: labels,
        });
      }
    }

    convert.rgb.hsl = function (rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const min = Math.min(r, g, b);
      const max = Math.max(r, g, b);
      const delta = max - min;
      let h;
      let s;
      let l;

      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }

      h = Math.min(h * 60, 360);

      if (h < 0) {
        h += 360;
      }

      l = (min + max) / 2;

      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }

      return [h, s * 100, l * 100];
    };

    convert.rgb.hsv = function (rgb) {
      let rdif;
      let gdif;
      let bdif;
      let h;
      let s;
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const v = Math.max(r, g, b);
      const diff = v - Math.min(r, g, b);

      const diffc = function (c) {
        return (v - c) / 6 / diff + 1 / 2;
      };

      if (diff === 0) {
        h = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);

        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }

        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }

      return [h * 360, s * 100, v * 100];
    };

    convert.rgb.hwb = function (rgb) {
      const r = rgb[0];
      const g = rgb[1];
      let b = rgb[2];
      const h = convert.rgb.hsl(rgb)[0];
      const w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };

    convert.rgb.cmyk = function (rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      let c;
      let m;
      let y;
      let k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    /**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */

    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }

    convert.rgb.keyword = function (rgb) {
      const reversed = reverseKeywords[rgb];

      if (reversed) {
        return reversed;
      }

      let currentClosestDistance = Infinity;
      let currentClosestKeyword;

      for (const keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          const value = cssKeywords[keyword]; // Compute comparative distance

          const distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest

          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }

      return currentClosestKeyword;
    };

    convert.keyword.rgb = function (keyword) {
      return cssKeywords[keyword];
    };

    convert.rgb.xyz = function (rgb) {
      let r = rgb[0] / 255;
      let g = rgb[1] / 255;
      let b = rgb[2] / 255; // assume sRGB

      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };

    convert.rgb.lab = function (rgb) {
      const xyz = convert.rgb.xyz(rgb);
      let x = xyz[0];
      let y = xyz[1];
      let z = xyz[2];
      let l;
      let a;
      let b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };

    convert.hsl.rgb = function (hsl) {
      const h = hsl[0] / 360;
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      let t1;
      let t2;
      let t3;
      let rgb;
      let val;

      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }

      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }

      t1 = 2 * l - t2;
      rgb = [0, 0, 0];

      for (let i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);

        if (t3 < 0) {
          t3++;
        }

        if (t3 > 1) {
          t3--;
        }

        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }

        rgb[i] = val * 255;
      }

      return rgb;
    };

    convert.hsl.hsv = function (hsl) {
      const h = hsl[0];
      let s = hsl[1] / 100;
      let l = hsl[2] / 100;
      let smin = s;
      const lmin = Math.max(l, 0.01);
      let sv;
      let v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };

    convert.hsv.rgb = function (hsv) {
      const h = hsv[0] / 60;
      const s = hsv[1] / 100;
      let v = hsv[2] / 100;
      const hi = Math.floor(h) % 6;
      const f = h - Math.floor(h);
      const p = 255 * v * (1 - s);
      const q = 255 * v * (1 - s * f);
      const t = 255 * v * (1 - s * (1 - f));
      v *= 255;

      switch (hi) {
        case 0:
          return [v, t, p];

        case 1:
          return [q, v, p];

        case 2:
          return [p, v, t];

        case 3:
          return [p, q, v];

        case 4:
          return [t, p, v];

        case 5:
          return [v, p, q];
      }
    };

    convert.hsv.hsl = function (hsv) {
      const h = hsv[0];
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const vmin = Math.max(v, 0.01);
      let lmin;
      let sl;
      let l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb

    convert.hwb.rgb = function (hwb) {
      const h = hwb[0] / 360;
      let wh = hwb[1] / 100;
      let bl = hwb[2] / 100;
      const ratio = wh + bl;
      let i;
      let v;
      let f;
      let n; // wh + bl cant be > 1

      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }

      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;

      if ((i & 0x01) !== 0) {
        f = 1 - f;
      }

      n = wh + f * (v - wh); // linear interpolation

      let r;
      let g;
      let b;

      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;

        case 1:
          r = n;
          g = v;
          b = wh;
          break;

        case 2:
          r = wh;
          g = v;
          b = n;
          break;

        case 3:
          r = wh;
          g = n;
          b = v;
          break;

        case 4:
          r = n;
          g = wh;
          b = v;
          break;

        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }

      return [r * 255, g * 255, b * 255];
    };

    convert.cmyk.rgb = function (cmyk) {
      const c = cmyk[0] / 100;
      const m = cmyk[1] / 100;
      const y = cmyk[2] / 100;
      const k = cmyk[3] / 100;
      let r;
      let g;
      let b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };

    convert.xyz.rgb = function (xyz) {
      const x = xyz[0] / 100;
      const y = xyz[1] / 100;
      const z = xyz[2] / 100;
      let r;
      let g;
      let b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB

      r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
      g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
      b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };

    convert.xyz.lab = function (xyz) {
      let x = xyz[0];
      let y = xyz[1];
      let z = xyz[2];
      let l;
      let a;
      let b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };

    convert.lab.xyz = function (lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let x;
      let y;
      let z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      const y2 = Math.pow(y, 3);
      const x2 = Math.pow(x, 3);
      const z2 = Math.pow(z, 3);
      y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };

    convert.lab.lch = function (lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let hr;
      let h;
      let c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;

      if (h < 0) {
        h += 360;
      }

      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };

    convert.lch.lab = function (lch) {
      const l = lch[0];
      const c = lch[1];
      const h = lch[2];
      let a;
      let b;
      let hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    };

    convert.rgb.ansi16 = function (args) {
      const r = args[0];
      const g = args[1];
      const b = args[2];
      let value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

      value = Math.round(value / 50);

      if (value === 0) {
        return 30;
      }

      let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

      if (value === 2) {
        ansi += 60;
      }

      return ansi;
    };

    convert.hsv.ansi16 = function (args) {
      // optimization here; we already know the value and don't need to get
      // it converted for us.
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };

    convert.rgb.ansi256 = function (args) {
      const r = args[0];
      const g = args[1];
      const b = args[2]; // we use the extended greyscale palette here, with the exception of
      // black and white. normal palette only has 4 greyscale shades.

      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }

        if (r > 248) {
          return 231;
        }

        return Math.round((r - 8) / 247 * 24) + 232;
      }

      const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };

    convert.ansi16.rgb = function (args) {
      let color = args % 10; // handle greyscale

      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }

        color = color / 10.5 * 255;
        return [color, color, color];
      }

      const mult = (~~(args > 50) + 1) * 0.5;
      const r = (color & 1) * mult * 255;
      const g = (color >> 1 & 1) * mult * 255;
      const b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };

    convert.ansi256.rgb = function (args) {
      // handle greyscale
      if (args >= 232) {
        const c = (args - 232) * 10 + 8;
        return [c, c, c];
      }

      args -= 16;
      let rem;
      const r = Math.floor(args / 36) / 5 * 255;
      const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      const b = rem % 6 / 5 * 255;
      return [r, g, b];
    };

    convert.rgb.hex = function (args) {
      const integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
      const string = integer.toString(16).toUpperCase();
      return '000000'.substring(string.length) + string;
    };

    convert.hex.rgb = function (args) {
      const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

      if (!match) {
        return [0, 0, 0];
      }

      let colorString = match[0];

      if (match[0].length === 3) {
        colorString = colorString.split('').map(char => char + char).join('');
      }

      const integer = parseInt(colorString, 16);
      const r = integer >> 16 & 0xFF;
      const g = integer >> 8 & 0xFF;
      const b = integer & 0xFF;
      return [r, g, b];
    };

    convert.rgb.hcg = function (rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const max = Math.max(Math.max(r, g), b);
      const min = Math.min(Math.min(r, g), b);
      const chroma = max - min;
      let grayscale;
      let hue;

      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }

      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }

      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert.hsl.hcg = function (hsl) {
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      let c = 1;
      let f = 0;

      if (l < 0.5) {
        c = 2.0 * s * l;
      } else {
        c = 2.0 * s * (1.0 - l);
      }

      if (c < 1.0) {
        f = (l - 0.5 * c) / (1.0 - c);
      }

      return [hsl[0], c * 100, f * 100];
    };

    convert.hsv.hcg = function (hsv) {
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const c = s * v;
      let f = 0;

      if (c < 1.0) {
        f = (v - c) / (1 - c);
      }

      return [hsv[0], c * 100, f * 100];
    };

    convert.hcg.rgb = function (hcg) {
      const h = hcg[0] / 360;
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;

      if (c === 0.0) {
        return [g * 255, g * 255, g * 255];
      }

      const pure = [0, 0, 0];
      const hi = h % 1 * 6;
      const v = hi % 1;
      const w = 1 - v;
      let mg = 0;

      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;

        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;

        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;

        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;

        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;

        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }

      mg = (1.0 - c) * g;
      return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
    };

    convert.hcg.hsv = function (hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1.0 - c);
      let f = 0;

      if (v > 0.0) {
        f = c / v;
      }

      return [hcg[0], f * 100, v * 100];
    };

    convert.hcg.hsl = function (hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const l = g * (1.0 - c) + 0.5 * c;
      let s = 0;

      if (l > 0.0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1.0) {
        s = c / (2 * (1 - l));
      }

      return [hcg[0], s * 100, l * 100];
    };

    convert.hcg.hwb = function (hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1.0 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert.hwb.hcg = function (hwb) {
      const w = hwb[1] / 100;
      const b = hwb[2] / 100;
      const v = 1 - b;
      const c = v - w;
      let g = 0;

      if (c < 1) {
        g = (v - c) / (1 - c);
      }

      return [hwb[0], c * 100, g * 100];
    };

    convert.apple.rgb = function (apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };

    convert.rgb.apple = function (rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };

    convert.gray.rgb = function (args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert.gray.hsl = convert.gray.hsv = function (args) {
      return [0, 0, args[0]];
    };

    convert.gray.hwb = function (gray) {
      return [0, 100, gray[0]];
    };

    convert.gray.cmyk = function (gray) {
      return [0, 0, 0, gray[0]];
    };

    convert.gray.lab = function (gray) {
      return [gray[0], 0, 0];
    };

    convert.gray.hex = function (gray) {
      const val = Math.round(gray[0] / 100 * 255) & 0xFF;
      const integer = (val << 16) + (val << 8) + val;
      const string = integer.toString(16).toUpperCase();
      return '000000'.substring(string.length) + string;
    };

    convert.rgb.gray = function (rgb) {
      const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
    /***/ }),

  /***/ './node_modules/color-convert/index.js':
  /*! *********************************************!*\
  !*** ./node_modules/color-convert/index.js ***!
  \******************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const conversions = __webpack_require__(/*! ./conversions */ './node_modules/color-convert/conversions.js');

    const route = __webpack_require__(/*! ./route */ './node_modules/color-convert/route.js');

    const convert = {};
    const models = Object.keys(conversions);

    function wrapRaw(fn) {
      const wrappedFn = function (args) {
        if (args === undefined || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        return fn(args);
      }; // preserve .conversion property if there is one

      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    function wrapRounded(fn) {
      const wrappedFn = function (args) {
        if (args === undefined || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        const result = fn(args); // we're assuming the result is an array here.
        // see notice in conversions.js; don't use box types
        // in conversion functions.

        if (typeof result === 'object') {
          for (let len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }

        return result;
      }; // preserve .conversion property if there is one

      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    models.forEach(fromModel => {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], 'channels', {
        value: conversions[fromModel].channels,
      });
      Object.defineProperty(convert[fromModel], 'labels', {
        value: conversions[fromModel].labels,
      });
      const routes = route(fromModel);
      const routeModels = Object.keys(routes);
      routeModels.forEach(toModel => {
        const fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module.exports = convert;
    /***/ }),

  /***/ './node_modules/color-convert/node_modules/color-name/index.js':
  /*! *********************************************************************!*\
  !*** ./node_modules/color-convert/node_modules/color-name/index.js ***!
  \******************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    module.exports = {
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      grey: [128, 128, 128],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      rebeccapurple: [102, 51, 153],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50],
    };
    /***/ }),

  /***/ './node_modules/color-convert/route.js':
  /*! *********************************************!*\
  !*** ./node_modules/color-convert/route.js ***!
  \******************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const conversions = __webpack_require__(/*! ./conversions */ './node_modules/color-convert/conversions.js');
    /*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

    function buildGraph() {
      const graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3

      const models = Object.keys(conversions);

      for (let len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null,
        };
      }

      return graph;
    } // https://en.wikipedia.org/wiki/Breadth-first_search

    function deriveBFS(fromModel) {
      const graph = buildGraph();
      const queue = [fromModel]; // unshift -> queue -> pop

      graph[fromModel].distance = 0;

      while (queue.length) {
        const current = queue.pop();
        const adjacents = Object.keys(conversions[current]);

        for (let len = adjacents.length, i = 0; i < len; i++) {
          const adjacent = adjacents[i];
          const node = graph[adjacent];

          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }

      return graph;
    }

    function link(from, to) {
      return function (args) {
        return to(from(args));
      };
    }

    function wrapConversion(toModel, graph) {
      const path = [graph[toModel].parent, toModel];
      let fn = conversions[graph[toModel].parent][toModel];
      let cur = graph[toModel].parent;

      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }

      fn.conversion = path;
      return fn;
    }

    module.exports = function (fromModel) {
      const graph = deriveBFS(fromModel);
      const conversion = {};
      const models = Object.keys(graph);

      for (let len = models.length, i = 0; i < len; i++) {
        const toModel = models[i];
        const node = graph[toModel];

        if (node.parent === null) {
          // no possible conversion, or this node is the source model.
          continue;
        }

        conversion[toModel] = wrapConversion(toModel, graph);
      }

      return conversion;
    };
    /***/ }),

  /***/ './node_modules/css-loader/dist/runtime/api.js':
  /*! *****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \**************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
    // css base code, injected by the css-loader
    // eslint-disable-next-line func-names

    module.exports = function (useSourceMap) {
      const list = []; // return the list of modules as css string

      list.toString = function toString() {
        return this.map(item => {
          const content = cssWithMappingToString(item, useSourceMap);

          if (item[2]) {
            return '@media '.concat(item[2], ' {').concat(content, '}');
          }

          return content;
        }).join('');
      }; // import a list of modules into the list
      // eslint-disable-next-line func-names

      list.i = function (modules, mediaQuery, dedupe) {
        if (typeof modules === 'string') {
          // eslint-disable-next-line no-param-reassign
          modules = [[null, modules, '']];
        }

        const alreadyImportedModules = {};

        if (dedupe) {
          for (let i = 0; i < this.length; i++) {
            // eslint-disable-next-line prefer-destructuring
            const id = this[i][0];

            if (id != null) {
              alreadyImportedModules[id] = true;
            }
          }
        }

        for (let _i = 0; _i < modules.length; _i++) {
          const item = [].concat(modules[_i]);

          if (dedupe && alreadyImportedModules[item[0]]) {
            // eslint-disable-next-line no-continue
            continue;
          }

          if (mediaQuery) {
            if (!item[2]) {
              item[2] = mediaQuery;
            } else {
              item[2] = ''.concat(mediaQuery, ' and ').concat(item[2]);
            }
          }

          list.push(item);
        }
      };

      return list;
    };

    function cssWithMappingToString(item, useSourceMap) {
      const content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

      const cssMapping = item[3];

      if (!cssMapping) {
        return content;
      }

      if (useSourceMap && typeof btoa === 'function') {
        const sourceMapping = toComment(cssMapping);
        const sourceURLs = cssMapping.sources.map(source => '/*# sourceURL='.concat(cssMapping.sourceRoot || '').concat(source, ' */'));
        return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
      }

      return [content].join('\n');
    } // Adapted from convert-source-map (MIT)

    function toComment(sourceMap) {
      // eslint-disable-next-line no-undef
      const base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
      const data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(base64);
      return '/*# '.concat(data, ' */');
    }
    /***/ }),

  /***/ './node_modules/css-loader/dist/runtime/getUrl.js':
  /*! ********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \******************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    module.exports = function (url, options) {
      if (!options) {
        // eslint-disable-next-line no-param-reassign
        options = {};
      } // eslint-disable-next-line no-underscore-dangle, no-param-reassign

      url = url && url.__esModule ? url.default : url;

      if (typeof url !== 'string') {
        return url;
      } // If url is already wrapped in quotes, remove them

      if (/^['"].*['"]$/.test(url)) {
        // eslint-disable-next-line no-param-reassign
        url = url.slice(1, -1);
      }

      if (options.hash) {
        // eslint-disable-next-line no-param-reassign
        url += options.hash;
      } // Should url be wrapped?
      // See https://drafts.csswg.org/css-values-3/#urls

      if (/["'() \t\n]/.test(url) || options.needQuotes) {
        return '"'.concat(url.replace(/"/g, '\\"').replace(/\n/g, '\\n'), '"');
      }

      return url;
    };
    /***/ }),

  /***/ './node_modules/events/events.js':
  /*! ***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    const R = typeof Reflect === 'object' ? Reflect : null;
    const ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    let ReflectOwnKeys;

    if (R && typeof R.ownKeys === 'function') {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }

    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }

    const NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    };

    function EventEmitter() {
      EventEmitter.init.call(this);
    }

    module.exports = EventEmitter;
    module.exports.once = once; // Backwards-compat with node 0.10.x

    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.

    let defaultMaxListeners = 10;

    function checkListener(listener) {
      if (typeof listener !== 'function') {
        throw new TypeError(`The "listener" argument must be of type Function. Received type ${typeof listener}`);
      }
    }

    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get() {
        return defaultMaxListeners;
      },
      set(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError(`The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ${arg}.`);
        }

        defaultMaxListeners = arg;
      },
    });

    EventEmitter.init = function () {
      if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    }; // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.

    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError(`The value of "n" is out of range. It must be a non-negative number. Received ${n}.`);
      }

      this._maxListeners = n;
      return this;
    };

    function _getMaxListeners(that) {
      if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };

    EventEmitter.prototype.emit = function emit(type) {
      const args = [];

      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

      let doError = type === 'error';
      const events = this._events;
      if (events !== undefined) doError = doError && events.error === undefined; else if (!doError) return false; // If there is no 'error' event listener then throw.

      if (doError) {
        let er;
        if (args.length > 0) er = args[0];

        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        } // At least give some kind of context to the user

        const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);
        err.context = er;
        throw err; // Unhandled 'error' event
      }

      const handler = events[type];
      if (handler === undefined) return false;

      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        const len = handler.length;
        const listeners = arrayClone(handler, len);

        for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      let m;
      let events;
      let existing;
      checkListener(listener);
      events = target._events;

      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object

          events = target._events;
        }

        existing = events[type];
      }

      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        } // Check for listener leak

        m = _getMaxListeners(target);

        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true; // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax

          const w = new Error(`Possible EventEmitter memory leak detected. ${existing.length} ${String(type)} listeners ` + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }

    function _onceWrap(target, type, listener) {
      const state = {
        fired: false,
        wrapFn: undefined,
        target,
        type,
        listener,
      };
      const wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    }; // Emits a 'removeListener' event if and only if the listener was removed.

    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      let list; let events; let position; let i; let
        originalListener;
      checkListener(listener);
      events = this._events;
      if (events === undefined) return this;
      list = events[type];
      if (list === undefined) return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null); else {
          delete events[type];
          if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0) return this;
        if (position === 0) list.shift(); else {
          spliceOne(list, position);
        }
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      let listeners; let events; let
        i;
      events = this._events;
      if (events === undefined) return this; // not listening for removeListener, no need to emit

      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0) this._events = Object.create(null); else delete events[type];
        }

        return this;
      } // emit removeListener for all listeners on all events

      if (arguments.length === 0) {
        const keys = Object.keys(events);
        let key;

        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }

        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

    function _listeners(target, type, unwrap) {
      const events = target._events;
      if (events === undefined) return [];
      const evlistener = events[type];
      if (evlistener === undefined) return [];
      if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function (emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      }
      return listenerCount.call(emitter, type);
    };

    EventEmitter.prototype.listenerCount = listenerCount;

    function listenerCount(type) {
      const events = this._events;

      if (events !== undefined) {
        const evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } if (evlistener !== undefined) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };

    function arrayClone(arr, n) {
      const copy = new Array(n);

      for (let i = 0; i < n; ++i) copy[i] = arr[i];

      return copy;
    }

    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++) list[index] = list[index + 1];

      list.pop();
    }

    function unwrapListeners(arr) {
      const ret = new Array(arr.length);

      for (let i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }

      return ret;
    }

    function once(emitter, name) {
      return new Promise((resolve, reject) => {
        function eventListener() {
          if (errorListener !== undefined) {
            emitter.removeListener('error', errorListener);
          }

          resolve([].slice.call(arguments));
        }

        let errorListener; // Adding an error listener is not optional because
        // if an error is thrown on an event emitter we cannot
        // guarantee that the actual event we are waiting will
        // be fired. The result could be a silent way to create
        // memory or file descriptor leaks, which is something
        // we should avoid.

        if (name !== 'error') {
          errorListener = function errorListener(err) {
            emitter.removeListener(name, eventListener);
            reject(err);
          };

          emitter.once('error', errorListener);
        }

        emitter.once(name, eventListener);
      });
    }
    /***/ }),

  /***/ './node_modules/history/esm/history.js':
  /*! *********************************************!*\
  !*** ./node_modules/history/esm/history.js ***!
  \******************************************** */
  /*! exports provided: createBrowserHistory, createHashHistory, createMemoryHistory, createLocation, locationsAreEqual, parsePath, createPath */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createBrowserHistory', () => createBrowserHistory);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createHashHistory', () => createHashHistory);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createMemoryHistory', () => createMemoryHistory);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createLocation', () => createLocation);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'locationsAreEqual', () => locationsAreEqual);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'parsePath', () => parsePath);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createPath', () => createPath);
    /* harmony import */ const _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ './node_modules/@babel/runtime/helpers/esm/extends.js');
    /* harmony import */ const resolve_pathname__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! resolve-pathname */ './node_modules/resolve-pathname/esm/resolve-pathname.js');
    /* harmony import */ const value_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! value-equal */ './node_modules/value-equal/esm/value-equal.js');
    /* harmony import */ const tiny_warning__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tiny-warning */ './node_modules/tiny-warning/dist/tiny-warning.esm.js');
    /* harmony import */ const tiny_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tiny-invariant */ './node_modules/tiny-invariant/dist/tiny-invariant.esm.js');

    function addLeadingSlash(path) {
      return path.charAt(0) === '/' ? path : `/${path}`;
    }

    function stripLeadingSlash(path) {
      return path.charAt(0) === '/' ? path.substr(1) : path;
    }

    function hasBasename(path, prefix) {
      return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
    }

    function stripBasename(path, prefix) {
      return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
    }

    function stripTrailingSlash(path) {
      return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
    }

    function parsePath(path) {
      let pathname = path || '/';
      let search = '';
      let hash = '';
      const hashIndex = pathname.indexOf('#');

      if (hashIndex !== -1) {
        hash = pathname.substr(hashIndex);
        pathname = pathname.substr(0, hashIndex);
      }

      const searchIndex = pathname.indexOf('?');

      if (searchIndex !== -1) {
        search = pathname.substr(searchIndex);
        pathname = pathname.substr(0, searchIndex);
      }

      return {
        pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash,
      };
    }

    function createPath(location) {
      const { pathname } = location;
      const { search } = location;
      const { hash } = location;
      let path = pathname || '/';
      if (search && search !== '?') path += search.charAt(0) === '?' ? search : `?${search}`;
      if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : `#${hash}`;
      return path;
    }

    function createLocation(path, state, key, currentLocation) {
      let location;

      if (typeof path === 'string') {
        // Two-arg form: push(path, state)
        location = parsePath(path);
        location.state = state;
      } else {
        // One-arg form: push(location)
        location = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, path);
        if (location.pathname === undefined) location.pathname = '';

        if (location.search) {
          if (location.search.charAt(0) !== '?') location.search = `?${location.search}`;
        } else {
          location.search = '';
        }

        if (location.hash) {
          if (location.hash.charAt(0) !== '#') location.hash = `#${location.hash}`;
        } else {
          location.hash = '';
        }

        if (state !== undefined && location.state === undefined) location.state = state;
      }

      try {
        location.pathname = decodeURI(location.pathname);
      } catch (e) {
        if (e instanceof URIError) {
          throw new URIError(`Pathname "${location.pathname}" could not be decoded. ` + 'This is likely caused by an invalid percent-encoding.');
        } else {
          throw e;
        }
      }

      if (key) location.key = key;

      if (currentLocation) {
        // Resolve incomplete/relative pathname relative to current location.
        if (!location.pathname) {
          location.pathname = currentLocation.pathname;
        } else if (location.pathname.charAt(0) !== '/') {
          location.pathname = Object(resolve_pathname__WEBPACK_IMPORTED_MODULE_1__.default)(location.pathname, currentLocation.pathname);
        }
      } else {
        // When there is no prior location and pathname is empty, set it to /
        if (!location.pathname) {
          location.pathname = '/';
        }
      }

      return location;
    }

    function locationsAreEqual(a, b) {
      return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && Object(value_equal__WEBPACK_IMPORTED_MODULE_2__.default)(a.state, b.state);
    }

    function createTransitionManager() {
      let prompt = null;

      function setPrompt(nextPrompt) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(prompt == null, 'A history supports only one prompt at a time') : undefined;
        prompt = nextPrompt;
        return function () {
          if (prompt === nextPrompt) prompt = null;
        };
      }

      function confirmTransitionTo(location, action, getUserConfirmation, callback) {
        // TODO: If another transition starts while we're still confirming
        // the previous one, we may end up in a weird state. Figure out the
        // best way to handle this.
        if (prompt != null) {
          const result = typeof prompt === 'function' ? prompt(location, action) : prompt;

          if (typeof result === 'string') {
            if (typeof getUserConfirmation === 'function') {
              getUserConfirmation(result, callback);
            } else {
              true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : undefined;
              callback(true);
            }
          } else {
            // Return false from a transition hook to cancel the transition.
            callback(result !== false);
          }
        } else {
          callback(true);
        }
      }

      let listeners = [];

      function appendListener(fn) {
        let isActive = true;

        function listener() {
          if (isActive) fn.apply(void 0, arguments);
        }

        listeners.push(listener);
        return function () {
          isActive = false;
          listeners = listeners.filter(item => item !== listener);
        };
      }

      function notifyListeners() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        listeners.forEach(listener => listener.apply(void 0, args));
      }

      return {
        setPrompt,
        confirmTransitionTo,
        appendListener,
        notifyListeners,
      };
    }

    const canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

    function getConfirmation(message, callback) {
      callback(window.confirm(message)); // eslint-disable-line no-alert
    }
    /**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

    function supportsHistory() {
      const ua = window.navigator.userAgent;
      if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
      return window.history && 'pushState' in window.history;
    }
    /**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

    function supportsPopStateOnHashChange() {
      return window.navigator.userAgent.indexOf('Trident') === -1;
    }
    /**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

    function supportsGoWithoutReloadUsingHash() {
      return window.navigator.userAgent.indexOf('Firefox') === -1;
    }
    /**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

    function isExtraneousPopstateEvent(event) {
      return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
    }

    const PopStateEvent = 'popstate';
    const HashChangeEvent = 'hashchange';

    function getHistoryState() {
      try {
        return window.history.state || {};
      } catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {};
      }
    }
    /**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

    function createBrowserHistory(props) {
      if (props === void 0) {
        props = {};
      }

      !canUseDOM ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__.default)(false, 'Browser history needs a DOM') : undefined : void 0;
      const globalHistory = window.history;
      const canUseHistory = supportsHistory();
      const needsHashChangeListener = !supportsPopStateOnHashChange();
      const _props = props;
      const _props$forceRefresh = _props.forceRefresh;
      const forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh;
      const _props$getUserConfirm = _props.getUserConfirmation;
      const getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm;
      const _props$keyLength = _props.keyLength;
      const keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
      const basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

      function getDOMLocation(historyState) {
        const _ref = historyState || {};
        const { key } = _ref;
        const { state } = _ref;

        const _window$location = window.location;
        const { pathname } = _window$location;
        const { search } = _window$location;
        const { hash } = _window$location;
        let path = pathname + search + hash;
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!basename || hasBasename(path, basename), `${'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "'}${path}" to begin with "${basename}".`) : undefined;
        if (basename) path = stripBasename(path, basename);
        return createLocation(path, state, key);
      }

      function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
      }

      const transitionManager = createTransitionManager();

      function setState(nextState) {
        Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)(history, nextState);

        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      function handlePopState(event) {
        // Ignore extraneous popstate events in WebKit.
        if (isExtraneousPopstateEvent(event)) return;
        handlePop(getDOMLocation(event.state));
      }

      function handleHashChange() {
        handlePop(getDOMLocation(getHistoryState()));
      }

      let forceNextPop = false;

      function handlePop(location) {
        if (forceNextPop) {
          forceNextPop = false;
          setState();
        } else {
          const action = 'POP';
          transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
            if (ok) {
              setState({
                action,
                location,
              });
            } else {
              revertPop(location);
            }
          });
        }
      }

      function revertPop(fromLocation) {
        const toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of keys we've seen in sessionStorage.
        // Instead, we just default to 0 for keys we don't know.

        let toIndex = allKeys.indexOf(toLocation.key);
        if (toIndex === -1) toIndex = 0;
        let fromIndex = allKeys.indexOf(fromLocation.key);
        if (fromIndex === -1) fromIndex = 0;
        const delta = toIndex - fromIndex;

        if (delta) {
          forceNextPop = true;
          go(delta);
        }
      }

      const initialLocation = getDOMLocation(getHistoryState());
      var allKeys = [initialLocation.key]; // Public interface

      function createHref(location) {
        return basename + createPath(location);
      }

      function push(path, state) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
        const action = 'PUSH';
        const location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
          if (!ok) return;
          const href = createHref(location);
          const { key } = location;
          const { state } = location;

          if (canUseHistory) {
            globalHistory.pushState({
              key,
              state,
            }, null, href);

            if (forceRefresh) {
              window.location.href = href;
            } else {
              const prevIndex = allKeys.indexOf(history.location.key);
              const nextKeys = allKeys.slice(0, prevIndex + 1);
              nextKeys.push(location.key);
              allKeys = nextKeys;
              setState({
                action,
                location,
              });
            }
          } else {
            true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : undefined;
            window.location.href = href;
          }
        });
      }

      function replace(path, state) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
        const action = 'REPLACE';
        const location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
          if (!ok) return;
          const href = createHref(location);
          const { key } = location;
          const { state } = location;

          if (canUseHistory) {
            globalHistory.replaceState({
              key,
              state,
            }, null, href);

            if (forceRefresh) {
              window.location.replace(href);
            } else {
              const prevIndex = allKeys.indexOf(history.location.key);
              if (prevIndex !== -1) allKeys[prevIndex] = location.key;
              setState({
                action,
                location,
              });
            }
          } else {
            true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : undefined;
            window.location.replace(href);
          }
        });
      }

      function go(n) {
        globalHistory.go(n);
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      let listenerCount = 0;

      function checkDOMListeners(delta) {
        listenerCount += delta;

        if (listenerCount === 1 && delta === 1) {
          window.addEventListener(PopStateEvent, handlePopState);
          if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
        } else if (listenerCount === 0) {
          window.removeEventListener(PopStateEvent, handlePopState);
          if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
        }
      }

      let isBlocked = false;

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        const unblock = transitionManager.setPrompt(prompt);

        if (!isBlocked) {
          checkDOMListeners(1);
          isBlocked = true;
        }

        return function () {
          if (isBlocked) {
            isBlocked = false;
            checkDOMListeners(-1);
          }

          return unblock();
        };
      }

      function listen(listener) {
        const unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
          checkDOMListeners(-1);
          unlisten();
        };
      }

      var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref,
        push,
        replace,
        go,
        goBack,
        goForward,
        block,
        listen,
      };
      return history;
    }

    const HashChangeEvent$1 = 'hashchange';
    const HashPathCoders = {
      hashbang: {
        encodePath: function encodePath(path) {
          return path.charAt(0) === '!' ? path : `!/${stripLeadingSlash(path)}`;
        },
        decodePath: function decodePath(path) {
          return path.charAt(0) === '!' ? path.substr(1) : path;
        },
      },
      noslash: {
        encodePath: stripLeadingSlash,
        decodePath: addLeadingSlash,
      },
      slash: {
        encodePath: addLeadingSlash,
        decodePath: addLeadingSlash,
      },
    };

    function stripHash(url) {
      const hashIndex = url.indexOf('#');
      return hashIndex === -1 ? url : url.slice(0, hashIndex);
    }

    function getHashPath() {
      // We can't use window.location.hash here because it's not
      // consistent across browsers - Firefox will pre-decode it!
      const { href } = window.location;
      const hashIndex = href.indexOf('#');
      return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
    }

    function pushHashPath(path) {
      window.location.hash = path;
    }

    function replaceHashPath(path) {
      window.location.replace(`${stripHash(window.location.href)}#${path}`);
    }

    function createHashHistory(props) {
      if (props === void 0) {
        props = {};
      }

      !canUseDOM ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__.default)(false, 'Hash history needs a DOM') : undefined : void 0;
      const globalHistory = window.history;
      const canGoWithoutReload = supportsGoWithoutReloadUsingHash();
      const _props = props;
      const _props$getUserConfirm = _props.getUserConfirmation;
      const getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm;
      const _props$hashType = _props.hashType;
      const hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
      const basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
      const _HashPathCoders$hashT = HashPathCoders[hashType];
      const { encodePath } = _HashPathCoders$hashT;
      const { decodePath } = _HashPathCoders$hashT;

      function getDOMLocation() {
        let path = decodePath(getHashPath());
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!basename || hasBasename(path, basename), `${'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "'}${path}" to begin with "${basename}".`) : undefined;
        if (basename) path = stripBasename(path, basename);
        return createLocation(path);
      }

      const transitionManager = createTransitionManager();

      function setState(nextState) {
        Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)(history, nextState);

        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      let forceNextPop = false;
      let ignorePath = null;

      function locationsAreEqual$$1(a, b) {
        return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
      }

      function handleHashChange() {
        const path = getHashPath();
        const encodedPath = encodePath(path);

        if (path !== encodedPath) {
          // Ensure we always have a properly-encoded hash.
          replaceHashPath(encodedPath);
        } else {
          const location = getDOMLocation();
          const prevLocation = history.location;
          if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

          if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

          ignorePath = null;
          handlePop(location);
        }
      }

      function handlePop(location) {
        if (forceNextPop) {
          forceNextPop = false;
          setState();
        } else {
          const action = 'POP';
          transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
            if (ok) {
              setState({
                action,
                location,
              });
            } else {
              revertPop(location);
            }
          });
        }
      }

      function revertPop(fromLocation) {
        const toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of paths we've seen in sessionStorage.
        // Instead, we just default to 0 for paths we don't know.

        let toIndex = allPaths.lastIndexOf(createPath(toLocation));
        if (toIndex === -1) toIndex = 0;
        let fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
        if (fromIndex === -1) fromIndex = 0;
        const delta = toIndex - fromIndex;

        if (delta) {
          forceNextPop = true;
          go(delta);
        }
      } // Ensure the hash is encoded properly before doing anything else.

      const path = getHashPath();
      const encodedPath = encodePath(path);
      if (path !== encodedPath) replaceHashPath(encodedPath);
      const initialLocation = getDOMLocation();
      var allPaths = [createPath(initialLocation)]; // Public interface

      function createHref(location) {
        const baseTag = document.querySelector('base');
        let href = '';

        if (baseTag && baseTag.getAttribute('href')) {
          href = stripHash(window.location.href);
        }

        return `${href}#${encodePath(basename + createPath(location))}`;
      }

      function push(path, state) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(state === undefined, 'Hash history cannot push state; it is ignored') : undefined;
        const action = 'PUSH';
        const location = createLocation(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
          if (!ok) return;
          const path = createPath(location);
          const encodedPath = encodePath(basename + path);
          const hashChanged = getHashPath() !== encodedPath;

          if (hashChanged) {
            // We cannot tell if a hashchange was caused by a PUSH, so we'd
            // rather setState here and ignore the hashchange. The caveat here
            // is that other hash histories in the page will consider it a POP.
            ignorePath = path;
            pushHashPath(encodedPath);
            const prevIndex = allPaths.lastIndexOf(createPath(history.location));
            const nextPaths = allPaths.slice(0, prevIndex + 1);
            nextPaths.push(path);
            allPaths = nextPaths;
            setState({
              action,
              location,
            });
          } else {
            true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : undefined;
            setState();
          }
        });
      }

      function replace(path, state) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : undefined;
        const action = 'REPLACE';
        const location = createLocation(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
          if (!ok) return;
          const path = createPath(location);
          const encodedPath = encodePath(basename + path);
          const hashChanged = getHashPath() !== encodedPath;

          if (hashChanged) {
            // We cannot tell if a hashchange was caused by a REPLACE, so we'd
            // rather setState here and ignore the hashchange. The caveat here
            // is that other hash histories in the page will consider it a POP.
            ignorePath = path;
            replaceHashPath(encodedPath);
          }

          const prevIndex = allPaths.indexOf(createPath(history.location));
          if (prevIndex !== -1) allPaths[prevIndex] = path;
          setState({
            action,
            location,
          });
        });
      }

      function go(n) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;
        globalHistory.go(n);
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      let listenerCount = 0;

      function checkDOMListeners(delta) {
        listenerCount += delta;

        if (listenerCount === 1 && delta === 1) {
          window.addEventListener(HashChangeEvent$1, handleHashChange);
        } else if (listenerCount === 0) {
          window.removeEventListener(HashChangeEvent$1, handleHashChange);
        }
      }

      let isBlocked = false;

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        const unblock = transitionManager.setPrompt(prompt);

        if (!isBlocked) {
          checkDOMListeners(1);
          isBlocked = true;
        }

        return function () {
          if (isBlocked) {
            isBlocked = false;
            checkDOMListeners(-1);
          }

          return unblock();
        };
      }

      function listen(listener) {
        const unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
          checkDOMListeners(-1);
          unlisten();
        };
      }

      var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref,
        push,
        replace,
        go,
        goBack,
        goForward,
        block,
        listen,
      };
      return history;
    }

    function clamp(n, lowerBound, upperBound) {
      return Math.min(Math.max(n, lowerBound), upperBound);
    }
    /**
 * Creates a history object that stores locations in memory.
 */

    function createMemoryHistory(props) {
      if (props === void 0) {
        props = {};
      }

      const _props = props;
      const { getUserConfirmation } = _props;
      const _props$initialEntries = _props.initialEntries;
      const initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries;
      const _props$initialIndex = _props.initialIndex;
      const initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex;
      const _props$keyLength = _props.keyLength;
      const keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
      const transitionManager = createTransitionManager();

      function setState(nextState) {
        Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)(history, nextState);

        history.length = history.entries.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
      }

      const index = clamp(initialIndex, 0, initialEntries.length - 1);
      const entries = initialEntries.map(entry => (typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey()))); // Public interface

      const createHref = createPath;

      function push(path, state) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
        const action = 'PUSH';
        const location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
          if (!ok) return;
          const prevIndex = history.index;
          const nextIndex = prevIndex + 1;
          const nextEntries = history.entries.slice(0);

          if (nextEntries.length > nextIndex) {
            nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
          } else {
            nextEntries.push(location);
          }

          setState({
            action,
            location,
            index: nextIndex,
            entries: nextEntries,
          });
        });
      }

      function replace(path, state) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
        const action = 'REPLACE';
        const location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
          if (!ok) return;
          history.entries[history.index] = location;
          setState({
            action,
            location,
          });
        });
      }

      function go(n) {
        const nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
        const action = 'POP';
        const location = history.entries[nextIndex];
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, ok => {
          if (ok) {
            setState({
              action,
              location,
              index: nextIndex,
            });
          } else {
            // Mimic the behavior of DOM histories by
            // causing a render after a cancelled POP.
            setState();
          }
        });
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      function canGo(n) {
        const nextIndex = history.index + n;
        return nextIndex >= 0 && nextIndex < history.entries.length;
      }

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        return transitionManager.setPrompt(prompt);
      }

      function listen(listener) {
        return transitionManager.appendListener(listener);
      }

      var history = {
        length: entries.length,
        action: 'POP',
        location: entries[index],
        index,
        entries,
        createHref,
        push,
        replace,
        go,
        goBack,
        goForward,
        canGo,
        block,
        listen,
      };
      return history;
    }
    /***/ }),

  /***/ './node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js':
  /*! **********************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \********************************************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const reactIs = __webpack_require__(/*! react-is */ './node_modules/react-is/index.js');
    /**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

    const REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true,
    };
    const KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true,
    };
    const FORWARD_REF_STATICS = {
      $$typeof: true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
    };
    const MEMO_STATICS = {
      $$typeof: true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true,
    };
    const TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

    function getStatics(component) {
      // React v16.11 and below
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      } // React v16.12 and above

      return TYPE_STATICS[component.$$typeof] || REACT_STATICS;
    }

    const { defineProperty } = Object;
    const { getOwnPropertyNames } = Object;
    const { getOwnPropertySymbols } = Object;
    const { getOwnPropertyDescriptor } = Object;
    const { getPrototypeOf } = Object;
    const objectPrototype = Object.prototype;

    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
          const inheritedComponent = getPrototypeOf(sourceComponent);

          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }

        let keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        const targetStatics = getStatics(targetComponent);
        const sourceStatics = getStatics(sourceComponent);

        for (let i = 0; i < keys.length; ++i) {
          const key = keys[i];

          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            const descriptor = getOwnPropertyDescriptor(sourceComponent, key);

            try {
              // Avoid failures from read-only properties
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {}
          }
        }
      }

      return targetComponent;
    }

    module.exports = hoistNonReactStatics;
    /***/ }),

  /***/ './node_modules/mini-create-react-context/dist/esm/index.js':
  /*! ******************************************************************!*\
  !*** ./node_modules/mini-create-react-context/dist/esm/index.js ***!
  \***************************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* WEBPACK VAR INJECTION */(function (global) {
      /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
      /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
      /* harmony import */ const _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ './node_modules/@babel/runtime/helpers/esm/inheritsLoose.js');
      /* harmony import */ const prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ './node_modules/prop-types/index.js');
      /* harmony import */ const prop_types__WEBPACK_IMPORTED_MODULE_2___default = /* #__PURE__ */__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */ const tiny_warning__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tiny-warning */ './node_modules/tiny-warning/dist/tiny-warning.esm.js');

      const MAX_SIGNED_31_BIT_INT = 1073741823;
      const commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};

      function getUniqueId() {
        const key = '__global_unique_id__';
        return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
      }

      function objectIs(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        }
        return x !== x && y !== y;
      }

      function createEventEmitter(value) {
        let handlers = [];
        return {
          on: function on(handler) {
            handlers.push(handler);
          },
          off: function off(handler) {
            handlers = handlers.filter(h => h !== handler);
          },
          get: function get() {
            return value;
          },
          set: function set(newValue, changedBits) {
            value = newValue;
            handlers.forEach(handler => handler(value, changedBits));
          },
        };
      }

      function onlyChild(children) {
        return Array.isArray(children) ? children[0] : children;
      }

      function createReactContext(defaultValue, calculateChangedBits) {
        let _Provider$childContex; let
          _Consumer$contextType;

        const contextProp = `__create-react-context-${getUniqueId()}__`;

        const Provider = /* #__PURE__ */(function (_Component) {
          Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__.default)(Provider, _Component);

          function Provider() {
            let _this;

            _this = _Component.apply(this, arguments) || this;
            _this.emitter = createEventEmitter(_this.props.value);
            return _this;
          }

          const _proto = Provider.prototype;

          _proto.getChildContext = function getChildContext() {
            let _ref;

            return _ref = {}, _ref[contextProp] = this.emitter, _ref;
          };

          _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            if (this.props.value !== nextProps.value) {
              const oldValue = this.props.value;
              const newValue = nextProps.value;
              let changedBits;

              if (objectIs(oldValue, newValue)) {
                changedBits = 0;
              } else {
                changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

                if (true) {
                  Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, `${'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: '}${changedBits}`);
                }

                changedBits |= 0;

                if (changedBits !== 0) {
                  this.emitter.set(nextProps.value, changedBits);
                }
              }
            }
          };

          _proto.render = function render() {
            return this.props.children;
          };

          return Provider;
        }(react__WEBPACK_IMPORTED_MODULE_0__.Component));

        Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object.isRequired, _Provider$childContex);

        const Consumer = /* #__PURE__ */(function (_Component2) {
          Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__.default)(Consumer, _Component2);

          function Consumer() {
            let _this2;

            _this2 = _Component2.apply(this, arguments) || this;
            _this2.state = {
              value: _this2.getValue(),
            };

            _this2.onUpdate = function (newValue, changedBits) {
              const observedBits = _this2.observedBits | 0;

              if ((observedBits & changedBits) !== 0) {
                _this2.setState({
                  value: _this2.getValue(),
                });
              }
            };

            return _this2;
          }

          const _proto2 = Consumer.prototype;

          _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            const { observedBits } = nextProps;
            this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
          };

          _proto2.componentDidMount = function componentDidMount() {
            if (this.context[contextProp]) {
              this.context[contextProp].on(this.onUpdate);
            }

            const { observedBits } = this.props;
            this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
          };

          _proto2.componentWillUnmount = function componentWillUnmount() {
            if (this.context[contextProp]) {
              this.context[contextProp].off(this.onUpdate);
            }
          };

          _proto2.getValue = function getValue() {
            if (this.context[contextProp]) {
              return this.context[contextProp].get();
            }
            return defaultValue;
          };

          _proto2.render = function render() {
            return onlyChild(this.props.children)(this.state.value);
          };

          return Consumer;
        }(react__WEBPACK_IMPORTED_MODULE_0__.Component));

        Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object, _Consumer$contextType);
        return {
          Provider,
          Consumer,
        };
      }

      const index = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext || createReactContext;
      /* harmony default export */ __webpack_exports__.default = (index);
      /* WEBPACK VAR INJECTION */ }.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ './node_modules/webpack/buildin/global.js')));
    /***/ }),

  /***/ './node_modules/node-libs-browser/node_modules/punycode/punycode.js':
  /*! **************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \************************************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function (module, global) {
      let __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */

      (function (root) {
        /** Detect free variables */
        const freeExports = true && exports && !exports.nodeType && exports;
        const freeModule = true && module && !module.nodeType && module;
        const freeGlobal = typeof global === 'object' && global;

        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
          root = freeGlobal;
        }
        /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */

        let punycode;

        /** Highest positive signed 32-bit float value */
        const maxInt = 2147483647;
        // aka. 0x7FFFFFFF or 2^31-1

        /** Bootstring parameters */
        const base = 36;
        const tMin = 1;
        const tMax = 26;
        const skew = 38;
        const damp = 700;
        const initialBias = 72;
        const initialN = 128;
        // 0x80
        const delimiter = '-';
        // '\x2D'

        /** Regular expressions */
        const regexPunycode = /^xn--/;
        const regexNonASCII = /[^\x20-\x7E]/;
        // unprintable ASCII chars + non-ASCII chars
        const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
        // RFC 3490 separators

        /** Error messages */
        const errors = {
          overflow: 'Overflow: input needs wider integers to process',
          'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
          'invalid-input': 'Invalid input',
        };

        /** Convenience shortcuts */
        const baseMinusTMin = base - tMin;
        const { floor } = Math;
        const stringFromCharCode = String.fromCharCode;

        /** Temporary variable */
        let key;
        /*--------------------------------------------------------------------------*/

        /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

        function error(type) {
          throw new RangeError(errors[type]);
        }
        /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */

        function map(array, fn) {
          let { length } = array;
          const result = [];

          while (length--) {
            result[length] = fn(array[length]);
          }

          return result;
        }
        /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */

        function mapDomain(string, fn) {
          const parts = string.split('@');
          let result = '';

          if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = `${parts[0]}@`;
            string = parts[1];
          } // Avoid `split(regex)` for IE8 compatibility. See #17.

          string = string.replace(regexSeparators, '\x2E');
          const labels = string.split('.');
          const encoded = map(labels, fn).join('.');
          return result + encoded;
        }
        /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */

        function ucs2decode(string) {
          const output = [];
          let counter = 0;
          const { length } = string;
          let value;
          let extra;

          while (counter < length) {
            value = string.charCodeAt(counter++);

            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
              // high surrogate, and there is a next character
              extra = string.charCodeAt(counter++);

              if ((extra & 0xFC00) == 0xDC00) {
                // low surrogate
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
              } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }

          return output;
        }
        /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */

        function ucs2encode(array) {
          return map(array, value => {
            let output = '';

            if (value > 0xFFFF) {
              value -= 0x10000;
              output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
              value = 0xDC00 | value & 0x3FF;
            }

            output += stringFromCharCode(value);
            return output;
          }).join('');
        }
        /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */

        function basicToDigit(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }

          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }

          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }

          return base;
        }
        /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */

        function digitToBasic(digit, flag) {
          //  0..25 map to ASCII a..z or A..Z
          // 26..35 map to ASCII 0..9
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }
        /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */

        function adapt(delta, numPoints, firstTime) {
          let k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);

          for (;
          /* no initialization */
            delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }

          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        }
        /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */

        function decode(input) {
          // Don't use UCS-2
          const output = [];
          const inputLength = input.length;
          let out;
          let i = 0;
          let n = initialN;
          let bias = initialBias;
          let basic;
          let j;
          let index;
          let oldi;
          let w;
          let k;
          let digit;
          let t;

          /** Cached calculation results */
          let baseMinusT; // Handle the basic code points: let `basic` be the number of input code
          // points before the last delimiter, or `0` if there is none, then copy
          // the first basic code points to the output.

          basic = input.lastIndexOf(delimiter);

          if (basic < 0) {
            basic = 0;
          }

          for (j = 0; j < basic; ++j) {
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) {
              error('not-basic');
            }

            output.push(input.charCodeAt(j));
          } // Main decoding loop: start just after the last delimiter if any basic code
          // points were copied; start at the beginning otherwise.

          for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
          /* no final expression */
          {
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for (oldi = i, w = 1, k = base; ;
            /* no condition */
              k += base) {
              if (index >= inputLength) {
                error('invalid-input');
              }

              digit = basicToDigit(input.charCodeAt(index++));

              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error('overflow');
              }

              i += digit * w;
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

              if (digit < t) {
                break;
              }

              baseMinusT = base - t;

              if (w > floor(maxInt / baseMinusT)) {
                error('overflow');
              }

              w *= baseMinusT;
            }

            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:

            if (floor(i / out) > maxInt - n) {
              error('overflow');
            }

            n += floor(i / out);
            i %= out; // Insert `n` at position `i` of the output

            output.splice(i++, 0, n);
          }

          return ucs2encode(output);
        }
        /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */

        function encode(input) {
          let n;
          let delta;
          let handledCPCount;
          let basicLength;
          let bias;
          let j;
          let m;
          let q;
          let k;
          let t;
          let currentValue;
          const output = [];

          /** `inputLength` will hold the number of code points in `input`. */
          let inputLength;

          /** Cached calculation results */
          let handledCPCountPlusOne;
          let baseMinusT;
          let qMinusT; // Convert the input in UCS-2 to Unicode

          input = ucs2decode(input); // Cache the length

          inputLength = input.length; // Initialize the state

          n = initialN;
          delta = 0;
          bias = initialBias; // Handle the basic code points

          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];

            if (currentValue < 0x80) {
              output.push(stringFromCharCode(currentValue));
            }
          }

          handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
          // `basicLength` is the number of basic code points.
          // Finish the basic string - if it is not empty - with a delimiter

          if (basicLength) {
            output.push(delimiter);
          } // Main encoding loop:

          while (handledCPCount < inputLength) {
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for (m = maxInt, j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow

            handledCPCountPlusOne = handledCPCount + 1;

            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error('overflow');
            }

            delta += (m - n) * handledCPCountPlusOne;
            n = m;

            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue < n && ++delta > maxInt) {
                error('overflow');
              }

              if (currentValue == n) {
                // Represent delta as a generalized variable-length integer
                for (q = delta, k = base; ;
                /* no condition */
                  k += base) {
                  t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                  if (q < t) {
                    break;
                  }

                  qMinusT = q - t;
                  baseMinusT = base - t;
                  output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                  q = floor(qMinusT / baseMinusT);
                }

                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }

            ++delta;
            ++n;
          }

          return output.join('');
        }
        /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */

        function toUnicode(input) {
          return mapDomain(input, string => (regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string));
        }
        /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */

        function toASCII(input) {
          return mapDomain(input, string => (regexNonASCII.test(string) ? `xn--${encode(string)}` : string));
        }
        /*--------------------------------------------------------------------------*/

        /** Define the public API */

        punycode = {
          /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
          version: '1.4.1',

          /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
          ucs2: {
            decode: ucs2decode,
            encode: ucs2encode,
          },
          decode,
          encode,
          toASCII,
          toUnicode,
        };
        /** Expose `punycode` */
        // Some AMD build optimizers, like r.js, check for specific condition patterns
        // like the following:

        if (true) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return punycode;
          }).call(exports, __webpack_require__, exports, module),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
      }(this));
      /* WEBPACK VAR INJECTION */ }.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ './node_modules/webpack/buildin/module.js')(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ './node_modules/webpack/buildin/global.js')));
    /***/ }),

  /***/ './node_modules/object-assign/index.js':
  /*! *********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \******************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

    /* eslint-disable no-unused-vars */

    const { getOwnPropertySymbols } = Object;
    const { hasOwnProperty } = Object.prototype;
    const propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
      }

      return Object(val);
    }

    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        } // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118

        const test1 = new String('abc'); // eslint-disable-line no-new-wrappers

        test1[5] = 'de';

        if (Object.getOwnPropertyNames(test1)[0] === '5') {
          return false;
        } // https://bugs.chromium.org/p/v8/issues/detail?id=3056

        const test2 = {};

        for (let i = 0; i < 10; i++) {
          test2[`_${String.fromCharCode(i)}`] = i;
        }

        const order2 = Object.getOwnPropertyNames(test2).map(n => test2[n]);

        if (order2.join('') !== '0123456789') {
          return false;
        } // https://bugs.chromium.org/p/v8/issues/detail?id=3056

        const test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(letter => {
          test3[letter] = letter;
        });

        if (Object.keys({ ...test3 }).join('') !== 'abcdefghijklmnopqrst') {
          return false;
        }

        return true;
      } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
      }
    }

    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
      let from;
      const to = toObject(target);
      let symbols;

      for (let s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);

        for (const key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }

        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);

          for (let i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }

      return to;
    };
    /***/ }),

  /***/ './node_modules/process/browser.js':
  /*! *****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \**************************************** */
  /*! no static exports found */
  /***/ (function (module, exports) {
    // shim for using process in browser
    const process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    let cachedSetTimeout;
    let cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }

    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }

    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }

      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    }());

    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        // normal enviroments in sane situations
        return setTimeout(fun, 0);
      } // if setTimeout wasn't available but was latter defined

      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }

    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        // normal enviroments in sane situations
        return clearTimeout(marker);
      } // if clearTimeout wasn't available but was latter defined

      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }
    }

    let queue = [];
    let draining = false;
    let currentQueue;
    let queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }

      draining = false;

      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }

      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }

      const timeout = runTimeout(cleanUpNextTick);
      draining = true;
      let len = queue.length;

      while (len) {
        currentQueue = queue;
        queue = [];

        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }

        queueIndex = -1;
        len = queue.length;
      }

      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      const args = new Array(arguments.length - 1);

      if (arguments.length > 1) {
        for (let i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }

      queue.push(new Item(fun, args));

      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    }; // v8 likes predictible objects

    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }

    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };

    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues

    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) {
      return [];
    };

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
      return '/';
    };

    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };

    process.umask = function () {
      return 0;
    };
    /***/ }),

  /***/ './node_modules/prop-types/checkPropTypes.js':
  /*! ***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    let printWarning = function () {};

    if (true) {
      var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ './node_modules/prop-types/lib/ReactPropTypesSecret.js');

      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);

      printWarning = function (text) {
        const message = `Warning: ${text}`;

        if (typeof console !== 'undefined') {
          console.error(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }
    /**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */

    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (const typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.

            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                const err = Error(`${componentName || 'React class'}: ${location} type \`${typeSpecName}\` is invalid; ` + `it must be a function, usually from the \`prop-types\` package, but received \`${typeof typeSpecs[typeSpecName]}\`.`);
                err.name = 'Invariant Violation';
                throw err;
              }

              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }

            if (error && !(error instanceof Error)) {
              printWarning(`${componentName || 'React class'}: type specification of ${location} \`${typeSpecName}\` is invalid; the type checker ` + `function must return \`null\` or an \`Error\` but returned a ${typeof error}. ` + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
            }

            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;
              const stack = getStack ? getStack() : '';
              printWarning(`Failed ${location} type: ${error.message}${stack != null ? stack : ''}`);
            }
          }
        }
      }
    }
    /**
 * Resets warning cache when testing.
 *
 * @private
 */

    checkPropTypes.resetWarningCache = function () {
      if (true) {
        loggedTypeFailures = {};
      }
    };

    module.exports = checkPropTypes;
    /***/ }),

  /***/ './node_modules/prop-types/factoryWithTypeCheckers.js':
  /*! ************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \*********************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    const ReactIs = __webpack_require__(/*! react-is */ './node_modules/react-is/index.js');

    const assign = __webpack_require__(/*! object-assign */ './node_modules/object-assign/index.js');

    const ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ './node_modules/prop-types/lib/ReactPropTypesSecret.js');

    const checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ './node_modules/prop-types/checkPropTypes.js');

    const has = Function.call.bind(Object.prototype.hasOwnProperty);

    let printWarning = function () {};

    if (true) {
      printWarning = function (text) {
        const message = `Warning: ${text}`;

        if (typeof console !== 'undefined') {
          console.error(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    function emptyFunctionThatReturnsNull() {
      return null;
    }

    module.exports = function (isValidElement, throwOnDirectAccess) {
      /* global Symbol */
      const ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      const FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

      /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

      function getIteratorFn(maybeIterable) {
        const iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }
      /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

      const ANONYMOUS = '<<anonymous>>'; // Important!
      // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

      const ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker,
      };
      /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

      /* eslint-disable no-self-compare */

      function is(x, y) {
        // SameValue algorithm
        if (x === y) {
          // Steps 1-5, 7-10
          // Steps 6.b-6.e: +0 != -0
          return x !== 0 || 1 / x === 1 / y;
        }
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
      /* eslint-enable no-self-compare */

      /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */

      function PropTypeError(message) {
        this.message = message;
        this.stack = '';
      } // Make `instanceof Error` still work for returned errors.

      PropTypeError.prototype = Error.prototype;

      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }

        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;

          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              // New behavior only for users of `prop-types` package
              const err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
              err.name = 'Invariant Violation';
              throw err;
            } else if (true && typeof console !== 'undefined') {
              // Old behavior for people using React.PropTypes
              const cacheKey = `${componentName}:${propName}`;

              if (!manualPropTypeCallCache[cacheKey] // Avoid spamming the console because they are often not actionable except for lib authors
          && manualPropTypeWarningCount < 3) {
                printWarning(`${'You are manually calling a React.PropTypes validation ' + 'function for the `'}${propFullName}\` prop on \`${componentName}\`. This is deprecated ` + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }

          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError(`The ${location} \`${propFullName}\` is marked as required ` + `in \`${componentName}\`, but its value is \`null\`.`);
              }

              return new PropTypeError(`The ${location} \`${propFullName}\` is marked as required in ` + `\`${componentName}\`, but its value is \`undefined\`.`);
            }

            return null;
          }
          return validate(props, propName, componentName, location, propFullName);
        }

        const chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }

      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          const propValue = props[propName];
          const propType = getPropType(propValue);

          if (propType !== expectedType) {
            // `propValue` being instance of, say, date/regexp, pass the 'object'
            // check, but we can offer a more precise error message here rather than
            // 'of type `object`'.
            const preciseType = getPreciseType(propValue);
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` of type ` + `\`${preciseType}\` supplied to \`${componentName}\`, expected ` + `\`${expectedType}\`.`);
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }

      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError(`Property \`${propFullName}\` of component \`${componentName}\` has invalid PropType notation inside arrayOf.`);
          }

          const propValue = props[propName];

          if (!Array.isArray(propValue)) {
            const propType = getPropType(propValue);
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` of type ` + `\`${propType}\` supplied to \`${componentName}\`, expected an array.`);
          }

          for (let i = 0; i < propValue.length; i++) {
            const error = typeChecker(propValue, i, componentName, location, `${propFullName}[${i}]`, ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          const propValue = props[propName];

          if (!isValidElement(propValue)) {
            const propType = getPropType(propValue);
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` of type ` + `\`${propType}\` supplied to \`${componentName}\`, expected a single ReactElement.`);
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          const propValue = props[propName];

          if (!ReactIs.isValidElementType(propValue)) {
            const propType = getPropType(propValue);
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` of type ` + `\`${propType}\` supplied to \`${componentName}\`, expected a single ReactElement type.`);
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            const expectedClassName = expectedClass.name || ANONYMOUS;
            const actualClassName = getClassName(props[propName]);
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` of type ` + `\`${actualClassName}\` supplied to \`${componentName}\`, expected ` + `instance of \`${expectedClassName}\`.`);
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(`Invalid arguments supplied to oneOf, expected an array, got ${arguments.length} arguments. ` + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
            } else {
              printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
          }

          return emptyFunctionThatReturnsNull;
        }

        function validate(props, propName, componentName, location, propFullName) {
          const propValue = props[propName];

          for (let i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }

          const valuesString = JSON.stringify(expectedValues, (key, value) => {
            const type = getPreciseType(value);

            if (type === 'symbol') {
              return String(value);
            }

            return value;
          });
          return new PropTypeError(`Invalid ${location} \`${propFullName}\` of value \`${String(propValue)}\` ` + `supplied to \`${componentName}\`, expected one of ${valuesString}.`);
        }

        return createChainableTypeChecker(validate);
      }

      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError(`Property \`${propFullName}\` of component \`${componentName}\` has invalid PropType notation inside objectOf.`);
          }

          const propValue = props[propName];
          const propType = getPropType(propValue);

          if (propType !== 'object') {
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` of type ` + `\`${propType}\` supplied to \`${componentName}\`, expected an object.`);
          }

          for (const key in propValue) {
            if (has(propValue, key)) {
              const error = typeChecker(propValue, key, componentName, location, `${propFullName}.${key}`, ReactPropTypesSecret);

              if (error instanceof Error) {
                return error;
              }
            }
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
          return emptyFunctionThatReturnsNull;
        }

        for (let i = 0; i < arrayOfTypeCheckers.length; i++) {
          const checker = arrayOfTypeCheckers[i];

          if (typeof checker !== 'function') {
            printWarning(`${'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received '}${getPostfixForTypeWarning(checker)} at index ${i}.`);
            return emptyFunctionThatReturnsNull;
          }
        }

        function validate(props, propName, componentName, location, propFullName) {
          for (let i = 0; i < arrayOfTypeCheckers.length; i++) {
            const checker = arrayOfTypeCheckers[i];

            if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }

          return new PropTypeError(`Invalid ${location} \`${propFullName}\` supplied to ` + `\`${componentName}\`.`);
        }

        return createChainableTypeChecker(validate);
      }

      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` supplied to ` + `\`${componentName}\`, expected a ReactNode.`);
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          const propValue = props[propName];
          const propType = getPropType(propValue);

          if (propType !== 'object') {
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` of type \`${propType}\` ` + `supplied to \`${componentName}\`, expected \`object\`.`);
          }

          for (const key in shapeTypes) {
            const checker = shapeTypes[key];

            if (!checker) {
              continue;
            }

            const error = checker(propValue, key, componentName, location, `${propFullName}.${key}`, ReactPropTypesSecret);

            if (error) {
              return error;
            }
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          const propValue = props[propName];
          const propType = getPropType(propValue);

          if (propType !== 'object') {
            return new PropTypeError(`Invalid ${location} \`${propFullName}\` of type \`${propType}\` ` + `supplied to \`${componentName}\`, expected \`object\`.`);
          } // We need to check all keys in case some are required but missing from
          // props.

          const allKeys = assign({}, props[propName], shapeTypes);

          for (const key in allKeys) {
            const checker = shapeTypes[key];

            if (!checker) {
              return new PropTypeError(`Invalid ${location} \`${propFullName}\` key \`${key}\` supplied to \`${componentName}\`.` + `\nBad object: ${JSON.stringify(props[propName], null, '  ')}\nValid keys: ${JSON.stringify(Object.keys(shapeTypes), null, '  ')}`);
            }

            const error = checker(propValue, key, componentName, location, `${propFullName}.${key}`, ReactPropTypesSecret);

            if (error) {
              return error;
            }
          }

          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function isNode(propValue) {
        switch (typeof propValue) {
          case 'number':
          case 'string':
          case 'undefined':
            return true;

          case 'boolean':
            return !propValue;

          case 'object':
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }

            if (propValue === null || isValidElement(propValue)) {
              return true;
            }

            var iteratorFn = getIteratorFn(propValue);

            if (iteratorFn) {
              const iterator = iteratorFn.call(propValue);
              let step;

              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                // Iterator will provide entry [k,v] tuples rather than values.
                while (!(step = iterator.next()).done) {
                  const entry = step.value;

                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }

            return true;

          default:
            return false;
        }
      }

      function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
          return true;
        } // falsy value can't be a Symbol

        if (!propValue) {
          return false;
        } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'

        if (propValue['@@toStringTag'] === 'Symbol') {
          return true;
        } // Fallback for non-spec compliant Symbols which are polyfilled.

        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
          return true;
        }

        return false;
      } // Equivalent of `typeof` but with special handling for array and regexp.

      function getPropType(propValue) {
        const propType = typeof propValue;

        if (Array.isArray(propValue)) {
          return 'array';
        }

        if (propValue instanceof RegExp) {
          // Old webkits (at least until Android 4.0) return 'function' rather than
          // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
          // passes PropTypes.object.
          return 'object';
        }

        if (isSymbol(propType, propValue)) {
          return 'symbol';
        }

        return propType;
      } // This handles more types than `getPropType`. Only used for error messages.
      // See `createPrimitiveTypeChecker`.

      function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
          return `${propValue}`;
        }

        const propType = getPropType(propValue);

        if (propType === 'object') {
          if (propValue instanceof Date) {
            return 'date';
          } if (propValue instanceof RegExp) {
            return 'regexp';
          }
        }

        return propType;
      } // Returns a string that is postfixed to a warning about an invalid type.
      // For example, "undefined" or "of type array"

      function getPostfixForTypeWarning(value) {
        const type = getPreciseType(value);

        switch (type) {
          case 'array':
          case 'object':
            return `an ${type}`;

          case 'boolean':
          case 'date':
          case 'regexp':
            return `a ${type}`;

          default:
            return type;
        }
      } // Returns class name of the object, if any.

      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }

        return propValue.constructor.name;
      }

      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    /***/ }),

  /***/ './node_modules/prop-types/index.js':
  /*! ******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \***************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    if (true) {
      const ReactIs = __webpack_require__(/*! react-is */ './node_modules/react-is/index.js'); // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod

      const throwOnDirectAccess = true;
      module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ './node_modules/prop-types/factoryWithTypeCheckers.js')(ReactIs.isElement, throwOnDirectAccess);
    } else {}
    /***/ }),

  /***/ './node_modules/prop-types/lib/ReactPropTypesSecret.js':
  /*! *************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \************************************************************ */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    const ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    module.exports = ReactPropTypesSecret;
    /***/ }),

  /***/ './node_modules/querystring-es3/decode.js':
  /*! ************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \*********************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    module.exports = function (qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      const obj = {};

      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }

      const regexp = /\+/g;
      qs = qs.split(sep);
      let maxKeys = 1000;

      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }

      let len = qs.length; // maxKeys <= 0 means that we should not limit keys count

      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }

      for (let i = 0; i < len; ++i) {
        const x = qs[i].replace(regexp, '%20');
        const idx = x.indexOf(eq);
        var kstr;
        var vstr;
        var k;
        var v;

        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }

        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);

        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }

      return obj;
    };

    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
    /***/ }),

  /***/ './node_modules/querystring-es3/encode.js':
  /*! ************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \*********************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    const stringifyPrimitive = function (v) {
      switch (typeof v) {
        case 'string':
          return v;

        case 'boolean':
          return v ? 'true' : 'false';

        case 'number':
          return isFinite(v) ? v : '';

        default:
          return '';
      }
    };

    module.exports = function (obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';

      if (obj === null) {
        obj = undefined;
      }

      if (typeof obj === 'object') {
        return map(objectKeys(obj), k => {
          const ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

          if (isArray(obj[k])) {
            return map(obj[k], v => ks + encodeURIComponent(stringifyPrimitive(v))).join(sep);
          }
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }).join(sep);
      }

      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };

    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };

    function map(xs, f) {
      if (xs.map) return xs.map(f);
      const res = [];

      for (let i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }

      return res;
    }

    var objectKeys = Object.keys || function (obj) {
      const res = [];

      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }

      return res;
    };
    /***/ }),

  /***/ './node_modules/querystring-es3/index.js':
  /*! ***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \********************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    exports.decode = exports.parse = __webpack_require__(/*! ./decode */ './node_modules/querystring-es3/decode.js');
    exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ './node_modules/querystring-es3/encode.js');
    /***/ }),

  /***/ './node_modules/react-dev-utils/formatWebpackMessages.js':
  /*! ***************************************************************!*\
  !*** ./node_modules/react-dev-utils/formatWebpackMessages.js ***!
  \************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    const chalk = __webpack_require__(/*! chalk */ './node_modules/react-dev-utils/node_modules/chalk/index.js');

    const friendlySyntaxErrorLabel = 'Syntax error:';

    function isLikelyASyntaxError(message) {
      return message.indexOf(friendlySyntaxErrorLabel) !== -1;
    } // Cleans up webpack error messages.

    function formatMessage(message) {
      let lines = message.split('\n'); // Strip webpack-added headers off errors/warnings
      // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js

      lines = lines.filter(line => !/Module [A-z ]+\(from/.test(line)); // Transform parsing error into syntax error
      // TODO: move this to our ESLint formatter?

      lines = lines.map(line => {
        const parsingError = /Line (\d+):(?:(\d+):)?\s*Parsing error: (.+)$/.exec(line);

        if (!parsingError) {
          return line;
        }

        const [, errorLine, errorColumn, errorMessage] = parsingError;
        return `${friendlySyntaxErrorLabel} ${errorMessage} (${errorLine}:${errorColumn})`;
      });
      message = lines.join('\n'); // Smoosh syntax errors (commonly found in CSS)

      message = message.replace(/SyntaxError\s+\((\d+):(\d+)\)\s*(.+?)\n/g, `${friendlySyntaxErrorLabel} $3 ($1:$2)\n`); // Clean up export errors

      message = message.replace(/^.*export '(.+?)' was not found in '(.+?)'.*$/gm, 'Attempted import error: \'$1\' is not exported from \'$2\'.');
      message = message.replace(/^.*export 'default' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm, 'Attempted import error: \'$2\' does not contain a default export (imported as \'$1\').');
      message = message.replace(/^.*export '(.+?)' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm, 'Attempted import error: \'$1\' is not exported from \'$3\' (imported as \'$2\').');
      lines = message.split('\n'); // Remove leading newline

      if (lines.length > 2 && lines[1].trim() === '') {
        lines.splice(1, 1);
      } // Clean up file name

      lines[0] = lines[0].replace(/^(.*) \d+:\d+-\d+$/, '$1'); // Cleans up verbose "module not found" messages for files and packages.

      if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {
        lines = [lines[0], lines[1].replace('Error: ', '').replace('Module not found: Cannot find file:', 'Cannot find file:')];
      } // Add helpful message for users trying to use Sass for the first time

      if (lines[1] && lines[1].match(/Cannot find module.+node-sass/)) {
        lines[1] = 'To import Sass files, you first need to install node-sass.\n';
        lines[1] += 'Run `npm install node-sass` or `yarn add node-sass` inside your workspace.';
      }

      lines[0] = chalk.inverse(lines[0]);
      message = lines.join('\n'); // Internal stacks are generally useless so we strip them... with the
      // exception of stacks containing `webpack:` because they're normally
      // from user code generated by webpack. For more information see
      // https://github.com/facebook/create-react-app/pull/1050

      message = message.replace(/^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm, ''); // at ... ...:x:y

      message = message.replace(/^\s*at\s<anonymous>(\n|$)/gm, ''); // at <anonymous>

      lines = message.split('\n'); // Remove duplicated newlines

      lines = lines.filter((line, index, arr) => index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim()); // Reassemble the message

      message = lines.join('\n');
      return message.trim();
    }

    function formatWebpackMessages(json) {
      const formattedErrors = json.errors.map(formatMessage);
      const formattedWarnings = json.warnings.map(formatMessage);
      const result = {
        errors: formattedErrors,
        warnings: formattedWarnings,
      };

      if (result.errors.some(isLikelyASyntaxError)) {
        // If there are any syntax errors, show just them.
        result.errors = result.errors.filter(isLikelyASyntaxError);
      }

      return result;
    }

    module.exports = formatWebpackMessages;
    /***/ }),

  /***/ './node_modules/react-dev-utils/launchEditorEndpoint.js':
  /*! **************************************************************!*\
  !*** ./node_modules/react-dev-utils/launchEditorEndpoint.js ***!
  \************************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // TODO: we might want to make this injectable to support DEV-time non-root URLs.

    module.exports = '/__open-stack-frame-in-editor';
    /***/ }),

  /***/ './node_modules/react-dev-utils/node_modules/ansi-styles/index.js':
  /*! ************************************************************************!*\
  !*** ./node_modules/react-dev-utils/node_modules/ansi-styles/index.js ***!
  \*********************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function (module) {
      const colorConvert = __webpack_require__(/*! color-convert */ './node_modules/color-convert/index.js');

      const wrapAnsi16 = (fn, offset) => function () {
        const code = fn.apply(colorConvert, arguments);
        return `\u001B[${code + offset}m`;
      };

      const wrapAnsi256 = (fn, offset) => function () {
        const code = fn.apply(colorConvert, arguments);
        return `\u001B[${38 + offset};5;${code}m`;
      };

      const wrapAnsi16m = (fn, offset) => function () {
        const rgb = fn.apply(colorConvert, arguments);
        return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };

      function assembleStyles() {
        const codes = new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            // 21 isn't widely supported and 22 does the same thing
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29],
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            gray: [90, 39],
            // Bright color
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39],
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            // Bright color
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49],
          },
        }; // Fix humans

        styles.color.grey = styles.color.gray;

        for (const groupName of Object.keys(styles)) {
          const group = styles[groupName];

          for (const styleName of Object.keys(group)) {
            const style = group[styleName];
            styles[styleName] = {
              open: `\u001B[${style[0]}m`,
              close: `\u001B[${style[1]}m`,
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }

          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false,
          });
          Object.defineProperty(styles, 'codes', {
            value: codes,
            enumerable: false,
          });
        }

        const ansi2ansi = n => n;

        const rgb2rgb = (r, g, b) => [r, g, b];

        styles.color.close = '\u001B[39m';
        styles.bgColor.close = '\u001B[49m';
        styles.color.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 0),
        };
        styles.color.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 0),
        };
        styles.color.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 0),
        };
        styles.bgColor.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 10),
        };
        styles.bgColor.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 10),
        };
        styles.bgColor.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 10),
        };

        for (let key of Object.keys(colorConvert)) {
          if (typeof colorConvert[key] !== 'object') {
            continue;
          }

          const suite = colorConvert[key];

          if (key === 'ansi16') {
            key = 'ansi';
          }

          if ('ansi16' in suite) {
            styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
            styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
          }

          if ('ansi256' in suite) {
            styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
            styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
          }

          if ('rgb' in suite) {
            styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
            styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
          }
        }

        return styles;
      } // Make the export immutable

      Object.defineProperty(module, 'exports', {
        enumerable: true,
        get: assembleStyles,
      });
      /* WEBPACK VAR INJECTION */ }.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ './node_modules/webpack/buildin/module.js')(module)));
    /***/ }),

  /***/ './node_modules/react-dev-utils/node_modules/chalk/index.js':
  /*! ******************************************************************!*\
  !*** ./node_modules/react-dev-utils/node_modules/chalk/index.js ***!
  \***************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function (process) {
      const escapeStringRegexp = __webpack_require__(/*! escape-string-regexp */ './node_modules/react-dev-utils/node_modules/chalk/node_modules/escape-string-regexp/index.js');

      const ansiStyles = __webpack_require__(/*! ansi-styles */ './node_modules/react-dev-utils/node_modules/ansi-styles/index.js');

      const stdoutColor = __webpack_require__(/*! supports-color */ './node_modules/react-dev-utils/node_modules/supports-color/browser.js').stdout;

      const template = __webpack_require__(/*! ./templates.js */ './node_modules/react-dev-utils/node_modules/chalk/templates.js');

      const isSimpleWindowsTerm = process.platform === 'win32' && !(Object({
        NODE_ENV: 'development', PUBLIC_URL: '', WDS_SOCKET_HOST: undefined, WDS_SOCKET_PATH: undefined, WDS_SOCKET_PORT: undefined, FAST_REFRESH: true,
      }).TERM || '').toLowerCase().startsWith('xterm'); // `supportsColor.level` → `ansiStyles.color[name]` mapping

      const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m']; // `color-convert` models to exclude from the Chalk API due to conflicts and such

      const skipModels = new Set(['gray']);
      const styles = Object.create(null);

      function applyOptions(obj, options) {
        options = options || {}; // Detect level if not set manually

        const scLevel = stdoutColor ? stdoutColor.level : 0;
        obj.level = options.level === undefined ? scLevel : options.level;
        obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;
      }

      function Chalk(options) {
        // We check for this.template here since calling `chalk.constructor()`
        // by itself will have a `this` of a previously constructed chalk object
        if (!this || !(this instanceof Chalk) || this.template) {
          const chalk = {};
          applyOptions(chalk, options);

          chalk.template = function () {
            const args = [].slice.call(arguments);
            return chalkTag.apply(null, [chalk.template].concat(args));
          };

          Object.setPrototypeOf(chalk, Chalk.prototype);
          Object.setPrototypeOf(chalk.template, chalk);
          chalk.template.constructor = Chalk;
          return chalk.template;
        }

        applyOptions(this, options);
      } // Use bright blue on Windows as the normal blue color is illegible

      if (isSimpleWindowsTerm) {
        ansiStyles.blue.open = '\u001B[94m';
      }

      for (const key of Object.keys(ansiStyles)) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
        styles[key] = {
          get() {
            const codes = ansiStyles[key];
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
          },

        };
      }

      styles.visible = {
        get() {
          return build.call(this, this._styles || [], true, 'visible');
        },

      };
      ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');

      for (const model of Object.keys(ansiStyles.color.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }

        styles[model] = {
          get() {
            const { level } = this;
            return function () {
              const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.color.close,
                closeRe: ansiStyles.color.closeRe,
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          },

        };
      }

      ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');

      for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }

        const bgModel = `bg${model[0].toUpperCase()}${model.slice(1)}`;
        styles[bgModel] = {
          get() {
            const { level } = this;
            return function () {
              const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.bgColor.close,
                closeRe: ansiStyles.bgColor.closeRe,
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          },

        };
      }

      const proto = Object.defineProperties(() => {}, styles);

      function build(_styles, _empty, key) {
        const builder = function () {
          return applyStyle.apply(builder, arguments);
        };

        builder._styles = _styles;
        builder._empty = _empty;
        const self = this;
        Object.defineProperty(builder, 'level', {
          enumerable: true,

          get() {
            return self.level;
          },

          set(level) {
            self.level = level;
          },

        });
        Object.defineProperty(builder, 'enabled', {
          enumerable: true,

          get() {
            return self.enabled;
          },

          set(enabled) {
            self.enabled = enabled;
          },

        }); // See below for fix regarding invisible grey/dim combination on Windows

        builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey'; // `__proto__` is used because we must return a function, but there is
        // no way to create a function with a different prototype

        builder.__proto__ = proto; // eslint-disable-line no-proto

        return builder;
      }

      function applyStyle() {
        // Support varags, but simply cast to string in case there's only one arg
        const args = arguments;
        const argsLen = args.length;
        let str = String(arguments[0]);

        if (argsLen === 0) {
          return '';
        }

        if (argsLen > 1) {
          // Don't slice `arguments`, it prevents V8 optimizations
          for (let a = 1; a < argsLen; a++) {
            str += ` ${args[a]}`;
          }
        }

        if (!this.enabled || this.level <= 0 || !str) {
          return this._empty ? '' : str;
        } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
        // see https://github.com/chalk/chalk/issues/58
        // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.

        const originalDim = ansiStyles.dim.open;

        if (isSimpleWindowsTerm && this.hasGrey) {
          ansiStyles.dim.open = '';
        }

        for (const code of this._styles.slice().reverse()) {
          // Replace any instances already present with a re-opening code
          // otherwise only the part of the string until said closing code
          // will be colored, and the rest will simply be 'plain'.
          str = code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen
          // after next line to fix a bleed issue on macOS
          // https://github.com/chalk/chalk/pull/92

          str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
        } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue

        ansiStyles.dim.open = originalDim;
        return str;
      }

      function chalkTag(chalk, strings) {
        if (!Array.isArray(strings)) {
          // If chalk() was called by itself or with a string,
          // return the string itself as a string.
          return [].slice.call(arguments, 1).join(' ');
        }

        const args = [].slice.call(arguments, 2);
        const parts = [strings.raw[0]];

        for (let i = 1; i < strings.length; i++) {
          parts.push(String(args[i - 1]).replace(/[{}\\]/g, '\\$&'));
          parts.push(String(strings.raw[i]));
        }

        return template(chalk, parts.join(''));
      }

      Object.defineProperties(Chalk.prototype, styles);
      module.exports = Chalk(); // eslint-disable-line new-cap

      module.exports.supportsColor = stdoutColor;
      module.exports.default = module.exports; // For TypeScript
      /* WEBPACK VAR INJECTION */ }.call(this, __webpack_require__(/*! ./../../../process/browser.js */ './node_modules/process/browser.js')));
    /***/ }),

  /***/ './node_modules/react-dev-utils/node_modules/chalk/node_modules/escape-string-regexp/index.js':
  /*! ****************************************************************************************************!*\
  !*** ./node_modules/react-dev-utils/node_modules/chalk/node_modules/escape-string-regexp/index.js ***!
  \*************************************************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

    module.exports = function (str) {
      if (typeof str !== 'string') {
        throw new TypeError('Expected a string');
      }

      return str.replace(matchOperatorsRe, '\\$&');
    };
    /***/ }),

  /***/ './node_modules/react-dev-utils/node_modules/chalk/templates.js':
  /*! **********************************************************************!*\
  !*** ./node_modules/react-dev-utils/node_modules/chalk/templates.js ***!
  \********************************************************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
    const ESCAPES = new Map([['n', '\n'], ['r', '\r'], ['t', '\t'], ['b', '\b'], ['f', '\f'], ['v', '\v'], ['0', '\0'], ['\\', '\\'], ['e', '\u001B'], ['a', '\u0007']]);

    function unescape(c) {
      if (c[0] === 'u' && c.length === 5 || c[0] === 'x' && c.length === 3) {
        return String.fromCharCode(parseInt(c.slice(1), 16));
      }

      return ESCAPES.get(c) || c;
    }

    function parseArguments(name, args) {
      const results = [];
      const chunks = args.trim().split(/\s*,\s*/g);
      let matches;

      for (const chunk of chunks) {
        if (!isNaN(chunk)) {
          results.push(Number(chunk));
        } else if (matches = chunk.match(STRING_REGEX)) {
          results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => (escape ? unescape(escape) : chr)));
        } else {
          throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
        }
      }

      return results;
    }

    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      const results = [];
      let matches;

      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        const name = matches[1];

        if (matches[2]) {
          const args = parseArguments(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }

      return results;
    }

    function buildStyle(chalk, styles) {
      const enabled = {};

      for (const layer of styles) {
        for (const style of layer.styles) {
          enabled[style[0]] = layer.inverse ? null : style.slice(1);
        }
      }

      let current = chalk;

      for (const styleName of Object.keys(enabled)) {
        if (Array.isArray(enabled[styleName])) {
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }

          if (enabled[styleName].length > 0) {
            current = current[styleName].apply(current, enabled[styleName]);
          } else {
            current = current[styleName];
          }
        }
      }

      return current;
    }

    module.exports = (chalk, tmp) => {
      const styles = [];
      const chunks = [];
      let chunk = []; // eslint-disable-next-line max-params

      tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
        if (escapeChar) {
          chunk.push(unescape(escapeChar));
        } else if (style) {
          const str = chunk.join('');
          chunk = [];
          chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
          styles.push({
            inverse,
            styles: parseStyle(style),
          });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error('Found extraneous } in Chalk template literal');
          }

          chunks.push(buildStyle(chalk, styles)(chunk.join('')));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(chr);
        }
      });
      chunks.push(chunk.join(''));

      if (styles.length > 0) {
        const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
        throw new Error(errMsg);
      }

      return chunks.join('');
    };
    /***/ }),

  /***/ './node_modules/react-dev-utils/node_modules/supports-color/browser.js':
  /*! *****************************************************************************!*\
  !*** ./node_modules/react-dev-utils/node_modules/supports-color/browser.js ***!
  \**************************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    module.exports = {
      stdout: false,
      stderr: false,
    };
    /***/ }),

  /***/ './node_modules/react-dev-utils/refreshOverlayInterop.js':
  /*! ***************************************************************!*\
  !*** ./node_modules/react-dev-utils/refreshOverlayInterop.js ***!
  \************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    // @remove-on-eject-begin

    /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // @remove-on-eject-end

    const {
      dismissRuntimeErrors,
      reportRuntimeError,
    } = __webpack_require__(/*! react-error-overlay */ './node_modules/react-error-overlay/lib/index.js');

    module.exports = {
      clearRuntimeErrors: dismissRuntimeErrors,
      handleRuntimeError: reportRuntimeError,
    };
    /***/ }),

  /***/ './node_modules/react-dev-utils/webpackHotDevClient.js':
  /*! *************************************************************!*\
  !*** ./node_modules/react-dev-utils/webpackHotDevClient.js ***!
  \************************************************************ */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    // This alternative WebpackDevServer combines the functionality of:
    // https://github.com/webpack/webpack-dev-server/blob/webpack-1/client/index.js
    // https://github.com/webpack/webpack/blob/webpack-1/hot/dev-server.js
    // It only supports their simplest configuration (hot updates on same server).
    // It makes some opinionated choices on top, like adding a syntax error overlay
    // that looks similar to our console output. The error overlay is inspired by:
    // https://github.com/glenjamin/webpack-hot-middleware

    const stripAnsi = __webpack_require__(/*! strip-ansi */ './node_modules/strip-ansi/index.js');

    const url = __webpack_require__(/*! url */ './node_modules/url/url.js');

    const launchEditorEndpoint = __webpack_require__(/*! ./launchEditorEndpoint */ './node_modules/react-dev-utils/launchEditorEndpoint.js');

    const formatWebpackMessages = __webpack_require__(/*! ./formatWebpackMessages */ './node_modules/react-dev-utils/formatWebpackMessages.js');

    const ErrorOverlay = __webpack_require__(/*! react-error-overlay */ './node_modules/react-error-overlay/lib/index.js');

    ErrorOverlay.setEditorHandler(errorLocation => {
      // Keep this sync with errorOverlayMiddleware.js
      fetch(`${launchEditorEndpoint}?fileName=${window.encodeURIComponent(errorLocation.fileName)}&lineNumber=${window.encodeURIComponent(errorLocation.lineNumber || 1)}&colNumber=${window.encodeURIComponent(errorLocation.colNumber || 1)}`);
    }); // We need to keep track of if there has been a runtime error.
    // Essentially, we cannot guarantee application state was not corrupted by the
    // runtime error. To prevent confusing behavior, we forcibly reload the entire
    // application. This is handled below when we are notified of a compile (code
    // change).
    // See https://github.com/facebook/create-react-app/issues/3096

    let hadRuntimeError = false;
    ErrorOverlay.startReportingRuntimeErrors({
      onError() {
        hadRuntimeError = true;
      },
      filename: '/static/js/bundle.js',
    });

    if (true && typeof module.hot.dispose === 'function') {
      module.hot.dispose(() => {
        // TODO: why do we need this?
        ErrorOverlay.stopReportingRuntimeErrors();
      });
    } // Connect to WebpackDevServer via a socket.

    const connection = new WebSocket(url.format({
      protocol: window.location.protocol === 'https:' ? 'wss' : 'ws',
      hostname: undefined || window.location.hostname,
      port: undefined || window.location.port,
      // Hardcoded in WebpackDevServer
      pathname: undefined || '/sockjs-node',
      slashes: true,
    })); // Unlike WebpackDevServer client, we won't try to reconnect
    // to avoid spamming the console. Disconnect usually happens
    // when developer stops the server.

    connection.onclose = function () {
      if (typeof console !== 'undefined' && typeof console.info === 'function') {
        console.info('The development server has disconnected.\nRefresh the page if necessary.');
      }
    }; // Remember some state related to hot module replacement.

    let isFirstCompilation = true;
    let mostRecentCompilationHash = null;
    let hasCompileErrors = false;

    function clearOutdatedErrors() {
      // Clean up outdated compile errors, if any.
      if (typeof console !== 'undefined' && typeof console.clear === 'function') {
        if (hasCompileErrors) {
          console.clear();
        }
      }
    } // Successful compilation.

    function handleSuccess() {
      clearOutdatedErrors();
      const isHotUpdate = !isFirstCompilation;
      isFirstCompilation = false;
      hasCompileErrors = false; // Attempt to apply hot updates or reload.

      if (isHotUpdate) {
        tryApplyUpdates(() => {
          // Only dismiss it when we're sure it's a hot update.
          // Otherwise it would flicker right before the reload.
          tryDismissErrorOverlay();
        });
      }
    } // Compilation with warnings (e.g. ESLint).

    function handleWarnings(warnings) {
      clearOutdatedErrors();
      const isHotUpdate = !isFirstCompilation;
      isFirstCompilation = false;
      hasCompileErrors = false;

      function printWarnings() {
        // Print warnings to the console.
        const formatted = formatWebpackMessages({
          warnings,
          errors: [],
        });

        if (typeof console !== 'undefined' && typeof console.warn === 'function') {
          for (let i = 0; i < formatted.warnings.length; i++) {
            if (i === 5) {
              console.warn('There were more warnings in other files.\n' + 'You can find a complete log in the terminal.');
              break;
            }

            console.warn(stripAnsi(formatted.warnings[i]));
          }
        }
      }

      printWarnings(); // Attempt to apply hot updates or reload.

      if (isHotUpdate) {
        tryApplyUpdates(() => {
          // Only dismiss it when we're sure it's a hot update.
          // Otherwise it would flicker right before the reload.
          tryDismissErrorOverlay();
        });
      }
    } // Compilation with errors (e.g. syntax error or missing modules).

    function handleErrors(errors) {
      clearOutdatedErrors();
      isFirstCompilation = false;
      hasCompileErrors = true; // "Massage" webpack messages.

      const formatted = formatWebpackMessages({
        errors,
        warnings: [],
      }); // Only show the first error.

      ErrorOverlay.reportBuildError(formatted.errors[0]); // Also log them to the console.

      if (typeof console !== 'undefined' && typeof console.error === 'function') {
        for (let i = 0; i < formatted.errors.length; i++) {
          console.error(stripAnsi(formatted.errors[i]));
        }
      } // Do not attempt to reload now.
      // We will reload on next success instead.
    }

    function tryDismissErrorOverlay() {
      if (!hasCompileErrors) {
        ErrorOverlay.dismissBuildError();
      }
    } // There is a newer version of the code available.

    function handleAvailableHash(hash) {
      // Update last known compilation hash.
      mostRecentCompilationHash = hash;
    } // Handle messages from the server.

    connection.onmessage = function (e) {
      const message = JSON.parse(e.data);

      switch (message.type) {
        case 'hash':
          handleAvailableHash(message.data);
          break;

        case 'still-ok':
        case 'ok':
          handleSuccess();
          break;

        case 'content-changed':
          // Triggered when a file from `contentBase` changed.
          window.location.reload();
          break;

        case 'warnings':
          handleWarnings(message.data);
          break;

        case 'errors':
          handleErrors(message.data);
          break;

        default: // Do nothing.
      }
    }; // Is there a newer version of this code available?

    function isUpdateAvailable() {
      /* globals __webpack_hash__ */
      // __webpack_hash__ is the hash of the current compilation.
      // It's a global variable injected by webpack.
      return mostRecentCompilationHash !== __webpack_require__.h();
    } // webpack disallows updates in other states.

    function canApplyUpdates() {
      return module.hot.status() === 'idle';
    } // Attempt to update code on the fly, fall back to a hard reload.

    function tryApplyUpdates(onHotUpdateSuccess) {
      if (false) {}

      if (!isUpdateAvailable() || !canApplyUpdates()) {
        return;
      }

      function handleApplyUpdates(err, updatedModules) {
        // NOTE: This var is injected by Webpack's DefinePlugin, and is a boolean instead of string.
        const hasReactRefresh = true;
        const wantsForcedReload = err || !updatedModules || hadRuntimeError; // React refresh can handle hot-reloading over errors.

        if (!hasReactRefresh && wantsForcedReload) {
          window.location.reload();
          return;
        }

        if (typeof onHotUpdateSuccess === 'function') {
          // Maybe we want to do something.
          onHotUpdateSuccess();
        }

        if (isUpdateAvailable()) {
          // While we were updating, there was a new update! Do it again.
          tryApplyUpdates();
        }
      } // https://webpack.github.io/docs/hot-module-replacement.html#check

      const result = module.hot.check(
        /* autoApply */
        true, handleApplyUpdates,
      ); // // webpack 2 returns a Promise instead of invoking a callback

      if (result && result.then) {
        result.then(updatedModules => {
          handleApplyUpdates(null, updatedModules);
        }, err => {
          handleApplyUpdates(err, null);
        });
      }
    }
    /***/ }),

  /***/ './node_modules/react-dom/cjs/react-dom.development.js':
  /*! *************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \************************************************************ */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /** @license React v17.0.1
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    if (true) {
      (function () {
        const React = __webpack_require__(/*! react */ './node_modules/react/index.js');

        const _assign = __webpack_require__(/*! object-assign */ './node_modules/object-assign/index.js');

        const Scheduler = __webpack_require__(/*! scheduler */ './node_modules/scheduler/index.js');

        const tracing = __webpack_require__(/*! scheduler/tracing */ './node_modules/scheduler/tracing.js');

        const ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // by calls to these methods by a Babel plugin.
        //
        // In PROD (or in packages without access to React internals),
        // they are left as they are instead.

        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            printWarning('warn', format, args);
          }
        }

        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            printWarning('error', format, args);
          }
        }

        function printWarning(level, format, args) {
          // When changing this logic, you might want to also
          // update consoleWithStackDev.www.js as well.
          {
            const { ReactDebugCurrentFrame } = ReactSharedInternals;
            const stack = ReactDebugCurrentFrame.getStackAddendum();

            if (stack !== '') {
              format += '%s';
              args = args.concat([stack]);
            }

            const argsWithFormat = args.map(item => `${item}`); // Careful: RN currently depends on this prefix

            argsWithFormat.unshift(`Warning: ${format}`); // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging

            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }

        if (!React) {
          {
            throw Error('ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.');
          }
        }

        const FunctionComponent = 0;
        const ClassComponent = 1;
        const IndeterminateComponent = 2; // Before we know whether it is function or class

        const HostRoot = 3; // Root of a host tree. Could be nested inside another node.

        const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

        const HostComponent = 5;
        const HostText = 6;
        const Fragment = 7;
        const Mode = 8;
        const ContextConsumer = 9;
        const ContextProvider = 10;
        const ForwardRef = 11;
        const Profiler = 12;
        const SuspenseComponent = 13;
        const MemoComponent = 14;
        const SimpleMemoComponent = 15;
        const LazyComponent = 16;
        const IncompleteClassComponent = 17;
        const DehydratedFragment = 18;
        const SuspenseListComponent = 19;
        const FundamentalComponent = 20;
        const ScopeComponent = 21;
        const Block = 22;
        const OffscreenComponent = 23;
        const LegacyHiddenComponent = 24; // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

        const enableProfilerTimer = true; // Record durations for commit and passive effects phases.

        const enableFundamentalAPI = false; // Experimental Scope support.

        const enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)

        const warnAboutStringRefs = false;
        const allNativeEvents = new Set();
        /**
     * Mapping from registration name to event name
     */

        const registrationNameDependencies = {};
        /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in true.
     * @type {Object}
     */

        const possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(`${registrationName}Capture`, dependencies);
        }

        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            const lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;

            if (registrationName === 'onDoubleClick') {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }

          for (let i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }

        const canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined'); // A reserved attribute.
        // It is handled by React separately and shouldn't be written to the DOM.

        const RESERVED = 0; // A simple string attribute.
        // Attributes that aren't in the filter are presumed to have this type.

        const STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
        // "enumerated" attributes with "true" and "false" as possible values.
        // When true, it should be set to a "true" string.
        // When false, it should be set to a "false" string.

        const BOOLEANISH_STRING = 2; // A real boolean attribute.
        // When true, it should be present (set either to an empty string or its name).
        // When false, it should be omitted.

        const BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
        // When true, it should be present (set either to an empty string or its name).
        // When false, it should be omitted.
        // For any other value, should be present with that value.

        const OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
        // When falsy, it should be removed.

        const NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
        // When falsy, it should be removed.

        const POSITIVE_NUMERIC = 6;
        /* eslint-disable max-len */

        const ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
        /* eslint-enable max-len */

        const ATTRIBUTE_NAME_CHAR = `${ATTRIBUTE_NAME_START_CHAR}\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040`;
        const ROOT_ATTRIBUTE_NAME = 'data-reactroot';
        const VALID_ATTRIBUTE_NAME_REGEX = new RegExp(`^[${ATTRIBUTE_NAME_START_CHAR}][${ATTRIBUTE_NAME_CHAR}]*$`);
        const { hasOwnProperty } = Object.prototype;
        const illegalAttributeNameCache = {};
        const validatedAttributeNameCache = {};

        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }

          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }

          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }

          illegalAttributeNameCache[attributeName] = true;
          {
            error('Invalid attribute name: `%s`', attributeName);
          }
          return false;
        }

        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }

          if (isCustomComponentTag) {
            return false;
          }

          if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
            return true;
          }

          return false;
        }

        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }

          switch (typeof value) {
            case 'function': // $FlowIssue symbol is perfectly valid here

            case 'symbol':
          // eslint-disable-line
              return true;

            case 'boolean':
            {
              if (isCustomComponentTag) {
                return false;
              }

              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              }
              const prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }

            default:
              return false;
          }
        }

        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === 'undefined') {
            return true;
          }

          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }

          if (isCustomComponentTag) {
            return false;
          }

          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;

              case OVERLOADED_BOOLEAN:
                return value === false;

              case NUMERIC:
                return isNaN(value);

              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }

          return false;
        }

        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }

        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL;
          this.removeEmptyString = removeEmptyString;
        } // When adding attributes to this list, be sure to also add them to
        // the `possibleStandardNames` module to ensure casing and incorrect
        // name warnings.

        var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

        const reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
        reservedProps.forEach(name => {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
            name, // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // A few React string attributes have a different name.
        // This is a mapping from React prop names to the attribute names.

        [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(_ref => {
          const name = _ref[0];
          const attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
            attributeName, // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // These are "enumerated" HTML attributes that accept "true" and "false".
        // In React, we let users pass `true` and `false` even though technically
        // these aren't boolean attributes (they are coerced to strings).

        ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(name => {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
            name.toLowerCase(), // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // These are "enumerated" SVG attributes that accept "true" and "false".
        // In React, we let users pass `true` and `false` even though technically
        // these aren't boolean attributes (they are coerced to strings).
        // Since these are SVG attributes, their attribute names are case-sensitive.

        ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(name => {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
            name, // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // These are HTML boolean attributes.

        ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
          'itemScope'].forEach(name => {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
            name.toLowerCase(), // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // These are the few React props that we set as DOM properties
        // rather than attributes. These are all booleans.

        ['checked', // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          'multiple', 'muted', 'selected', // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(name => {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
            name, // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // These are HTML attributes that are "overloaded booleans": they behave like
        // booleans, but can also accept a string value.

        ['capture', 'download', // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(name => {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
            name, // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // These are HTML attributes that must be positive numbers.

        ['cols', 'rows', 'size', 'span', // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(name => {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
            name, // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // These are HTML attributes that must be numbers.

        ['rowSpan', 'start'].forEach(name => {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
            name.toLowerCase(), // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        });
        const CAMELIZE = /[\-\:]([a-z])/g;

        const capitalize = function (token) {
          return token[1].toUpperCase();
        }; // This is a list of all SVG attributes that need special casing, namespacing,
        // or boolean value assignment. Regular attributes that just accept strings
        // and have the same names are omitted, just like in the HTML attribute filter.
        // Some of these attributes can be hard to find. This list was created by
        // scraping the MDN documentation.

        ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height', // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(attributeName => {
          const name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
            attributeName, null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // String SVG attributes with the xlink namespace.

        ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(attributeName => {
          const name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
            attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
            false);
        }); // String SVG attributes with the xml namespace.

        ['xml:base', 'xml:lang', 'xml:space', // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(attributeName => {
          const name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
            attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
            false);
        }); // These attribute exists both in HTML and SVG.
        // The attribute name is case-sensitive in SVG so we can't just use
        // the React name like we do for attributes that exist only in HTML.

        ['tabIndex', 'crossOrigin'].forEach(attributeName => {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
            attributeName.toLowerCase(), // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false);
        }); // These attributes accept URLs. These must not allow javascript: URLS.
        // These will also need to accept Trusted Types object in the future.

        const xlinkHref = 'xlinkHref';
        properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
          'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
          false);
        ['src', 'href', 'action', 'formAction'].forEach(attributeName => {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
            attributeName.toLowerCase(), // attributeName
            null, // attributeNamespace
            true, // sanitizeURL
            true);
        }); // and any newline or tab are filtered out as if they're not part of the URL.
        // https://url.spec.whatwg.org/#url-parsing
        // Tab or newline are defined as \r\n\t:
        // https://infra.spec.whatwg.org/#ascii-tab-or-newline
        // A C0 control is a code point in the range \u0000 NULL to \u001F
        // INFORMATION SEPARATOR ONE, inclusive:
        // https://infra.spec.whatwg.org/#c0-control-or-space

        /* eslint-disable max-len */

        const isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        let didWarn = false;

        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
            }
          }
        }
        /**
     * Get the value for a property on a node. Only used in DEV for SSR validation.
     * The "expected" argument is used as a hint of what the expected value is.
     * Some properties have multiple equivalent values.
     */

        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              const { propertyName } = propertyInfo;
              return node[propertyName];
            }
            if (propertyInfo.sanitizeURL) {
              // If we haven't fully disabled javascript: URLs, and if
              // the hydration is successful of a javascript: URL, we
              // still want to warn on the client.
              sanitizeURL(`${expected}`);
            }

            const { attributeName } = propertyInfo;
            let stringValue = null;

            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                const value = node.getAttribute(attributeName);

                if (value === '') {
                  return true;
                }

                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }

                if (value === `${expected}`) {
                  return expected;
                }

                return value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
              }

              if (propertyInfo.type === BOOLEAN) {
                // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
              } // Even if this property uses a namespace we use getAttribute
              // because we assume its namespaced name is the same as our config.
              // To use getAttributeNS we need the local name which we don't have
              // in our config atm.

              stringValue = node.getAttribute(attributeName);
            }

            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } if (stringValue === `${expected}`) {
              return expected;
            }
            return stringValue;
          }
        }
        /**
     * Get the value for a attribute on a node. Only used in DEV for SSR validation.
     * The third argument is used as a hint of what the expected value is. Some
     * attributes have multiple equivalent values.
     */

        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            } // If the object is an opaque reference ID, it's expected that
            // the next prop is different than the server value, so just return
            // expected

            if (isOpaqueHydratingObject(expected)) {
              return expected;
            }

            if (!node.hasAttribute(name)) {
              return expected === undefined ? undefined : null;
            }

            const value = node.getAttribute(name);

            if (value === `${expected}`) {
              return expected;
            }

            return value;
          }
        }
        /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */

        function setValueForProperty(node, name, value, isCustomComponentTag) {
          const propertyInfo = getPropertyInfo(name);

          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }

          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          } // If the prop isn't in the special list, treat it as a simple attribute.

          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              const _attributeName = name;

              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, `${value}`);
              }
            }

            return;
          }

          const { mustUseProperty } = propertyInfo;

          if (mustUseProperty) {
            const { propertyName } = propertyInfo;

            if (value === null) {
              const { type } = propertyInfo;
              node[propertyName] = type === BOOLEAN ? false : '';
            } else {
              // Contrary to `setAttribute`, object properties are properly
              // `toString`ed by IE8/9.
              node[propertyName] = value;
            }

            return;
          } // The rest are treated as attributes with special cases.

          const { attributeName } = propertyInfo;
          const { attributeNamespace } = propertyInfo;

          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            const _type = propertyInfo.type;
            let attributeValue;

            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              // If attribute type is boolean, we know for sure it won't be an execution sink
              // and we won't require Trusted Type here.
              attributeValue = '';
            } else {
              // `setAttribute` with objects becomes only `[object]` in IE8/9,
              // ('' + value) makes it output the correct toString()-value.
              {
                attributeValue = `${value}`;
              }

              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }

            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        } // ATTENTION
        // When adding new symbols to this file,
        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.

        let REACT_ELEMENT_TYPE = 0xeac7;
        let REACT_PORTAL_TYPE = 0xeaca;
        let REACT_FRAGMENT_TYPE = 0xeacb;
        let REACT_STRICT_MODE_TYPE = 0xeacc;
        let REACT_PROFILER_TYPE = 0xead2;
        let REACT_PROVIDER_TYPE = 0xeacd;
        let REACT_CONTEXT_TYPE = 0xeace;
        let REACT_FORWARD_REF_TYPE = 0xead0;
        let REACT_SUSPENSE_TYPE = 0xead1;
        let REACT_SUSPENSE_LIST_TYPE = 0xead8;
        let REACT_MEMO_TYPE = 0xead3;
        let REACT_LAZY_TYPE = 0xead4;
        let REACT_BLOCK_TYPE = 0xead9;
        let REACT_SERVER_BLOCK_TYPE = 0xeada;
        let REACT_FUNDAMENTAL_TYPE = 0xead5;
        let REACT_SCOPE_TYPE = 0xead7;
        let REACT_OPAQUE_ID_TYPE = 0xeae0;
        let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
        let REACT_OFFSCREEN_TYPE = 0xeae2;
        let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

        if (typeof Symbol === 'function' && Symbol.for) {
          const symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor('react.element');
          REACT_PORTAL_TYPE = symbolFor('react.portal');
          REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
          REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
          REACT_PROFILER_TYPE = symbolFor('react.profiler');
          REACT_PROVIDER_TYPE = symbolFor('react.provider');
          REACT_CONTEXT_TYPE = symbolFor('react.context');
          REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
          REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
          REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
          REACT_MEMO_TYPE = symbolFor('react.memo');
          REACT_LAZY_TYPE = symbolFor('react.lazy');
          REACT_BLOCK_TYPE = symbolFor('react.block');
          REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
          REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
          REACT_SCOPE_TYPE = symbolFor('react.scope');
          REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
          REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
          REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
        }

        const MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        const FAUX_ITERATOR_SYMBOL = '@@iterator';

        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== 'object') {
            return null;
          }

          const maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

          if (typeof maybeIterator === 'function') {
            return maybeIterator;
          }

          return null;
        } // Helpers to patch console.logs to avoid logging during side-effect free
        // replaying on render function. This currently only patches the object
        // lazily which won't cover if the log function was extracted eagerly.
        // We could also eagerly patch the method.

        let disabledDepth = 0;
        let prevLog;
        let prevInfo;
        let prevWarn;
        let prevError;
        let prevGroup;
        let prevGroupCollapsed;
        let prevGroupEnd;

        function disabledLog() {}

        disabledLog.__reactDisabledLog = true;

        function disableLogs() {
          {
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

              const props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              });
              /* eslint-enable react-internal/no-production-logging */
            }

            disabledDepth++;
          }
        }

        function reenableLogs() {
          {
            disabledDepth--;

            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              const props = {
                configurable: true,
                enumerable: true,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog,
                }),
                info: _assign({}, props, {
                  value: prevInfo,
                }),
                warn: _assign({}, props, {
                  value: prevWarn,
                }),
                error: _assign({}, props, {
                  value: prevError,
                }),
                group: _assign({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd,
                }),
              });
              /* eslint-enable react-internal/no-production-logging */
            }

            if (disabledDepth < 0) {
              error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
            }
          }
        }

        const { ReactCurrentDispatcher } = ReactSharedInternals;
        let prefix;

        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === undefined) {
              // Extract the VM specific prefix used by each line.
              try {
                throw Error();
              } catch (x) {
                const match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || '';
              }
            } // We use the prefix to ensure our stacks line up with native stack frames.

            return `\n${prefix}${name}`;
          }
        }

        let reentry = false;
        let componentFrameCache;
        {
          const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }

        function describeNativeComponentFrame(fn, construct) {
          // If something asked for a stack inside a fake render, it should get ignored.
          if (!fn || reentry) {
            return '';
          }

          {
            const frame = componentFrameCache.get(fn);

            if (frame !== undefined) {
              return frame;
            }
          }
          let control;
          reentry = true;
          const previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

          Error.prepareStackTrace = undefined;
          let previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
            // for warnings.

            ReactCurrentDispatcher.current = null;
            disableLogs();
          }

          try {
            // This should throw.
            if (construct) {
              // Something should be setting the props in the constructor.
              const Fake = function () {
                throw Error();
              }; // $FlowFixMe

              Object.defineProperty(Fake.prototype, 'props', {
                set() {
                  // We use a throwing setter instead of frozen or non-writable props
                  // because that won't throw in a non-strict mode function.
                  throw Error();
                },
              });

              if (typeof Reflect === 'object' && Reflect.construct) {
                // We construct a different control for this case to include any extra
                // frames added by the construct call.
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }

                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }

                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }

              fn();
            }
          } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
              // This extracts the first frame from the sample that isn't also in the control.
              // Skipping one frame that we assume is the frame that calls the two.
              const sampleLines = sample.stack.split('\n');
              const controlLines = control.stack.split('\n');
              let s = sampleLines.length - 1;
              let c = controlLines.length - 1;

              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                // We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
              }

              for (; s >= 1 && c >= 0; s--, c--) {
                // Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                  // In V8, the first line is describing the message but other VMs don't.
                  // If we're about to return the first line, and the control is also on the same
                  // line, that's a pretty good indicator that our sample threw at same line as
                  // the control. I.e. before we entered the sample frame. So we ignore this result.
                  // This can happen if you passed a class to function component, or non-function.
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--; // We may still have similar intermediate frames from the construct call.
                      // The next one that isn't the same should be our match though.

                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                        const _frame = `\n${sampleLines[s].replace(' at new ', ' at ')}`;

                        {
                          if (typeof fn === 'function') {
                            componentFrameCache.set(fn, _frame);
                          }
                        } // Return the line we found.

                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }

                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          } // Fallback to just using the name if we couldn't make it throw.

          const name = fn ? fn.displayName || fn.name : '';
          const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
          {
            if (typeof fn === 'function') {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }

        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }

        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }

        function shouldConstruct(Component) {
          const { prototype } = Component;
          return !!(prototype && prototype.isReactComponent);
        }

        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return '';
          }

          if (typeof type === 'function') {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }

          if (typeof type === 'string') {
            return describeBuiltInComponentFrame(type);
          }

          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame('Suspense');

            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame('SuspenseList');
          }

          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);

              case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);

              case REACT_LAZY_TYPE:
              {
                const lazyComponent = type;
                const payload = lazyComponent._payload;
                const init = lazyComponent._init;

                try {
                // Lazy may contain any component type so we recursively resolve it.
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
              }
            }
          }

          return '';
        }

        function describeFiber(fiber) {
          const owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          const source = fiber._debugSource;

          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);

            case LazyComponent:
              return describeBuiltInComponentFrame('Lazy');

            case SuspenseComponent:
              return describeBuiltInComponentFrame('Suspense');

            case SuspenseListComponent:
              return describeBuiltInComponentFrame('SuspenseList');

            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);

            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);

            case Block:
              return describeFunctionComponentFrame(fiber.type._render);

            case ClassComponent:
              return describeClassComponentFrame(fiber.type);

            default:
              return '';
          }
        }

        function getStackByFiberInDevAndProd(workInProgress) {
          try {
            let info = '';
            let node = workInProgress;

            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);

            return info;
          } catch (x) {
            return `\nError generating stack: ${x.message}\n${x.stack}`;
          }
        }

        function getWrappedName(outerType, innerType, wrapperName) {
          const functionName = innerType.displayName || innerType.name || '';
          return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
        }

        function getContextName(type) {
          return type.displayName || 'Context';
        }

        function getComponentName(type) {
          if (type == null) {
            // Host root, text node or just invalid type.
            return null;
          }

          {
            if (typeof type.tag === 'number') {
              error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
            }
          }

          if (typeof type === 'function') {
            return type.displayName || type.name || null;
          }

          if (typeof type === 'string') {
            return type;
          }

          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return 'Fragment';

            case REACT_PORTAL_TYPE:
              return 'Portal';

            case REACT_PROFILER_TYPE:
              return 'Profiler';

            case REACT_STRICT_MODE_TYPE:
              return 'StrictMode';

            case REACT_SUSPENSE_TYPE:
              return 'Suspense';

            case REACT_SUSPENSE_LIST_TYPE:
              return 'SuspenseList';
          }

          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return `${getContextName(context)}.Consumer`;

              case REACT_PROVIDER_TYPE:
                var provider = type;
                return `${getContextName(provider._context)}.Provider`;

              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');

              case REACT_MEMO_TYPE:
                return getComponentName(type.type);

              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);

              case REACT_LAZY_TYPE:
              {
                const lazyComponent = type;
                const payload = lazyComponent._payload;
                const init = lazyComponent._init;

                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }

          return null;
        }

        const { ReactDebugCurrentFrame } = ReactSharedInternals;
        let current = null;
        let isRendering = false;

        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }

            const owner = current._debugOwner;

            if (owner !== null && typeof owner !== 'undefined') {
              return getComponentName(owner.type);
            }
          }
          return null;
        }

        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return '';
            } // Safe because if current fiber exists, we are reconciling,
            // and it is guaranteed to be the work-in-progress version.

            return getStackByFiberInDevAndProd(current);
          }
        }

        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }

        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }

        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }

        function getIsRendering() {
          {
            return isRendering;
          }
        } // Flow does not allow string concatenation of most non-string types. To work
        // around this limitation, we use an opaque type that can only be obtained by
        // passing the value through getToStringValue first.

        function toString(value) {
          return `${value}`;
        }

        function getToStringValue(value) {
          switch (typeof value) {
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
              return value;

            default:
              // function, symbol are assigned as empty strings
              return '';
          }
        }

        const hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true,
        };

        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
            }

            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
            }
          }
        }

        function isCheckable(elem) {
          const { type } = elem;
          const { nodeName } = elem;
          return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
        }

        function getTracker(node) {
          return node._valueTracker;
        }

        function detachTracker(node) {
          node._valueTracker = null;
        }

        function getValueFromNode(node) {
          let value = '';

          if (!node) {
            return value;
          }

          if (isCheckable(node)) {
            value = node.checked ? 'true' : 'false';
          } else {
            value = node.value;
          }

          return value;
        }

        function trackValueOnNode(node) {
          const valueField = isCheckable(node) ? 'checked' : 'value';
          const descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          let currentValue = `${node[valueField]}`; // if someone has already defined a value or Safari, then bail
          // and don't track value will cause over reporting of changes,
          // but it's better then a hard failure
          // (needed for certain tests that spyOn input values and Safari)

          if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
            return;
          }

          const { get } = descriptor;
          const { set } = descriptor;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get() {
              return get.call(this);
            },
            set(value) {
              currentValue = `${value}`;
              set.call(this, value);
            },
          }); // We could've passed this the first time
          // but it triggers a bug in IE11 and Edge 14/15.
          // Calling defineProperty() again should be equivalent.
          // https://github.com/facebook/react/issues/11768

          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable,
          });
          const tracker = {
            getValue() {
              return currentValue;
            },
            setValue(value) {
              currentValue = `${value}`;
            },
            stopTracking() {
              detachTracker(node);
              delete node[valueField];
            },
          };
          return tracker;
        }

        function track(node) {
          if (getTracker(node)) {
            return;
          } // TODO: Once it's just Fiber we can move this to node._wrapperState

          node._valueTracker = trackValueOnNode(node);
        }

        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }

          const tracker = getTracker(node); // if there is no tracker at this point it's unlikely
          // that trying again will succeed

          if (!tracker) {
            return true;
          }

          const lastValue = tracker.getValue();
          const nextValue = getValueFromNode(node);

          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }

          return false;
        }

        function getActiveElement(doc) {
          doc = doc || (typeof document !== 'undefined' ? document : undefined);

          if (typeof doc === 'undefined') {
            return null;
          }

          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }

        let didWarnValueDefaultValue = false;
        let didWarnCheckedDefaultChecked = false;
        let didWarnControlledToUncontrolled = false;
        let didWarnUncontrolledToControlled = false;

        function isControlled(props) {
          const usesChecked = props.type === 'checkbox' || props.type === 'radio';
          return usesChecked ? props.checked != null : props.value != null;
        }
        /**
     * Implements an <input> host component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */

        function getHostProps(element, props) {
          const node = element;
          const { checked } = props;

          const hostProps = _assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked,
          });

          return hostProps;
        }

        function initWrapperState(element, props) {
          {
            checkControlledValueProps('input', props);

            if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
              error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
              didWarnCheckedDefaultChecked = true;
            }

            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
              error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
              didWarnValueDefaultValue = true;
            }
          }
          const node = element;
          const defaultValue = props.defaultValue == null ? '' : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props),
          };
        }

        function updateChecked(element, props) {
          const node = element;
          const { checked } = props;

          if (checked != null) {
            setValueForProperty(node, 'checked', checked, false);
          }
        }

        function updateWrapper(element, props) {
          const node = element;
          {
            const controlled = isControlled(props);

            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');
              didWarnUncontrolledToControlled = true;
            }

            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          const value = getToStringValue(props.value);
          const { type } = props;

          if (value != null) {
            if (type === 'number') {
              if (value === 0 && node.value === '' // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
          }

          {
            // When syncing the value attribute, the value comes from a cascade of
            // properties:
            //  1. The value React property
            //  2. The defaultValue React property
            //  3. Otherwise there should be no change
            if (props.hasOwnProperty('value')) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty('defaultValue')) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            // When syncing the checked attribute, it only changes when it needs
            // to be removed, such as transitioning from a checkbox into a text input
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }

        function postMountWrapper(element, props, isHydrating) {
          const node = element; // Do not assign value if it is already set. This prevents user text input
          // from being lost during SSR hydration.

          if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            const { type } = props;
            const isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872

            if (isButton && (props.value === undefined || props.value === null)) {
              return;
            }

            const initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.

            if (!isHydrating) {
              {
                // When syncing the value attribute, the value property should use
                // the wrapperState._initialValue property. This uses:
                //
                //   1. The value React property when present
                //   2. The defaultValue React property when present
                //   3. An empty string
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }

            {
              // Otherwise, the value attribute is synchronized to the property,
              // so we assign defaultValue to the same thing as the value property
              // assignment step above.
              node.defaultValue = initialValue;
            }
          } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
          // this is needed to work around a chrome bug where setting defaultChecked
          // will sometimes influence the value of checked (even after detachment).
          // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
          // We need to temporarily unset name to avoid disrupting radio button groups.

          const { name } = node;

          if (name !== '') {
            node.name = '';
          }

          {
            // When syncing the checked attribute, both the checked property and
            // attribute are assigned at the same time using defaultChecked. This uses:
            //
            //   1. The checked React property when present
            //   2. The defaultChecked React property when present
            //   3. Otherwise, false
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }

          if (name !== '') {
            node.name = name;
          }
        }

        function restoreControlledState(element, props) {
          const node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }

        function updateNamedCousins(rootNode, props) {
          const { name } = props;

          if (props.type === 'radio' && name != null) {
            let queryRoot = rootNode;

            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            } // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.

            const group = queryRoot.querySelectorAll(`input[name=${JSON.stringify(`${name}`)}][type="radio"]`);

            for (let i = 0; i < group.length; i++) {
              const otherNode = group[i];

              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              } // This will throw if radio buttons rendered by different copies of React
              // and the same name are rendered into the same form (same as #1939).
              // That's probably okay; we don't support it just as we don't support
              // mixing React radio buttons with non-React ones.

              const otherProps = getFiberCurrentPropsFromNode(otherNode);

              if (!otherProps) {
                {
                  throw Error('ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.');
                }
              } // We need update the tracked value on the named cousin since the value
              // was changed but the input saw no event or value set

              updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
              // was previously checked to update will cause it to be come re-checked
              // as appropriate.

              updateWrapper(otherNode, otherProps);
            }
          }
        } // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253

        function setDefaultValue(node, type, value) {
          if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }

        let didWarnSelectedSetOnOption = false;
        let didWarnInvalidChild = false;

        function flattenChildren(children) {
          let content = ''; // Flatten children. We'll warn if they are invalid
          // during validateProps() which runs for hydration too.
          // Note that this would throw on non-element objects.
          // Elements are stringified (which is normally irrelevant
          // but matters for <fbt>).

          React.Children.forEach(children, child => {
            if (child == null) {
              return;
            }

            content += child; // Note: we don't warn about invalid children here.
            // Instead, this is done separately below so that
            // it happens during the hydration code path too.
          });
          return content;
        }
        /**
     * Implements an <option> host component that warns when `selected` is set.
     */

        function validateProps(element, props) {
          {
            // This mirrors the code path above, but runs for hydration too.
            // Warn about invalid children here so that client and hydration are consistent.
            // TODO: this seems like it could cause a DEV-only throw for hydration
            // if children contains a non-element object. We should try to avoid that.
            if (typeof props.children === 'object' && props.children !== null) {
              React.Children.forEach(props.children, child => {
                if (child == null) {
                  return;
                }

                if (typeof child === 'string' || typeof child === 'number') {
                  return;
                }

                if (typeof child.type !== 'string') {
                  return;
                }

                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error('Only strings and numbers are supported as <option> children.');
                }
              });
            } // TODO: Remove support for `selected` in <option>.

            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
              didWarnSelectedSetOnOption = true;
            }
          }
        }

        function postMountWrapper$1(element, props) {
          // value="" should make a value attribute (#6219)
          if (props.value != null) {
            element.setAttribute('value', toString(getToStringValue(props.value)));
          }
        }

        function getHostProps$1(element, props) {
          const hostProps = _assign({
            children: undefined,
          }, props);

          const content = flattenChildren(props.children);

          if (content) {
            hostProps.children = content;
          }

          return hostProps;
        }

        let didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }

        function getDeclarationErrorAddendum() {
          const ownerName = getCurrentFiberOwnerNameInDevOrNull();

          if (ownerName) {
            return `\n\nCheck the render method of \`${ownerName}\`.`;
          }

          return '';
        }

        const valuePropNames = ['value', 'defaultValue'];
        /**
     * Validation function for `value` and `defaultValue`.
     */

        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps('select', props);

            for (let i = 0; i < valuePropNames.length; i++) {
              const propName = valuePropNames[i];

              if (props[propName] == null) {
                continue;
              }

              const isArray = Array.isArray(props[propName]);

              if (props.multiple && !isArray) {
                error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray) {
                error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
              }
            }
          }
        }

        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          const { options } = node;

          if (multiple) {
            const selectedValues = propValue;
            const selectedValue = {};

            for (let i = 0; i < selectedValues.length; i++) {
              // Prefix to avoid chaos with special keys.
              selectedValue[`$${selectedValues[i]}`] = true;
            }

            for (let _i = 0; _i < options.length; _i++) {
              const selected = selectedValue.hasOwnProperty(`$${options[_i].value}`);

              if (options[_i].selected !== selected) {
                options[_i].selected = selected;
              }

              if (selected && setDefaultSelected) {
                options[_i].defaultSelected = true;
              }
            }
          } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            const _selectedValue = toString(getToStringValue(propValue));

            let defaultSelected = null;

            for (let _i2 = 0; _i2 < options.length; _i2++) {
              if (options[_i2].value === _selectedValue) {
                options[_i2].selected = true;

                if (setDefaultSelected) {
                  options[_i2].defaultSelected = true;
                }

                return;
              }

              if (defaultSelected === null && !options[_i2].disabled) {
                defaultSelected = options[_i2];
              }
            }

            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        /**
     * Implements a <select> host component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */

        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: undefined,
          });
        }

        function initWrapperState$1(element, props) {
          const node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple,
          };
          {
            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
              error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');
              didWarnValueDefaultValue$1 = true;
            }
          }
        }

        function postMountWrapper$2(element, props) {
          const node = element;
          node.multiple = !!props.multiple;
          const { value } = props;

          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }

        function postUpdateWrapper(element, props) {
          const node = element;
          const { wasMultiple } = node._wrapperState;
          node._wrapperState.wasMultiple = !!props.multiple;
          const { value } = props;

          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              // Revert the select back to its default unselected state.
              updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
            }
          }
        }

        function restoreControlledState$1(element, props) {
          const node = element;
          const { value } = props;

          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }

        let didWarnValDefaultVal = false;
        /**
     * Implements a <textarea> host component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */

        function getHostProps$3(element, props) {
          const node = element;

          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
            }
          } // Always set children to the same thing. In IE9, the selection range will
          // get reset if `textContent` is mutated.  We could add a check in setTextContent
          // to only set the value if/when the value differs from the node value (which would
          // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
          // solution. The value can be a boolean or object so that's why it's forced
          // to be a string.

          const hostProps = _assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue),
          });

          return hostProps;
        }

        function initWrapperState$2(element, props) {
          const node = element;
          {
            checkControlledValueProps('textarea', props);

            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
              error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
              didWarnValDefaultVal = true;
            }
          }
          let initialValue = props.value; // Only bother fetching default value if we're going to use it

          if (initialValue == null) {
            let { children } = props;
            let { defaultValue } = props;

            if (children != null) {
              {
                error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
                  }
                }

                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error('<textarea> can only have at most one child.');
                    }
                  }

                  children = children[0];
                }

                defaultValue = children;
              }
            }

            if (defaultValue == null) {
              defaultValue = '';
            }

            initialValue = defaultValue;
          }

          node._wrapperState = {
            initialValue: getToStringValue(initialValue),
          };
        }

        function updateWrapper$1(element, props) {
          const node = element;
          const value = getToStringValue(props.value);
          const defaultValue = getToStringValue(props.defaultValue);

          if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            const newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

            if (newValue !== node.value) {
              node.value = newValue;
            }

            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }

          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }

        function postMountWrapper$3(element, props) {
          const node = element; // This is in postMount because we need access to the DOM node, which is not
          // available until after the component has mounted.

          const { textContent } = node; // Only set node.value if textContent is equal to the expected
          // initial value. In IE10/IE11 there is a bug where the placeholder attribute
          // will populate textContent as well.
          // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) {
              node.value = textContent;
            }
          }
        }

        function restoreControlledState$2(element, props) {
          // DOM component is still mounted; update
          updateWrapper$1(element, props);
        }

        const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
        const MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
        const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
        const Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE,
        }; // Assumes there is no parent namespace.

        function getIntrinsicNamespace(type) {
          switch (type) {
            case 'svg':
              return SVG_NAMESPACE;

            case 'math':
              return MATH_NAMESPACE;

            default:
              return HTML_NAMESPACE;
          }
        }

        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            // No (or default) parent namespace: potential entry point.
            return getIntrinsicNamespace(type);
          }

          if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
            // We're leaving SVG.
            return HTML_NAMESPACE;
          } // By default, pass namespace below.

          return parentNamespace;
        }
        /* globals MSApp */

        /**
     * Create a function which has 'unsafe' privileges (required by windows8 apps)
     */

        const createMicrosoftUnsafeLocalFunction = function (func) {
          if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
            return function (arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(() => func(arg0, arg1, arg2, arg3));
            };
          }
          return func;
        };

        let reusableSVGContainer;
        /**
     * Set the innerHTML property of a node
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */

        const setInnerHTML = createMicrosoftUnsafeLocalFunction((node, html) => {
          if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
              // IE does not have innerHTML for SVG nodes, so instead we inject the
              // new markup in a temp node and then move the child nodes across into
              // the target node
              reusableSVGContainer = reusableSVGContainer || document.createElement('div');
              reusableSVGContainer.innerHTML = `<svg>${html.valueOf().toString()}</svg>`;
              const svgNode = reusableSVGContainer.firstChild;

              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }

              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }

              return;
            }
          }

          node.innerHTML = html;
        });
        /**
     * HTML nodeType values that represent the type of the node
     */

        const ELEMENT_NODE = 1;
        const TEXT_NODE = 3;
        const COMMENT_NODE = 8;
        const DOCUMENT_NODE = 9;
        const DOCUMENT_FRAGMENT_NODE = 11;
        /**
     * Set the textContent property of a node. For text updates, it's faster
     * to set the `nodeValue` of the Text node directly instead of using
     * `.textContent` which will remove the existing node and create a new one.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */

        const setTextContent = function (node, text) {
          if (text) {
            const { firstChild } = node;

            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }

          node.textContent = text;
        }; // List derived from Gecko source code:
        // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js

        const shorthandToLonghand = {
          animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
          background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
          backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
          border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
          borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
          borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
          borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
          borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
          borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
          borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
          borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
          borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
          borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
          borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
          borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
          borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
          borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
          columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
          columns: ['columnCount', 'columnWidth'],
          flex: ['flexBasis', 'flexGrow', 'flexShrink'],
          flexFlow: ['flexDirection', 'flexWrap'],
          font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
          fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
          gap: ['columnGap', 'rowGap'],
          grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
          gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
          gridColumn: ['gridColumnEnd', 'gridColumnStart'],
          gridColumnGap: ['columnGap'],
          gridGap: ['columnGap', 'rowGap'],
          gridRow: ['gridRowEnd', 'gridRowStart'],
          gridRowGap: ['rowGap'],
          gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
          listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
          margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
          marker: ['markerEnd', 'markerMid', 'markerStart'],
          mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
          maskPosition: ['maskPositionX', 'maskPositionY'],
          outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
          overflow: ['overflowX', 'overflowY'],
          padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
          placeContent: ['alignContent', 'justifyContent'],
          placeItems: ['alignItems', 'justifyItems'],
          placeSelf: ['alignSelf', 'justifySelf'],
          textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
          textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
          transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
          wordWrap: ['overflowWrap'],
        };
        /**
     * CSS properties which accept numbers but are not in units of "px".
     */

        const isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true,
        };
        /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */

        function prefixKey(prefix, key) {
          return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        }
        /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */

        const prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
        // infinite loop, because it iterates over the newly added props too.

        Object.keys(isUnitlessNumber).forEach(prop => {
          prefixes.forEach(prefix => {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
          });
        });
        /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */

        function dangerousStyleValue(name, value, isCustomProperty) {
          // Note that we've removed escapeTextForBrowser() calls here since the
          // whole string will be escaped when the attribute is injected into
          // the markup. If you provide unsafe user data here they can inject
          // arbitrary CSS which may be problematic (I couldn't repro this):
          // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
          // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
          // This is not an XSS hole but instead a potential CSS injection issue
          // which has lead to a greater discussion about how we're going to
          // trust URLs moving forward. See #2115901
          const isEmpty = value == null || typeof value === 'boolean' || value === '';

          if (isEmpty) {
            return '';
          }

          if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return `${value}px`; // Presumes implicit 'px' suffix for unitless numbers
          }

          return (`${value}`).trim();
        }

        const uppercasePattern = /([A-Z])/g;
        const msPattern = /^ms-/;
        /**
     * Hyphenates a camelcased CSS property name, for example:
     *
     *   > hyphenateStyleName('backgroundColor')
     *   < "background-color"
     *   > hyphenateStyleName('MozTransition')
     *   < "-moz-transition"
     *   > hyphenateStyleName('msTransition')
     *   < "-ms-transition"
     *
     * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
     * is converted to `-ms-`.
     */

        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
        }

        let warnValidStyle = function () {};

        {
          // 'msTransform' is correct, but the other prefixes should be capitalized
          const badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          const msPattern$1 = /^-ms-/;
          const hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

          const badStyleValueWithSemicolonPattern = /;\s*$/;
          const warnedStyleNames = {};
          const warnedStyleValues = {};
          let warnedForNaNValue = false;
          let warnedForInfinityValue = false;

          const camelize = function (string) {
            return string.replace(hyphenPattern, (_, character) => character.toUpperCase());
          };

          const warnHyphenatedStyleName = function (name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }

            warnedStyleNames[name] = true;
            error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, 'ms-')));
          };

          const warnBadVendoredStyleName = function (name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }

            warnedStyleNames[name] = true;
            error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
          };

          const warnStyleValueWithSemicolon = function (name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }

            warnedStyleValues[value] = true;
            error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
          };

          const warnStyleValueIsNaN = function (name, value) {
            if (warnedForNaNValue) {
              return;
            }

            warnedForNaNValue = true;
            error('`NaN` is an invalid value for the `%s` css style property.', name);
          };

          const warnStyleValueIsInfinity = function (name, value) {
            if (warnedForInfinityValue) {
              return;
            }

            warnedForInfinityValue = true;
            error('`Infinity` is an invalid value for the `%s` css style property.', name);
          };

          warnValidStyle = function (name, value) {
            if (name.indexOf('-') > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }

            if (typeof value === 'number') {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        const warnValidStyle$1 = warnValidStyle;
        /**
     * Operations for dealing with CSS properties.
     */

        /**
     * This creates a string that is expected to be equivalent to the style
     * attribute generated by server-side rendering. It by-passes warnings and
     * security checks so it's not safe to use this value for anything other than
     * comparison. It is only used in DEV for SSR validation.
     */

        function createDangerousStringForStyles(styles) {
          {
            let serialized = '';
            let delimiter = '';

            for (const styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }

              const styleValue = styles[styleName];

              if (styleValue != null) {
                const isCustomProperty = styleName.indexOf('--') === 0;
                serialized += `${delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName))}:`;
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
              }
            }

            return serialized || null;
          }
        }
        /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */

        function setValueForStyles(node, styles) {
          const { style } = node;

          for (let styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }

            const isCustomProperty = styleName.indexOf('--') === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            const styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

            if (styleName === 'float') {
              styleName = 'cssFloat';
            }

            if (isCustomProperty) {
              style.setProperty(styleName, styleValue);
            } else {
              style[styleName] = styleValue;
            }
          }
        }

        function isValueEmpty(value) {
          return value == null || typeof value === 'boolean' || value === '';
        }
        /**
     * Given {color: 'red', overflow: 'hidden'} returns {
     *   color: 'color',
     *   overflowX: 'overflow',
     *   overflowY: 'overflow',
     * }. This can be read as "the overflowY property was set by the overflow
     * shorthand". That is, the values are the property that each was derived from.
     */

        function expandShorthandMap(styles) {
          const expanded = {};

          for (const key in styles) {
            const longhands = shorthandToLonghand[key] || [key];

            for (let i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }

          return expanded;
        }
        /**
     * When mixing shorthand and longhand property names, we warn during updates if
     * we expect an incorrect result to occur. In particular, we warn for:
     *
     * Updating a shorthand property (longhand gets overwritten):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
     *   becomes .style.font = 'baz'
     * Removing a shorthand property (longhand gets lost too):
     *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
     *   becomes .style.font = ''
     * Removing a longhand property (should revert to shorthand; doesn't):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
     *   becomes .style.fontVariant = ''
     */

        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }

            const expandedUpdates = expandShorthandMap(styleUpdates);
            const expandedStyles = expandShorthandMap(nextStyles);
            const warnedAbout = {};

            for (const key in expandedUpdates) {
              const originalKey = expandedUpdates[key];
              const correctOriginalKey = expandedStyles[key];

              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                const warningKey = `${originalKey},${correctOriginalKey}`;

                if (warnedAbout[warningKey]) {
                  continue;
                }

                warnedAbout[warningKey] = true;
                error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
              }
            }
          }
        } // For HTML, certain tags should omit their close tag. We keep a list for
        // those special-case tags.

        const omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true, // NOTE: menuitem's close tag should be omitted, but that causes problems.

        }; // `omittedCloseTags` except that `menuitem` should still have its closing tag.

        const voidElementTags = _assign({
          menuitem: true,
        }, omittedCloseTags);

        const HTML = '__html';

        function assertValidProps(tag, props) {
          if (!props) {
            return;
          } // Note the use of `==` which checks for null or undefined.

          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(`${tag} is a void element tag and must neither have \`children\` nor use \`dangerouslySetInnerHTML\`.`);
              }
            }
          }

          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
              }
            }

            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.');
              }
            }
          }

          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
            }
          }

          if (!(props.style == null || typeof props.style === 'object')) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
        }

        function isCustomComponent(tagName, props) {
          if (tagName.indexOf('-') === -1) {
            return typeof props.is === 'string';
          }

          switch (tagName) {
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
              return false;

            default:
              return true;
          }
        } // When adding attributes to the HTML or SVG allowed attribute list, be sure to
        // also add them to this module to ensure casing and incorrect name
        // warnings.

        const possibleStandardNames = {
          // HTML
          accept: 'accept',
          acceptcharset: 'acceptCharset',
          'accept-charset': 'acceptCharset',
          accesskey: 'accessKey',
          action: 'action',
          allowfullscreen: 'allowFullScreen',
          alt: 'alt',
          as: 'as',
          async: 'async',
          autocapitalize: 'autoCapitalize',
          autocomplete: 'autoComplete',
          autocorrect: 'autoCorrect',
          autofocus: 'autoFocus',
          autoplay: 'autoPlay',
          autosave: 'autoSave',
          capture: 'capture',
          cellpadding: 'cellPadding',
          cellspacing: 'cellSpacing',
          challenge: 'challenge',
          charset: 'charSet',
          checked: 'checked',
          children: 'children',
          cite: 'cite',
          class: 'className',
          classid: 'classID',
          classname: 'className',
          cols: 'cols',
          colspan: 'colSpan',
          content: 'content',
          contenteditable: 'contentEditable',
          contextmenu: 'contextMenu',
          controls: 'controls',
          controlslist: 'controlsList',
          coords: 'coords',
          crossorigin: 'crossOrigin',
          dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
          data: 'data',
          datetime: 'dateTime',
          default: 'default',
          defaultchecked: 'defaultChecked',
          defaultvalue: 'defaultValue',
          defer: 'defer',
          dir: 'dir',
          disabled: 'disabled',
          disablepictureinpicture: 'disablePictureInPicture',
          disableremoteplayback: 'disableRemotePlayback',
          download: 'download',
          draggable: 'draggable',
          enctype: 'encType',
          enterkeyhint: 'enterKeyHint',
          for: 'htmlFor',
          form: 'form',
          formmethod: 'formMethod',
          formaction: 'formAction',
          formenctype: 'formEncType',
          formnovalidate: 'formNoValidate',
          formtarget: 'formTarget',
          frameborder: 'frameBorder',
          headers: 'headers',
          height: 'height',
          hidden: 'hidden',
          high: 'high',
          href: 'href',
          hreflang: 'hrefLang',
          htmlfor: 'htmlFor',
          httpequiv: 'httpEquiv',
          'http-equiv': 'httpEquiv',
          icon: 'icon',
          id: 'id',
          innerhtml: 'innerHTML',
          inputmode: 'inputMode',
          integrity: 'integrity',
          is: 'is',
          itemid: 'itemID',
          itemprop: 'itemProp',
          itemref: 'itemRef',
          itemscope: 'itemScope',
          itemtype: 'itemType',
          keyparams: 'keyParams',
          keytype: 'keyType',
          kind: 'kind',
          label: 'label',
          lang: 'lang',
          list: 'list',
          loop: 'loop',
          low: 'low',
          manifest: 'manifest',
          marginwidth: 'marginWidth',
          marginheight: 'marginHeight',
          max: 'max',
          maxlength: 'maxLength',
          media: 'media',
          mediagroup: 'mediaGroup',
          method: 'method',
          min: 'min',
          minlength: 'minLength',
          multiple: 'multiple',
          muted: 'muted',
          name: 'name',
          nomodule: 'noModule',
          nonce: 'nonce',
          novalidate: 'noValidate',
          open: 'open',
          optimum: 'optimum',
          pattern: 'pattern',
          placeholder: 'placeholder',
          playsinline: 'playsInline',
          poster: 'poster',
          preload: 'preload',
          profile: 'profile',
          radiogroup: 'radioGroup',
          readonly: 'readOnly',
          referrerpolicy: 'referrerPolicy',
          rel: 'rel',
          required: 'required',
          reversed: 'reversed',
          role: 'role',
          rows: 'rows',
          rowspan: 'rowSpan',
          sandbox: 'sandbox',
          scope: 'scope',
          scoped: 'scoped',
          scrolling: 'scrolling',
          seamless: 'seamless',
          selected: 'selected',
          shape: 'shape',
          size: 'size',
          sizes: 'sizes',
          span: 'span',
          spellcheck: 'spellCheck',
          src: 'src',
          srcdoc: 'srcDoc',
          srclang: 'srcLang',
          srcset: 'srcSet',
          start: 'start',
          step: 'step',
          style: 'style',
          summary: 'summary',
          tabindex: 'tabIndex',
          target: 'target',
          title: 'title',
          type: 'type',
          usemap: 'useMap',
          value: 'value',
          width: 'width',
          wmode: 'wmode',
          wrap: 'wrap',
          // SVG
          about: 'about',
          accentheight: 'accentHeight',
          'accent-height': 'accentHeight',
          accumulate: 'accumulate',
          additive: 'additive',
          alignmentbaseline: 'alignmentBaseline',
          'alignment-baseline': 'alignmentBaseline',
          allowreorder: 'allowReorder',
          alphabetic: 'alphabetic',
          amplitude: 'amplitude',
          arabicform: 'arabicForm',
          'arabic-form': 'arabicForm',
          ascent: 'ascent',
          attributename: 'attributeName',
          attributetype: 'attributeType',
          autoreverse: 'autoReverse',
          azimuth: 'azimuth',
          basefrequency: 'baseFrequency',
          baselineshift: 'baselineShift',
          'baseline-shift': 'baselineShift',
          baseprofile: 'baseProfile',
          bbox: 'bbox',
          begin: 'begin',
          bias: 'bias',
          by: 'by',
          calcmode: 'calcMode',
          capheight: 'capHeight',
          'cap-height': 'capHeight',
          clip: 'clip',
          clippath: 'clipPath',
          'clip-path': 'clipPath',
          clippathunits: 'clipPathUnits',
          cliprule: 'clipRule',
          'clip-rule': 'clipRule',
          color: 'color',
          colorinterpolation: 'colorInterpolation',
          'color-interpolation': 'colorInterpolation',
          colorinterpolationfilters: 'colorInterpolationFilters',
          'color-interpolation-filters': 'colorInterpolationFilters',
          colorprofile: 'colorProfile',
          'color-profile': 'colorProfile',
          colorrendering: 'colorRendering',
          'color-rendering': 'colorRendering',
          contentscripttype: 'contentScriptType',
          contentstyletype: 'contentStyleType',
          cursor: 'cursor',
          cx: 'cx',
          cy: 'cy',
          d: 'd',
          datatype: 'datatype',
          decelerate: 'decelerate',
          descent: 'descent',
          diffuseconstant: 'diffuseConstant',
          direction: 'direction',
          display: 'display',
          divisor: 'divisor',
          dominantbaseline: 'dominantBaseline',
          'dominant-baseline': 'dominantBaseline',
          dur: 'dur',
          dx: 'dx',
          dy: 'dy',
          edgemode: 'edgeMode',
          elevation: 'elevation',
          enablebackground: 'enableBackground',
          'enable-background': 'enableBackground',
          end: 'end',
          exponent: 'exponent',
          externalresourcesrequired: 'externalResourcesRequired',
          fill: 'fill',
          fillopacity: 'fillOpacity',
          'fill-opacity': 'fillOpacity',
          fillrule: 'fillRule',
          'fill-rule': 'fillRule',
          filter: 'filter',
          filterres: 'filterRes',
          filterunits: 'filterUnits',
          floodopacity: 'floodOpacity',
          'flood-opacity': 'floodOpacity',
          floodcolor: 'floodColor',
          'flood-color': 'floodColor',
          focusable: 'focusable',
          fontfamily: 'fontFamily',
          'font-family': 'fontFamily',
          fontsize: 'fontSize',
          'font-size': 'fontSize',
          fontsizeadjust: 'fontSizeAdjust',
          'font-size-adjust': 'fontSizeAdjust',
          fontstretch: 'fontStretch',
          'font-stretch': 'fontStretch',
          fontstyle: 'fontStyle',
          'font-style': 'fontStyle',
          fontvariant: 'fontVariant',
          'font-variant': 'fontVariant',
          fontweight: 'fontWeight',
          'font-weight': 'fontWeight',
          format: 'format',
          from: 'from',
          fx: 'fx',
          fy: 'fy',
          g1: 'g1',
          g2: 'g2',
          glyphname: 'glyphName',
          'glyph-name': 'glyphName',
          glyphorientationhorizontal: 'glyphOrientationHorizontal',
          'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
          glyphorientationvertical: 'glyphOrientationVertical',
          'glyph-orientation-vertical': 'glyphOrientationVertical',
          glyphref: 'glyphRef',
          gradienttransform: 'gradientTransform',
          gradientunits: 'gradientUnits',
          hanging: 'hanging',
          horizadvx: 'horizAdvX',
          'horiz-adv-x': 'horizAdvX',
          horizoriginx: 'horizOriginX',
          'horiz-origin-x': 'horizOriginX',
          ideographic: 'ideographic',
          imagerendering: 'imageRendering',
          'image-rendering': 'imageRendering',
          in2: 'in2',
          in: 'in',
          inlist: 'inlist',
          intercept: 'intercept',
          k1: 'k1',
          k2: 'k2',
          k3: 'k3',
          k4: 'k4',
          k: 'k',
          kernelmatrix: 'kernelMatrix',
          kernelunitlength: 'kernelUnitLength',
          kerning: 'kerning',
          keypoints: 'keyPoints',
          keysplines: 'keySplines',
          keytimes: 'keyTimes',
          lengthadjust: 'lengthAdjust',
          letterspacing: 'letterSpacing',
          'letter-spacing': 'letterSpacing',
          lightingcolor: 'lightingColor',
          'lighting-color': 'lightingColor',
          limitingconeangle: 'limitingConeAngle',
          local: 'local',
          markerend: 'markerEnd',
          'marker-end': 'markerEnd',
          markerheight: 'markerHeight',
          markermid: 'markerMid',
          'marker-mid': 'markerMid',
          markerstart: 'markerStart',
          'marker-start': 'markerStart',
          markerunits: 'markerUnits',
          markerwidth: 'markerWidth',
          mask: 'mask',
          maskcontentunits: 'maskContentUnits',
          maskunits: 'maskUnits',
          mathematical: 'mathematical',
          mode: 'mode',
          numoctaves: 'numOctaves',
          offset: 'offset',
          opacity: 'opacity',
          operator: 'operator',
          order: 'order',
          orient: 'orient',
          orientation: 'orientation',
          origin: 'origin',
          overflow: 'overflow',
          overlineposition: 'overlinePosition',
          'overline-position': 'overlinePosition',
          overlinethickness: 'overlineThickness',
          'overline-thickness': 'overlineThickness',
          paintorder: 'paintOrder',
          'paint-order': 'paintOrder',
          panose1: 'panose1',
          'panose-1': 'panose1',
          pathlength: 'pathLength',
          patterncontentunits: 'patternContentUnits',
          patterntransform: 'patternTransform',
          patternunits: 'patternUnits',
          pointerevents: 'pointerEvents',
          'pointer-events': 'pointerEvents',
          points: 'points',
          pointsatx: 'pointsAtX',
          pointsaty: 'pointsAtY',
          pointsatz: 'pointsAtZ',
          prefix: 'prefix',
          preservealpha: 'preserveAlpha',
          preserveaspectratio: 'preserveAspectRatio',
          primitiveunits: 'primitiveUnits',
          property: 'property',
          r: 'r',
          radius: 'radius',
          refx: 'refX',
          refy: 'refY',
          renderingintent: 'renderingIntent',
          'rendering-intent': 'renderingIntent',
          repeatcount: 'repeatCount',
          repeatdur: 'repeatDur',
          requiredextensions: 'requiredExtensions',
          requiredfeatures: 'requiredFeatures',
          resource: 'resource',
          restart: 'restart',
          result: 'result',
          results: 'results',
          rotate: 'rotate',
          rx: 'rx',
          ry: 'ry',
          scale: 'scale',
          security: 'security',
          seed: 'seed',
          shaperendering: 'shapeRendering',
          'shape-rendering': 'shapeRendering',
          slope: 'slope',
          spacing: 'spacing',
          specularconstant: 'specularConstant',
          specularexponent: 'specularExponent',
          speed: 'speed',
          spreadmethod: 'spreadMethod',
          startoffset: 'startOffset',
          stddeviation: 'stdDeviation',
          stemh: 'stemh',
          stemv: 'stemv',
          stitchtiles: 'stitchTiles',
          stopcolor: 'stopColor',
          'stop-color': 'stopColor',
          stopopacity: 'stopOpacity',
          'stop-opacity': 'stopOpacity',
          strikethroughposition: 'strikethroughPosition',
          'strikethrough-position': 'strikethroughPosition',
          strikethroughthickness: 'strikethroughThickness',
          'strikethrough-thickness': 'strikethroughThickness',
          string: 'string',
          stroke: 'stroke',
          strokedasharray: 'strokeDasharray',
          'stroke-dasharray': 'strokeDasharray',
          strokedashoffset: 'strokeDashoffset',
          'stroke-dashoffset': 'strokeDashoffset',
          strokelinecap: 'strokeLinecap',
          'stroke-linecap': 'strokeLinecap',
          strokelinejoin: 'strokeLinejoin',
          'stroke-linejoin': 'strokeLinejoin',
          strokemiterlimit: 'strokeMiterlimit',
          'stroke-miterlimit': 'strokeMiterlimit',
          strokewidth: 'strokeWidth',
          'stroke-width': 'strokeWidth',
          strokeopacity: 'strokeOpacity',
          'stroke-opacity': 'strokeOpacity',
          suppresscontenteditablewarning: 'suppressContentEditableWarning',
          suppresshydrationwarning: 'suppressHydrationWarning',
          surfacescale: 'surfaceScale',
          systemlanguage: 'systemLanguage',
          tablevalues: 'tableValues',
          targetx: 'targetX',
          targety: 'targetY',
          textanchor: 'textAnchor',
          'text-anchor': 'textAnchor',
          textdecoration: 'textDecoration',
          'text-decoration': 'textDecoration',
          textlength: 'textLength',
          textrendering: 'textRendering',
          'text-rendering': 'textRendering',
          to: 'to',
          transform: 'transform',
          typeof: 'typeof',
          u1: 'u1',
          u2: 'u2',
          underlineposition: 'underlinePosition',
          'underline-position': 'underlinePosition',
          underlinethickness: 'underlineThickness',
          'underline-thickness': 'underlineThickness',
          unicode: 'unicode',
          unicodebidi: 'unicodeBidi',
          'unicode-bidi': 'unicodeBidi',
          unicoderange: 'unicodeRange',
          'unicode-range': 'unicodeRange',
          unitsperem: 'unitsPerEm',
          'units-per-em': 'unitsPerEm',
          unselectable: 'unselectable',
          valphabetic: 'vAlphabetic',
          'v-alphabetic': 'vAlphabetic',
          values: 'values',
          vectoreffect: 'vectorEffect',
          'vector-effect': 'vectorEffect',
          version: 'version',
          vertadvy: 'vertAdvY',
          'vert-adv-y': 'vertAdvY',
          vertoriginx: 'vertOriginX',
          'vert-origin-x': 'vertOriginX',
          vertoriginy: 'vertOriginY',
          'vert-origin-y': 'vertOriginY',
          vhanging: 'vHanging',
          'v-hanging': 'vHanging',
          videographic: 'vIdeographic',
          'v-ideographic': 'vIdeographic',
          viewbox: 'viewBox',
          viewtarget: 'viewTarget',
          visibility: 'visibility',
          vmathematical: 'vMathematical',
          'v-mathematical': 'vMathematical',
          vocab: 'vocab',
          widths: 'widths',
          wordspacing: 'wordSpacing',
          'word-spacing': 'wordSpacing',
          writingmode: 'writingMode',
          'writing-mode': 'writingMode',
          x1: 'x1',
          x2: 'x2',
          x: 'x',
          xchannelselector: 'xChannelSelector',
          xheight: 'xHeight',
          'x-height': 'xHeight',
          xlinkactuate: 'xlinkActuate',
          'xlink:actuate': 'xlinkActuate',
          xlinkarcrole: 'xlinkArcrole',
          'xlink:arcrole': 'xlinkArcrole',
          xlinkhref: 'xlinkHref',
          'xlink:href': 'xlinkHref',
          xlinkrole: 'xlinkRole',
          'xlink:role': 'xlinkRole',
          xlinkshow: 'xlinkShow',
          'xlink:show': 'xlinkShow',
          xlinktitle: 'xlinkTitle',
          'xlink:title': 'xlinkTitle',
          xlinktype: 'xlinkType',
          'xlink:type': 'xlinkType',
          xmlbase: 'xmlBase',
          'xml:base': 'xmlBase',
          xmllang: 'xmlLang',
          'xml:lang': 'xmlLang',
          xmlns: 'xmlns',
          'xml:space': 'xmlSpace',
          xmlnsxlink: 'xmlnsXlink',
          'xmlns:xlink': 'xmlnsXlink',
          xmlspace: 'xmlSpace',
          y1: 'y1',
          y2: 'y2',
          y: 'y',
          ychannelselector: 'yChannelSelector',
          z: 'z',
          zoomandpan: 'zoomAndPan',
        };
        const ariaProperties = {
          'aria-current': 0,
          // state
          'aria-details': 0,
          'aria-disabled': 0,
          // state
          'aria-hidden': 0,
          // state
          'aria-invalid': 0,
          // state
          'aria-keyshortcuts': 0,
          'aria-label': 0,
          'aria-roledescription': 0,
          // Widget Attributes
          'aria-autocomplete': 0,
          'aria-checked': 0,
          'aria-expanded': 0,
          'aria-haspopup': 0,
          'aria-level': 0,
          'aria-modal': 0,
          'aria-multiline': 0,
          'aria-multiselectable': 0,
          'aria-orientation': 0,
          'aria-placeholder': 0,
          'aria-pressed': 0,
          'aria-readonly': 0,
          'aria-required': 0,
          'aria-selected': 0,
          'aria-sort': 0,
          'aria-valuemax': 0,
          'aria-valuemin': 0,
          'aria-valuenow': 0,
          'aria-valuetext': 0,
          // Live Region Attributes
          'aria-atomic': 0,
          'aria-busy': 0,
          'aria-live': 0,
          'aria-relevant': 0,
          // Drag-and-Drop Attributes
          'aria-dropeffect': 0,
          'aria-grabbed': 0,
          // Relationship Attributes
          'aria-activedescendant': 0,
          'aria-colcount': 0,
          'aria-colindex': 0,
          'aria-colspan': 0,
          'aria-controls': 0,
          'aria-describedby': 0,
          'aria-errormessage': 0,
          'aria-flowto': 0,
          'aria-labelledby': 0,
          'aria-owns': 0,
          'aria-posinset': 0,
          'aria-rowcount': 0,
          'aria-rowindex': 0,
          'aria-rowspan': 0,
          'aria-setsize': 0,
        };
        const warnedProperties = {};
        const rARIA = new RegExp(`^(aria)-[${ATTRIBUTE_NAME_CHAR}]*$`);
        const rARIACamel = new RegExp(`^(aria)[A-Z][${ATTRIBUTE_NAME_CHAR}]*$`);
        const hasOwnProperty$1 = Object.prototype.hasOwnProperty;

        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }

            if (rARIACamel.test(name)) {
              const ariaName = `aria-${name.slice(4).toLowerCase()}`;
              const correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
              // DOM properties, then it is an invalid aria-* attribute.

              if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
              } // aria-* attributes should be lowercase; suggest the lowercase version.

              if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }

            if (rARIA.test(name)) {
              const lowerCasedName = name.toLowerCase();
              const standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
              // DOM properties, then it is an invalid aria-* attribute.

              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              } // aria-* attributes should be lowercase; suggest the lowercase version.

              if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }

        function warnInvalidARIAProps(type, props) {
          {
            const invalidProps = [];

            for (const key in props) {
              const isValid = validateProperty(type, key);

              if (!isValid) {
                invalidProps.push(key);
              }
            }

            const unknownPropString = invalidProps.map(prop => `\`${prop}\``).join(', ');

            if (invalidProps.length === 1) {
              error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
            }
          }
        }

        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }

          warnInvalidARIAProps(type, props);
        }

        let didWarnValueNull = false;

        function validateProperties$1(type, props) {
          {
            if (type !== 'input' && type !== 'textarea' && type !== 'select') {
              return;
            }

            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;

              if (type === 'select' && props.multiple) {
                error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
              } else {
                error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
              }
            }
          }
        }

        let validateProperty$1 = function () {};

        {
          const warnedProperties$1 = {};
          const _hasOwnProperty = Object.prototype.hasOwnProperty;
          const EVENT_NAME_REGEX = /^on./;
          const INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          const rARIA$1 = new RegExp(`^(aria)-[${ATTRIBUTE_NAME_CHAR}]*$`);
          const rARIACamel$1 = new RegExp(`^(aria)[A-Z][${ATTRIBUTE_NAME_CHAR}]*$`);

          validateProperty$1 = function (tagName, name, value, eventRegistry) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }

            const lowerCasedName = name.toLowerCase();

            if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
              error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
              warnedProperties$1[name] = true;
              return true;
            } // We can't rely on the event system being injected on the server.

            if (eventRegistry != null) {
              const { registrationNameDependencies } = eventRegistry;
              const { possibleRegistrationNames } = eventRegistry;

              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }

              const registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

              if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }

              if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              // If no event plugins have been injected, we are in a server environment.
              // So we can't tell if the event name is correct for sure, but we can filter
              // out known bad ones like `onclick`. We can't suggest a specific replacement though.
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
              }

              warnedProperties$1[name] = true;
              return true;
            } // Let the ARIA attribute hook validate ARIA attributes

            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }

            if (lowerCasedName === 'innerhtml') {
              error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
              warnedProperties$1[name] = true;
              return true;
            }

            if (lowerCasedName === 'aria') {
              error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
              warnedProperties$1[name] = true;
              return true;
            }

            if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
              error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
              warnedProperties$1[name] = true;
              return true;
            }

            if (typeof value === 'number' && isNaN(value)) {
              error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
              warnedProperties$1[name] = true;
              return true;
            }

            const propertyInfo = getPropertyInfo(name);
            const isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              const standardName = possibleStandardNames[lowerCasedName];

              if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              // Unknown attributes should have lowercase casing since that's how they
              // will be cased anyway with server rendering.
              error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }

            if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }

              warnedProperties$1[name] = true;
              return true;
            } // Now that we've validated casing, do not validate
            // data types for reserved props

            if (isReserved) {
              return true;
            } // Warn when a known attribute is a bad type

            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            } // Warn when passing the strings 'false' or 'true' into a boolean prop

            if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }

            return true;
          };
        }

        const warnUnknownProperties = function (type, props, eventRegistry) {
          {
            const unknownProps = [];

            for (const key in props) {
              const isValid = validateProperty$1(type, key, props[key], eventRegistry);

              if (!isValid) {
                unknownProps.push(key);
              }
            }

            const unknownPropString = unknownProps.map(prop => `\`${prop}\``).join(', ');

            if (unknownProps.length === 1) {
              error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
            }
          }
        };

        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }

          warnUnknownProperties(type, props, eventRegistry);
        }

        const IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        const IS_NON_DELEGATED = 1 << 1;
        const IS_CAPTURE_PHASE = 1 << 2;
        const IS_REPLAYED = 1 << 4; // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
        // we call willDeferLaterForLegacyFBSupport, thus not bailing out
        // will result in endless cycles like an infinite loop.
        // We also don't want to defer during event replaying.

        const SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */

        function getEventTarget(nativeEvent) {
          // Fallback to nativeEvent.srcElement for IE9
          // https://github.com/facebook/react/issues/12506
          let target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
          // @see http://www.quirksmode.org/js/events_properties.html

          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }

        let restoreImpl = null;
        let restoreTarget = null;
        let restoreQueue = null;

        function restoreStateOfTarget(target) {
          // We perform this translation at the end of the event loop so that we
          // always receive the correct fiber here
          const internalInstance = getInstanceFromNode(target);

          if (!internalInstance) {
            // Unmounted
            return;
          }

          if (!(typeof restoreImpl === 'function')) {
            {
              throw Error('setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.');
            }
          }

          const { stateNode } = internalInstance; // Guard against Fiber being unmounted.

          if (stateNode) {
            const _props = getFiberCurrentPropsFromNode(stateNode);

            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }

        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }

        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }

        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }

        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }

          const target = restoreTarget;
          const queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);

          if (queuedTargets) {
            for (let i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        } // the renderer. Such as when we're dispatching events or if third party
        // libraries need to call batchedUpdates. Eventually, this API will go away when
        // everything is batched by default. We'll then have a similar API to opt-out of
        // scheduled work and instead do synchronous work.
        // Defaults

        let batchedUpdatesImpl = function (fn, bookkeeping) {
          return fn(bookkeeping);
        };

        let discreteUpdatesImpl = function (fn, a, b, c, d) {
          return fn(a, b, c, d);
        };

        let flushDiscreteUpdatesImpl = function () {};

        let batchedEventUpdatesImpl = batchedUpdatesImpl;
        let isInsideEventHandler = false;
        let isBatchingEventUpdates = false;

        function finishEventHandler() {
          // Here we wait until all updates have propagated, which is important
          // when using controlled components within layers:
          // https://github.com/facebook/react/issues/1698
          // Then we restore state of any controlled component.
          const controlledComponentsHavePendingUpdates = needsStateRestore();

          if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }

        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            // If we are currently inside another batch, we need to wait until it
            // fully completes before restoring state.
            return fn(bookkeeping);
          }

          isInsideEventHandler = true;

          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }

        function batchedEventUpdates(fn, a, b) {
          if (isBatchingEventUpdates) {
            // If we are currently inside another batch, we need to wait until it
            // fully completes before restoring state.
            return fn(a, b);
          }

          isBatchingEventUpdates = true;

          try {
            return batchedEventUpdatesImpl(fn, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }

        function discreteUpdates(fn, a, b, c, d) {
          const prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;

          try {
            return discreteUpdatesImpl(fn, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;

            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }

        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          {
            if (!isInsideEventHandler) {
              flushDiscreteUpdatesImpl();
            }
          }
        }

        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }

        function isInteractive(tag) {
          return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
        }

        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
              return !!(props.disabled && isInteractive(type));

            default:
              return false;
          }
        }
        /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */

        function getListener(inst, registrationName) {
          const { stateNode } = inst;

          if (stateNode === null) {
            // Work in progress (ex: onload events in incremental mode).
            return null;
          }

          const props = getFiberCurrentPropsFromNode(stateNode);

          if (props === null) {
            // Work in progress.
            return null;
          }

          const listener = props[registrationName];

          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }

          if (!(!listener || typeof listener === 'function')) {
            {
              throw Error(`Expected \`${registrationName}\` listener to be a function, instead got a value of \`${typeof listener}\` type.`);
            }
          }

          return listener;
        }

        let passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
        // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

        if (canUseDOM) {
          try {
            const options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

            Object.defineProperty(options, 'passive', {
              get() {
                passiveBrowserEventsSupported = true;
              },
            });
            window.addEventListener('test', options, options);
            window.removeEventListener('test', options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }

        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          const funcArgs = Array.prototype.slice.call(arguments, 3);

          try {
            func.apply(context, funcArgs);
          } catch (error) {
            this.onError(error);
          }
        }

        let invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          // In DEV mode, we swap out invokeGuardedCallback for a special version
          // that plays more nicely with the browser's DevTools. The idea is to preserve
          // "Pause on exceptions" behavior. Because React wraps all user-provided
          // functions in invokeGuardedCallback, and the production version of
          // invokeGuardedCallback uses a try-catch, all user exceptions are treated
          // like caught exceptions, and the DevTools won't pause unless the developer
          // takes the extra step of enabling pause on caught exceptions. This is
          // unintuitive, though, because even though React has caught the error, from
          // the developer's perspective, the error is uncaught.
          //
          // To preserve the expected "Pause on exceptions" behavior, we don't use a
          // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
          // DOM node, and call the user-provided callback from inside an event handler
          // for that fake event. If the callback throws, the error is "captured" using
          // a global event handler. But because the error happens in a different
          // event loop context, it does not interrupt the normal program flow.
          // Effectively, this gives us try-catch behavior without actually using
          // try-catch. Neat!
          // Check that the browser supports the APIs we need to implement our special
          // DEV version of invokeGuardedCallback
          if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
            const fakeNode = document.createElement('react');

            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              // If document doesn't exist we know for sure we will crash in this method
              // when we call document.createEvent(). However this can cause confusing
              // errors: https://github.com/facebookincubator/create-react-app/issues/3482
              // So we preemptively throw with a better message instead.
              if (!(typeof document !== 'undefined')) {
                {
                  throw Error('The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.');
                }
              }

              const evt = document.createEvent('Event');
              let didCall = false; // Keeps track of whether the user-provided callback threw an error. We
              // set this to true at the beginning, then set it to false right after
              // calling the function. If the function errors, `didError` will never be
              // set to false. This strategy works even if the browser is flaky and
              // fails to call our global error handler, because it doesn't rely on
              // the error event at all.

              let didError = true; // Keeps track of the value of window.event so that we can reset it
              // during the callback to let user code access window.event in the
              // browsers that support it.

              const windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
              // dispatching: https://github.com/facebook/react/issues/13688

              const windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

              function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.

                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                  window.event = windowEvent;
                }
              } // Create an event handler for our fake event. We will synchronously
              // dispatch our fake event using `dispatchEvent`. Inside the handler, we
              // call the user-provided callback.

              const funcArgs = Array.prototype.slice.call(arguments, 3);

              function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              } // Create a global error event handler. We use this to capture the value
              // that was thrown. It's possible that this error handler will fire more
              // than once; for example, if non-React code also calls `dispatchEvent`
              // and a handler for that event throws. We should be resilient to most of
              // those cases. Even if our error event handler fires more than once, the
              // last error event is always used. If the callback actually does error,
              // we know that the last error event is the correct one, because it's not
              // possible for anything else to have happened in between our callback
              // erroring and the code that follows the `dispatchEvent` call below. If
              // the callback doesn't error, but the error event was fired, we know to
              // ignore it because `didError` will be false, as described above.

              let error; // Use this to track whether the error event is ever called.

              let didSetError = false;
              let isCrossOriginError = false;

              function handleWindowError(event) {
                error = event.error;
                didSetError = true;

                if (error === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }

                if (event.defaultPrevented) {
                  // Some other error handler has prevented default.
                  // Browsers silence the error report if this happens.
                  // We'll remember this to later decide whether to log it or not.
                  if (error != null && typeof error === 'object') {
                    try {
                      error._suppressLogging = true;
                    } catch (inner) { // Ignore.
                    }
                  }
                }
              } // Create a fake event type.

              var evtType = `react-${name || 'invokeguardedcallback'}`; // Attach our event handlers

              window.addEventListener('error', handleWindowError);
              fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
              // errors, it will trigger our global error handler.

              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);

              if (windowEventDescriptor) {
                Object.defineProperty(window, 'event', windowEventDescriptor);
              }

              if (didCall && didError) {
                if (!didSetError) {
                  // The callback errored, but the error event never fired.
                  error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                } else if (isCrossOriginError) {
                  error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
                }

                this.onError(error);
              } // Remove our event listeners

              window.removeEventListener('error', handleWindowError);

              if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        const invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        let hasError = false;
        let caughtError = null; // Used by event system to capture/rethrow the first error.

        let hasRethrowError = false;
        let rethrowError = null;
        const reporter = {
          onError(error) {
            hasError = true;
            caughtError = error;
          },
        };
        /**
     * Call a function while guarding against errors that happens within it.
     * Returns an error if it throws, otherwise null.
     *
     * In production, this is implemented using a try-catch. The reason we don't
     * use a try-catch directly is so that we can swap out a different
     * implementation in DEV mode.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */

        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        /**
     * Same as invokeGuardedCallback, but instead of returning an error, it stores
     * it in a global so it can be rethrown by `rethrowCaughtError` later.
     * TODO: See if caughtError and rethrowError can be unified.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */

        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);

          if (hasError) {
            const error = clearCaughtError();

            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error;
            }
          }
        }
        /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */

        function rethrowCaughtError() {
          if (hasRethrowError) {
            const error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
          }
        }

        function hasCaughtError() {
          return hasError;
        }

        function clearCaughtError() {
          if (hasError) {
            const error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
          }
          {
            {
              throw Error('clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
            }
          }
        }
        /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     *
     * Note that this module is currently shared and assumed to be stateless.
     * If this becomes an actual Map, that will break.
     */

        function get(key) {
          return key._reactInternals;
        }

        function has(key) {
          return key._reactInternals !== undefined;
        }

        function set(key, value) {
          key._reactInternals = value;
        } // Don't change these two values. They're used by React Dev Tools.

        const NoFlags =
    /*                      */
    0;
        const PerformedWork =
    /*                */
    1; // You can change the rest (and add more).

        const Placement =
    /*                    */
    2;
        const Update =
    /*                       */
    4;
        const PlacementAndUpdate =
    /*           */
    6;
        const Deletion =
    /*                     */
    8;
        const ContentReset =
    /*                 */
    16;
        const Callback =
    /*                     */
    32;
        const DidCapture =
    /*                   */
    64;
        const Ref =
    /*                          */
    128;
        const Snapshot =
    /*                     */
    256;
        const Passive =
    /*                      */
    512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

        const PassiveUnmountPendingDev =
    /*     */
    8192;
        const Hydrating =
    /*                    */
    1024;
        const HydratingAndUpdate =
    /*           */
    1028; // Passive & Update & Callback & Ref & Snapshot

        const LifecycleEffectMask =
    /*          */
    932; // Union of all host effects

        const HostEffectMask =
    /*               */
    2047; // These are not really side effects, but we still reuse this field.

        const Incomplete =
    /*                   */
    2048;
        const ShouldCapture =
    /*                */
    4096;
        const ForceUpdateForLegacySuspense =
    /* */
    16384; // Static tags describe aspects of a fiber that are not specific to a render,

        const { ReactCurrentOwner } = ReactSharedInternals;

        function getNearestMountedFiber(fiber) {
          let node = fiber;
          let nearestMounted = fiber;

          if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            let nextNode = node;

            do {
              node = nextNode;

              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
              }

              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }

          if (node.tag === HostRoot) {
            // TODO: Check if this was a nested HostRoot when used with
            // renderContainerIntoSubtree.
            return nearestMounted;
          } // If we didn't hit the root, that means that we're in an disconnected tree
          // that has been unmounted.

          return null;
        }

        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            let suspenseState = fiber.memoizedState;

            if (suspenseState === null) {
              const current = fiber.alternate;

              if (current !== null) {
                suspenseState = current.memoizedState;
              }
            }

            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }

          return null;
        }

        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }

        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }

        function isMounted(component) {
          {
            const owner = ReactCurrentOwner.current;

            if (owner !== null && owner.tag === ClassComponent) {
              const ownerFiber = owner;
              const instance = ownerFiber.stateNode;

              if (!instance._warnedAboutRefsInRender) {
                error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
              }

              instance._warnedAboutRefsInRender = true;
            }
          }
          const fiber = get(component);

          if (!fiber) {
            return false;
          }

          return getNearestMountedFiber(fiber) === fiber;
        }

        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error('Unable to find node on an unmounted component.');
            }
          }
        }

        function findCurrentFiberUsingSlowPath(fiber) {
          const { alternate } = fiber;

          if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            const nearestMounted = getNearestMountedFiber(fiber);

            if (!(nearestMounted !== null)) {
              {
                throw Error('Unable to find node on an unmounted component.');
              }
            }

            if (nearestMounted !== fiber) {
              return null;
            }

            return fiber;
          } // If we have two possible branches, we'll walk backwards up to the root
          // to see what path the root points to. On the way we may hit one of the
          // special cases and we'll deal with them.

          let a = fiber;
          let b = alternate;

          while (true) {
            const parentA = a.return;

            if (parentA === null) {
              // We're at the root.
              break;
            }

            const parentB = parentA.alternate;

            if (parentB === null) {
              // There is no alternate. This is an unusual case. Currently, it only
              // happens when a Suspense component is hidden. An extra fragment fiber
              // is inserted in between the Suspense fiber and its children. Skip
              // over this extra fragment fiber and proceed to the next parent.
              const nextParent = parentA.return;

              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              } // If there's no parent, we're at the root.

              break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.

            if (parentA.child === parentB.child) {
              let { child } = parentA;

              while (child) {
                if (child === a) {
                  // We've determined that A is the current branch.
                  assertIsMounted(parentA);
                  return fiber;
                }

                if (child === b) {
                  // We've determined that B is the current branch.
                  assertIsMounted(parentA);
                  return alternate;
                }

                child = child.sibling;
              } // We should never have an alternate for any mounting node. So the only
              // way this could possibly happen is if this was unmounted, if at all.

              {
                {
                  throw Error('Unable to find node on an unmounted component.');
                }
              }
            }

            if (a.return !== b.return) {
              // The return pointer of A and the return pointer of B point to different
              // fibers. We assume that return pointers never criss-cross, so A must
              // belong to the child set of A.return, and B must belong to the child
              // set of B.return.
              a = parentA;
              b = parentB;
            } else {
              // The return pointers point to the same fiber. We'll have to use the
              // default, slow path: scan the child sets of each parent alternate to see
              // which child belongs to which set.
              //
              // Search parent A's child set
              let didFindChild = false;
              let _child = parentA.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }

                _child = _child.sibling;
              }

              if (!didFindChild) {
                // Search parent B's child set
                _child = parentB.child;

                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }

                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }

                  _child = _child.sibling;
                }

                if (!didFindChild) {
                  {
                    throw Error('Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.');
                  }
                }
              }
            }

            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          } // If the root is not a host container, we're in a disconnected tree. I.e.
          // unmounted.

          if (!(a.tag === HostRoot)) {
            {
              throw Error('Unable to find node on an unmounted component.');
            }
          }

          if (a.stateNode.current === a) {
            // We've determined that A is the current branch.
            return fiber;
          } // Otherwise B has to be current branch.

          return alternate;
        }

        function findCurrentHostFiber(parent) {
          const currentParent = findCurrentFiberUsingSlowPath(parent);

          if (!currentParent) {
            return null;
          } // Next we'll drill down this component to find the first HostComponent/Text.

          let node = currentParent;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === currentParent) {
              return null;
            }

            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          } // Flow needs the return null here, but ESLint complains about it.
          // eslint-disable-next-line no-unreachable

          return null;
        }

        function findCurrentHostFiberWithNoPortals(parent) {
          const currentParent = findCurrentFiberUsingSlowPath(parent);

          if (!currentParent) {
            return null;
          } // Next we'll drill down this component to find the first HostComponent/Text.

          let node = currentParent;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === currentParent) {
              return null;
            }

            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          } // Flow needs the return null here, but ESLint complains about it.
          // eslint-disable-next-line no-unreachable

          return null;
        }

        function doesFiberContain(parentFiber, childFiber) {
          let node = childFiber;
          const parentFiberAlternate = parentFiber.alternate;

          while (node !== null) {
            if (node === parentFiber || node === parentFiberAlternate) {
              return true;
            }

            node = node.return;
          }

          return false;
        }

        let attemptUserBlockingHydration;

        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }

        let attemptContinuousHydration;

        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }

        let attemptHydrationAtCurrentPriority;

        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }

        let attemptHydrationAtPriority;

        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        } // TODO: Upgrade this definition once we're on a newer version of Flow that

        let hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

        const queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
        // if the last target was dehydrated.

        let queuedFocus = null;
        let queuedDrag = null;
        let queuedMouse = null; // For pointer events there can be one latest event per pointerId.

        const queuedPointers = new Map();
        const queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

        const queuedExplicitHydrationTargets = [];

        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }

        const discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
          'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];

        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }

        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            targetContainers: [targetContainer],
          };
        }

        function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          const queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        } // Resets the replaying for this type of continuous event to no event.

        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'focusin':
            case 'focusout':
              queuedFocus = null;
              break;

            case 'dragenter':
            case 'dragleave':
              queuedDrag = null;
              break;

            case 'mouseover':
            case 'mouseout':
              queuedMouse = null;
              break;

            case 'pointerover':
            case 'pointerout':
            {
              const { pointerId } = nativeEvent;
              queuedPointers.delete(pointerId);
              break;
            }

            case 'gotpointercapture':
            case 'lostpointercapture':
            {
              const _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }

        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            const queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

            if (blockedOn !== null) {
              const _fiber2 = getInstanceFromNode(blockedOn);

              if (_fiber2 !== null) {
                // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
              }
            }

            return queuedEvent;
          } // If we have already queued this exact event, then it's because
          // the different event systems have different DOM event listeners.
          // We can accumulate the flags, and the targetContainers, and
          // store a single event to be replayed.

          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          const { targetContainers } = existingQueuedEvent;

          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }

          return existingQueuedEvent;
        }

        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          // These set relatedTarget to null because the replayed event will be treated as if we
          // moved from outside the window (no target) onto the target once it hydrates.
          // Instead of mutating we could clone the event.
          switch (domEventName) {
            case 'focusin':
            {
              const focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }

            case 'dragenter':
            {
              const dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }

            case 'mouseover':
            {
              const mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }

            case 'pointerover':
            {
              const pointerEvent = nativeEvent;
              const { pointerId } = pointerEvent;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }

            case 'gotpointercapture':
            {
              const _pointerEvent = nativeEvent;
              const _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }

          return false;
        } // Check if this target is unblocked. Returns true if it's unblocked.

        function attemptExplicitHydrationTarget(queuedTarget) {
          // TODO: This function shares a lot of logic with attemptToDispatchEvent.
          // Try to unify them. It's a bit tricky since it would require two return
          // values.
          const targetInst = getClosestInstanceFromNode(queuedTarget.target);

          if (targetInst !== null) {
            const nearestMounted = getNearestMountedFiber(targetInst);

            if (nearestMounted !== null) {
              const { tag } = nearestMounted;

              if (tag === SuspenseComponent) {
                const instance = getSuspenseInstanceFromFiber(nearestMounted);

                if (instance !== null) {
                  // We're blocked on hydrating this boundary.
                  // Increase its priority.
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.lanePriority, () => {
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, () => {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                const root = nearestMounted.stateNode;

                if (root.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                  // a root other than sync.

                  return;
                }
              }
            }
          }

          queuedTarget.blockedOn = null;
        }

        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }

          const { targetContainers } = queuedEvent;

          while (targetContainers.length > 0) {
            const targetContainer = targetContainers[0];
            const nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

            if (nextBlockedOn !== null) {
              // We're still blocked. Try again later.
              const _fiber3 = getInstanceFromNode(nextBlockedOn);

              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }

              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            } // This target container was successfully dispatched. Try the next.

            targetContainers.shift();
          }

          return true;
        }

        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }

        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false; // First replay discrete events.

          while (queuedDiscreteEvents.length > 0) {
            const nextDiscreteEvent = queuedDiscreteEvents[0];

            if (nextDiscreteEvent.blockedOn !== null) {
              // We're still blocked.
              // Increase the priority of this boundary to unblock
              // the next discrete event.
              const _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);

              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }

              break;
            }

            const { targetContainers } = nextDiscreteEvent;

            while (targetContainers.length > 0) {
              const targetContainer = targetContainers[0];
              const nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);

              if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                nextDiscreteEvent.blockedOn = nextBlockedOn;
                break;
              } // This target container was successfully dispatched. Try the next.

              targetContainers.shift();
            }

            if (nextDiscreteEvent.blockedOn === null) {
              // We've successfully replayed the first event. Let's try the next one.
              queuedDiscreteEvents.shift();
            }
          } // Next replay any continuous events.

          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }

          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }

          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }

          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }

        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;

            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
              // now unblocked. This first might not actually be unblocked yet.
              // We could check it early to avoid scheduling an unnecessary callback.

              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }

        function retryIfBlockedOn(unblocked) {
          // Mark anything that was blocked on this as no longer blocked
          // and eligible for a replay.
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.

            for (let i = 1; i < queuedDiscreteEvents.length; i++) {
              const queuedEvent = queuedDiscreteEvents[i];

              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }

          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }

          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }

          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }

          const unblock = function (queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
          };

          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);

          for (let _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            const queuedTarget = queuedExplicitHydrationTargets[_i];

            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }

          while (queuedExplicitHydrationTargets.length > 0) {
            const nextExplicitTarget = queuedExplicitHydrationTargets[0];

            if (nextExplicitTarget.blockedOn !== null) {
              // We're still blocked.
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);

              if (nextExplicitTarget.blockedOn === null) {
                // We're unblocked.
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }

        const DiscreteEvent = 0;
        const UserBlockingEvent = 1;
        const ContinuousEvent = 2;
        /**
     * Generate a mapping of standard vendor prefixes using the defined style property and event name.
     *
     * @param {string} styleProp
     * @param {string} eventName
     * @returns {object}
     */

        function makePrefixMap(styleProp, eventName) {
          const prefixes = {};
          prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes[`Webkit${styleProp}`] = `webkit${eventName}`;
          prefixes[`Moz${styleProp}`] = `moz${eventName}`;
          return prefixes;
        }
        /**
     * A list of event names to a configurable list of vendor prefixes.
     */

        const vendorPrefixes = {
          animationend: makePrefixMap('Animation', 'AnimationEnd'),
          animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
          animationstart: makePrefixMap('Animation', 'AnimationStart'),
          transitionend: makePrefixMap('Transition', 'TransitionEnd'),
        };
        /**
     * Event names that have already been detected and prefixed (if applicable).
     */

        const prefixedEventNames = {};
        /**
     * Element to check for prefixes on.
     */

        let style = {};
        /**
     * Bootstrap if a DOM exists.
     */

        if (canUseDOM) {
          style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
          // the un-prefixed "animation" and "transition" properties are defined on the
          // style object but the events that fire will still be prefixed, so we need
          // to check if the un-prefixed events are usable, and if not remove them from the map.

          if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          } // Same as above

          if (!('TransitionEvent' in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        /**
     * Attempts to determine the correct vendor prefixed event name.
     *
     * @param {string} eventName
     * @returns {string}
     */

        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } if (!vendorPrefixes[eventName]) {
            return eventName;
          }

          const prefixMap = vendorPrefixes[eventName];

          for (const styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }

          return eventName;
        }

        const ANIMATION_END = getVendorPrefixedEventName('animationend');
        const ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
        const ANIMATION_START = getVendorPrefixedEventName('animationstart');
        const TRANSITION_END = getVendorPrefixedEventName('transitionend');
        const topLevelEventsToReactNames = new Map();
        const eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
        // the code required to apply the same logic for event prioritization and that of the
        // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
        // duplication (for which there would be quite a bit). For the events that are not needed
        // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
        // array of top level events.
        // Lastly, we ignore prettier so we can keep the formatting sane.
        // prettier-ignore

        const discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
          'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
          'focusout', 'blur', // Careful!
          'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
        const otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];
        const userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

        const continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
        /**
     * Turns
     * ['abort', ...]
     *
     * into
     *
     * topLevelEventsToReactNames = new Map([
     *   ['abort', 'onAbort'],
     * ]);
     *
     * and registers them.
     */

        function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
          // As the event types are in pairs of two, we need to iterate
          // through in twos. The events are in pairs of two to save code
          // and improve init perf of processing this array, as it will
          // result in far fewer object allocations and property accesses
          // if we only use three arrays to process all the categories of
          // instead of tuples.
          for (let i = 0; i < eventTypes.length; i += 2) {
            const topEvent = eventTypes[i];
            const event = eventTypes[i + 1];
            const capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            const reactName = `on${capitalizedEvent}`;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [topEvent]);
          }
        }

        function setEventPriorities(eventTypes, priority) {
          for (let i = 0; i < eventTypes.length; i++) {
            eventPriorities.set(eventTypes[i], priority);
          }
        }

        function getEventPriorityForPluginSystem(domEventName) {
          const priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
          // want to warn if we can't detect the priority
          // for the event.

          return priority === undefined ? ContinuousEvent : priority;
        }

        function registerSimpleEvents() {
          registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          setEventPriorities(otherDiscreteEvents, DiscreteEvent);
        }

        const Scheduler_now = Scheduler.unstable_now;
        {
          // Provide explicit error message when production+profiling bundle of e.g.
          // react-dom is used with production (non-profiling) bundle of
          // scheduler/tracing
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error('It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling');
            }
          }
        } // ascending numbers so we can compare them like numbers. They start at 90 to
        // avoid clashing with Scheduler's priorities.

        const ImmediatePriority = 99;
        const UserBlockingPriority = 98;
        const NormalPriority = 97;
        const LowPriority = 96;
        const IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

        const NoPriority = 90;
        const initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

        const SyncLanePriority = 15;
        const SyncBatchedLanePriority = 14;
        const InputDiscreteHydrationLanePriority = 13;
        const InputDiscreteLanePriority = 12;
        const InputContinuousHydrationLanePriority = 11;
        const InputContinuousLanePriority = 10;
        const DefaultHydrationLanePriority = 9;
        const DefaultLanePriority = 8;
        const TransitionHydrationPriority = 7;
        const TransitionPriority = 6;
        const RetryLanePriority = 5;
        const SelectiveHydrationLanePriority = 4;
        const IdleHydrationLanePriority = 3;
        const IdleLanePriority = 2;
        const OffscreenLanePriority = 1;
        const NoLanePriority = 0;
        const TotalLanes = 31;
        const NoLanes =
    /*                        */
    0;
        const NoLane =
    /*                          */
    0;
        const SyncLane =
    /*                        */
    1;
        const SyncBatchedLane =
    /*                 */
    2;
        const InputDiscreteHydrationLane =
    /*      */
    4;
        const InputDiscreteLanes =
    /*                    */
    24;
        const InputContinuousHydrationLane =
    /*           */
    32;
        const InputContinuousLanes =
    /*                  */
    192;
        const DefaultHydrationLane =
    /*            */
    256;
        const DefaultLanes =
    /*                   */
    3584;
        const TransitionHydrationLane =
    /*                */
    4096;
        const TransitionLanes =
    /*                       */
    4186112;
        const RetryLanes =
    /*                            */
    62914560;
        const SomeRetryLane =
    /*                  */
    33554432;
        const SelectiveHydrationLane =
    /*          */
    67108864;
        const NonIdleLanes =
    /*                                 */
    134217727;
        const IdleHydrationLane =
    /*               */
    134217728;
        const IdleLanes =
    /*                             */
    805306368;
        const OffscreenLane =
    /*                   */
    1073741824;
        const NoTimestamp = -1;

        function setCurrentUpdateLanePriority(newLanePriority) {} // "Registers" used to "return" multiple values
        // Used by getHighestPriorityLanes and getNextLanes:

        let return_highestLanePriority = DefaultLanePriority;

        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
          }

          if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
          }

          if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
          }

          const inputDiscreteLanes = InputDiscreteLanes & lanes;

          if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
          }

          if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
          }

          const inputContinuousLanes = InputContinuousLanes & lanes;

          if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
          }

          if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
          }

          const defaultLanes = DefaultLanes & lanes;

          if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
          }

          if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
          }

          const transitionLanes = TransitionLanes & lanes;

          if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
          }

          const retryLanes = RetryLanes & lanes;

          if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
          }

          if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
          }

          if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
          }

          const idleLanes = IdleLanes & lanes;

          if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
          }

          if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
          }

          {
            error('Should have found matching lanes. This is a bug in React.');
          } // This shouldn't be reachable, but as a fallback, return the entire bitmask.

          return_highestLanePriority = DefaultLanePriority;
          return lanes;
        }

        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;

            case UserBlockingPriority:
              return InputContinuousLanePriority;

            case NormalPriority:
            case LowPriority:
              // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
              return DefaultLanePriority;

            case IdlePriority:
              return IdleLanePriority;

            default:
              return NoLanePriority;
          }
        }

        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;

            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;

            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;

            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;

            case NoLanePriority:
              return NoPriority;

            default:
            {
              {
                throw Error(`Invalid update priority: ${lanePriority}. This is a bug in React.`);
              }
            }
          }
        }

        function getNextLanes(root, wipLanes) {
          // Early bailout if there's no pending work left.
          const { pendingLanes } = root;

          if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
          }

          let nextLanes = NoLanes;
          let nextLanePriority = NoLanePriority;
          const { expiredLanes } = root;
          const { suspendedLanes } = root;
          const { pingedLanes } = root; // Check if any work has expired.

          if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
          } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            const nonIdlePendingLanes = pendingLanes & NonIdleLanes;

            if (nonIdlePendingLanes !== NoLanes) {
              const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            } else {
              // The only remaining work is Idle.
              const unblockedLanes = pendingLanes & ~suspendedLanes;

              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          }

          if (nextLanes === NoLanes) {
            // This should only be reachable if we're suspended
            // TODO: Consider warning in this path if a fallback timer is not scheduled.
            return NoLanes;
          } // If there are higher priority lanes, we'll include them even if they
          // are suspended.

          nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
          // it and we'll lose our progress. We should only do this if the new lanes are
          // higher priority.

          if (wipLanes !== NoLanes && wipLanes !== nextLanes // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      && (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            const wipLanePriority = return_highestLanePriority;

            if (nextLanePriority <= wipLanePriority) {
              return wipLanes;
            }
            return_highestLanePriority = nextLanePriority;
          } // Check for entangled lanes and add them to the batch.
          //
          // A lane is said to be entangled with another when it's not allowed to render
          // in a batch that does not also include the other lane. Typically we do this
          // when multiple updates have the same source, and we only want to respond to
          // the most recent event from that source.
          //
          // Note that we apply entanglements *after* checking for partial work above.
          // This means that if a lane is entangled during an interleaved event while
          // it's already rendering, we won't interrupt it. This is intentional, since
          // entanglement is usually "best effort": we'll try our best to render the
          // lanes in the same batch, but it's not worth throwing out partially
          // completed work in order to do it.
          //
          // For those exceptions where entanglement is semantically important, like
          // useMutableSource, we should ensure that there is no partial work at the
          // time we apply the entanglement.

          const { entangledLanes } = root;

          if (entangledLanes !== NoLanes) {
            const { entanglements } = root;
            let lanes = nextLanes & entangledLanes;

            while (lanes > 0) {
              const index = pickArbitraryLaneIndex(lanes);
              const lane = 1 << index;
              nextLanes |= entanglements[index];
              lanes &= ~lane;
            }
          }

          return nextLanes;
        }

        function getMostRecentEventTime(root, lanes) {
          const { eventTimes } = root;
          let mostRecentEventTime = NoTimestamp;

          while (lanes > 0) {
            const index = pickArbitraryLaneIndex(lanes);
            const lane = 1 << index;
            const eventTime = eventTimes[index];

            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }

            lanes &= ~lane;
          }

          return mostRecentEventTime;
        }

        function computeExpirationTime(lane, currentTime) {
          // TODO: Expiration heuristic is constant per lane, so could use a map.
          getHighestPriorityLanes(lane);
          const priority = return_highestLanePriority;

          if (priority >= InputContinuousLanePriority) {
            // User interactions should expire slightly more quickly.
            //
            // NOTE: This is set to the corresponding constant as in Scheduler.js. When
            // we made it larger, a product metric in www regressed, suggesting there's
            // a user interaction that's being starved by a series of synchronous
            // updates. If that theory is correct, the proper solution is to fix the
            // starvation. However, this scenario supports the idea that expiration
            // times are an important safeguard when starvation does happen.
            //
            // Also note that, in the case of user input specifically, this will soon no
            // longer be an issue because we plan to make user input synchronous by
            // default (until you enter `startTransition`, of course.)
            //
            // If weren't planning to make these updates synchronous soon anyway, I
            // would probably make this number a configurable parameter.
            return currentTime + 250;
          } if (priority >= TransitionPriority) {
            return currentTime + 5000;
          }
          // Anything idle priority or lower should never expire.
          return NoTimestamp;
        }

        function markStarvedLanesAsExpired(root, currentTime) {
          // TODO: This gets called every time we yield. We can optimize by storing
          // the earliest expiration time on the root. Then use that to quickly bail out
          // of this function.
          const { pendingLanes } = root;
          const { suspendedLanes } = root;
          const { pingedLanes } = root;
          const { expirationTimes } = root; // Iterate through the pending lanes and check if we've reached their
          // expiration time. If so, we'll assume the update is being starved and mark
          // it as expired to force it to finish.

          let lanes = pendingLanes;

          while (lanes > 0) {
            const index = pickArbitraryLaneIndex(lanes);
            const lane = 1 << index;
            const expirationTime = expirationTimes[index];

            if (expirationTime === NoTimestamp) {
              // Found a pending lane with no expiration time. If it's not suspended, or
              // if it's pinged, assume it's CPU-bound. Compute a new expiration time
              // using the current time.
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              // This lane expired
              root.expiredLanes |= lane;
            }

            lanes &= ~lane;
          }
        } // This returns the highest priority pending lanes regardless of whether they

        function getLanesToRetrySynchronouslyOnError(root) {
          const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }

          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }

          return NoLanes;
        }

        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }

        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }

        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }

        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        } // To ensure consistency across multiple updates in the same event, this should
        // be a pure function, so that it always returns the same lane for given inputs.

        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;

            case SyncLanePriority:
              return SyncLane;

            case SyncBatchedLanePriority:
              return SyncBatchedLane;

            case InputDiscreteLanePriority:
            {
              const _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

              if (_lane === NoLane) {
              // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
              }

              return _lane;
            }

            case InputContinuousLanePriority:
            {
              const _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

              if (_lane2 === NoLane) {
              // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
              }

              return _lane2;
            }

            case DefaultLanePriority:
            {
              let _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

              if (_lane3 === NoLane) {
              // If all the default lanes are already being worked on, look for a
              // lane in the transition range.
                _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

                if (_lane3 === NoLane) {
                // All the transition lanes are taken, too. This should be very
                // rare, but as a last resort, pick a default lane. This will have
                // the effect of interrupting the current work-in-progress render.
                  _lane3 = pickArbitraryLane(DefaultLanes);
                }
              }

              return _lane3;
            }

            case TransitionPriority: // Should be handled by findTransitionLane instead

            case RetryLanePriority:
              // Should be handled by findRetryLane instead
              break;

            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

              if (lane === NoLane) {
                lane = pickArbitraryLane(IdleLanes);
              }

              return lane;
          }

          {
            {
              throw Error(`Invalid update priority: ${lanePriority}. This is a bug in React.`);
            }
          }
        } // To ensure consistency across multiple updates in the same event, this should
        // be pure function, so that it always returns the same lane for given inputs.

        function findTransitionLane(wipLanes, pendingLanes) {
          // First look for lanes that are completely unclaimed, i.e. have no
          // pending work.
          let lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

          if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

            if (lane === NoLane) {
              // If everything is being worked on, pick any lane. This has the
              // effect of interrupting the current work-in-progress.
              lane = pickArbitraryLane(TransitionLanes);
            }
          }

          return lane;
        } // To ensure consistency across multiple updates in the same event, this should
        // be pure function, so that it always returns the same lane for given inputs.

        function findRetryLane(wipLanes) {
          // This is a fork of `findUpdateLane` designed specifically for Suspense
          // "retries" — a special update that attempts to flip a Suspense boundary
          // from its placeholder state to its primary/resolved state.
          let lane = pickArbitraryLane(RetryLanes & ~wipLanes);

          if (lane === NoLane) {
            lane = pickArbitraryLane(RetryLanes);
          }

          return lane;
        }

        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }

        function getLowestPriorityLane(lanes) {
          // This finds the most significant non-zero bit.
          const index = 31 - clz32(lanes);
          return index < 0 ? NoLanes : 1 << index;
        }

        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }

        function pickArbitraryLane(lanes) {
          // This wrapper function gets inlined. Only exists so to communicate that it
          // doesn't matter which bit is selected; you can pick any bit without
          // affecting the algorithms where its used. Here I'm using
          // getHighestPriorityLane because it requires the fewest operations.
          return getHighestPriorityLane(lanes);
        }

        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }

        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }

        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }

        function isSubsetOfLanes(set, subset) {
          return (set & subset) === subset;
        }

        function mergeLanes(a, b) {
          return a | b;
        }

        function removeLanes(set, subset) {
          return set & ~subset;
        } // Seems redundant, but it changes the type from a single lane (used for
        // updates) to a group of lanes (used for flushing work).

        function laneToLanes(lane) {
          return lane;
        }

        function higherPriorityLane(a, b) {
          // This works because the bit ranges decrease in priority as you go left.
          return a !== NoLane && a < b ? a : b;
        }

        function createLaneMap(initial) {
          // Intentionally pushing one by one.
          // https://v8.dev/blog/elements-kinds#avoid-creating-holes
          const laneMap = [];

          for (let i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }

          return laneMap;
        }

        function markRootUpdated(root, updateLane, eventTime) {
          root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
          // it's not practical to try every single possible combination. We need a
          // heuristic to decide which lanes to attempt to render, and in which batches.
          // For now, we use the same heuristic as in the old ExpirationTimes model:
          // retry any lane at equal or lower priority, but don't try updates at higher
          // priority without also including the lower priority updates. This works well
          // when considering updates across different priority levels, but isn't
          // sufficient for updates within the same priority, since we want to treat
          // those updates as parallel.
          // Unsuspend any update at equal or lower priority.

          const higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

          root.suspendedLanes &= higherPriorityLanes;
          root.pingedLanes &= higherPriorityLanes;
          const { eventTimes } = root;
          const index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
          // recent event, and we assume time is monotonically increasing.

          eventTimes[index] = eventTime;
        }

        function markRootSuspended(root, suspendedLanes) {
          root.suspendedLanes |= suspendedLanes;
          root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

          const { expirationTimes } = root;
          let lanes = suspendedLanes;

          while (lanes > 0) {
            const index = pickArbitraryLaneIndex(lanes);
            const lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
          }
        }

        function markRootPinged(root, pingedLanes, eventTime) {
          root.pingedLanes |= root.suspendedLanes & pingedLanes;
        }

        function markDiscreteUpdatesExpired(root) {
          root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
        }

        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }

        function markRootMutableRead(root, updateLane) {
          root.mutableReadLanes |= updateLane & root.pendingLanes;
        }

        function markRootFinished(root, remainingLanes) {
          const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
          root.pendingLanes = remainingLanes; // Let's try everything again

          root.suspendedLanes = 0;
          root.pingedLanes = 0;
          root.expiredLanes &= remainingLanes;
          root.mutableReadLanes &= remainingLanes;
          root.entangledLanes &= remainingLanes;
          const { entanglements } = root;
          const { eventTimes } = root;
          const { expirationTimes } = root; // Clear the lanes that no longer have pending work

          let lanes = noLongerPendingLanes;

          while (lanes > 0) {
            const index = pickArbitraryLaneIndex(lanes);
            const lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
          }
        }

        function markRootEntangled(root, entangledLanes) {
          root.entangledLanes |= entangledLanes;
          const { entanglements } = root;
          let lanes = entangledLanes;

          while (lanes > 0) {
            const index = pickArbitraryLaneIndex(lanes);
            const lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
          }
        }

        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
        // Based on:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

        const { log } = Math;
        const { LN2 } = Math;

        function clz32Fallback(lanes) {
          if (lanes === 0) {
            return 32;
          }

          return 31 - (log(lanes) / LN2 | 0) | 0;
        } // Intentionally not named imports because Rollup would use dynamic dispatch for

        const UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority;
        const runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

        let _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
        // We'd like to remove this but it's not clear if this is safe.

        function setEnabled(enabled) {
          _enabled = !!enabled;
        }

        function isEnabled() {
          return _enabled;
        }

        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          const eventPriority = getEventPriorityForPluginSystem(domEventName);
          let listenerWrapper;

          switch (eventPriority) {
            case DiscreteEvent:
              listenerWrapper = dispatchDiscreteEvent;
              break;

            case UserBlockingEvent:
              listenerWrapper = dispatchUserBlockingUpdate;
              break;

            case ContinuousEvent:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }

          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }

        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          }
          discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
        }

        function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
          }
        }

        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }

          let allowReplay = true;
          {
            // TODO: replaying capture phase events is currently broken
            // because we used to do it during top-level native bubble handlers
            // but now we use different bubble and capture handlers.
            // In eager mode, we attach capture listeners early, so we need
            // to filter them out until we fix the logic to handle them correctly.
            // This could've been outside the flag but I put it inside to reduce risk.
            allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
          }

          if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
              domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
          }

          const blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

          if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) {
              clearIfContinuousEvent(domEventName, nativeEvent);
            }

            return;
          }

          if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
              // This this to be replayed later once the target is available.
              queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }

            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              return;
            } // We need to clear only if we didn't queue because
            // queueing is accummulative.

            clearIfContinuousEvent(domEventName, nativeEvent);
          } // This is not replayable so we'll invoke it but without a target,
          // in case the event system needs to trace it.

          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

        function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          // TODO: Warn if _enabled is false.
          const nativeEventTarget = getEventTarget(nativeEvent);
          let targetInst = getClosestInstanceFromNode(nativeEventTarget);

          if (targetInst !== null) {
            const nearestMounted = getNearestMountedFiber(targetInst);

            if (nearestMounted === null) {
              // This tree has been unmounted already. Dispatch without a target.
              targetInst = null;
            } else {
              const { tag } = nearestMounted;

              if (tag === SuspenseComponent) {
                const instance = getSuspenseInstanceFromFiber(nearestMounted);

                if (instance !== null) {
                  // Queue the event to be replayed later. Abort dispatching since we
                  // don't want this event dispatched twice through the event system.
                  // TODO: If this is the first discrete event in the queue. Schedule an increased
                  // priority for this boundary.
                  return instance;
                } // This shouldn't happen, something went wrong but to avoid blocking
                // the whole system, dispatch the event without a target.
                // TODO: Warn.

                targetInst = null;
              } else if (tag === HostRoot) {
                const root = nearestMounted.stateNode;

                if (root.hydrate) {
                  // If this happens during a replay something went wrong and it might block
                  // the whole system.
                  return getContainerFromFiber(nearestMounted);
                }

                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
              }
            }
          }

          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.

          return null;
        }

        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }

        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }

        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive,
          });
          return listener;
        }

        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive,
          });
          return listener;
        }
        /**
     * These variables store information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     *
     *
     */

        let root = null;
        let startText = null;
        let fallbackText = null;

        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }

        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }

        function getData() {
          if (fallbackText) {
            return fallbackText;
          }

          let start;
          const startValue = startText;
          const startLength = startValue.length;
          let end;
          const endValue = getText();
          const endLength = endValue.length;

          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }

          const minEnd = startLength - start;

          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }

          const sliceTail = end > 1 ? 1 - end : undefined;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }

        function getText() {
          if ('value' in root) {
            return root.value;
          }

          return root.textContent;
        }
        /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {number} Normalized `charCode` property.
     */

        function getEventCharCode(nativeEvent) {
          let charCode;
          const { keyCode } = nativeEvent;

          if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            // IE8 does not implement `charCode`, but `keyCode` has the correct value.
            charCode = keyCode;
          } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
          // report Enter as charCode 10 when ctrl is pressed.

          if (charCode === 10) {
            charCode = 13;
          } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
          // Must not discard the (non-)printable Enter-key.

          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }

          return 0;
        }

        function functionThatReturnsTrue() {
          return true;
        }

        function functionThatReturnsFalse() {
          return false;
        } // This is intentionally a factory so that we have different returned constructors.
        // If we had a single constructor, it would be megamorphic and engines would deopt.

        function createSyntheticEvent(Interface) {
          /**
       * Synthetic events are dispatched by event plugins, typically in response to a
       * top-level event delegation handler.
       *
       * These systems should generally use pooling to reduce the frequency of garbage
       * collection. The system should check `isPersistent` to determine whether the
       * event should be released into the pool after being dispatched. Users that
       * need a persisted event should invoke `persist`.
       *
       * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
       * normalizing browser quirks. Subclasses do not necessarily have to implement a
       * DOM interface; custom application-specific events can also subclass this.
       */
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;

            for (const _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }

              const normalize = Interface[_propName];

              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }

            const defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }

            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }

          _assign(SyntheticBaseEvent.prototype, {
            preventDefault() {
              this.defaultPrevented = true;
              const event = this.nativeEvent;

              if (!event) {
                return;
              }

              if (event.preventDefault) {
                event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
              } else if (typeof event.returnValue !== 'unknown') {
                event.returnValue = false;
              }

              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation() {
              const event = this.nativeEvent;

              if (!event) {
                return;
              }

              if (event.stopPropagation) {
                event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
              } else if (typeof event.cancelBubble !== 'unknown') {
                // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
              }

              this.isPropagationStopped = functionThatReturnsTrue;
            },

            /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
            persist() { // Modern event system doesn't use pooling.
            },

            /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
            isPersistent: functionThatReturnsTrue,
          });

          return SyntheticBaseEvent;
        }
        /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

        const EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0,
        };
        const SyntheticEvent = createSyntheticEvent(EventInterface);

        const UIEventInterface = _assign({}, EventInterface, {
          view: 0,
          detail: 0,
        });

        const SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        let lastMovementX;
        let lastMovementY;
        let lastMouseEvent;

        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }

            lastMouseEvent = event;
          }
        }
        /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

        const MouseEventInterface = _assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX(event) {
            if ('movementX' in event) {
              return event.movementX;
            }

            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY(event) {
            if ('movementY' in event) {
              return event.movementY;
            } // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.

            return lastMovementY;
          },
        });

        const SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

        const DragEventInterface = _assign({}, MouseEventInterface, {
          dataTransfer: 0,
        });

        const SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

        const FocusEventInterface = _assign({}, UIEventInterface, {
          relatedTarget: 0,
        });

        const SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        /**
     * @interface Event
     * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
     */

        const AnimationEventInterface = _assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0,
        });

        const SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */

        const ClipboardEventInterface = _assign({}, EventInterface, {
          clipboardData(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
          },
        });

        const SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */

        const CompositionEventInterface = _assign({}, EventInterface, {
          data: 0,
        });

        const SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */
        // Happens to share the same list for now.

        const SyntheticInputEvent = SyntheticCompositionEvent;
        /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */

        const normalizeKey = {
          Esc: 'Escape',
          Spacebar: ' ',
          Left: 'ArrowLeft',
          Up: 'ArrowUp',
          Right: 'ArrowRight',
          Down: 'ArrowDown',
          Del: 'Delete',
          Win: 'OS',
          Menu: 'ContextMenu',
          Apps: 'ContextMenu',
          Scroll: 'ScrollLock',
          MozPrintableKey: 'Unidentified',
        };
        /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */

        const translateToKey = {
          8: 'Backspace',
          9: 'Tab',
          12: 'Clear',
          13: 'Enter',
          16: 'Shift',
          17: 'Control',
          18: 'Alt',
          19: 'Pause',
          20: 'CapsLock',
          27: 'Escape',
          32: ' ',
          33: 'PageUp',
          34: 'PageDown',
          35: 'End',
          36: 'Home',
          37: 'ArrowLeft',
          38: 'ArrowUp',
          39: 'ArrowRight',
          40: 'ArrowDown',
          45: 'Insert',
          46: 'Delete',
          112: 'F1',
          113: 'F2',
          114: 'F3',
          115: 'F4',
          116: 'F5',
          117: 'F6',
          118: 'F7',
          119: 'F8',
          120: 'F9',
          121: 'F10',
          122: 'F11',
          123: 'F12',
          144: 'NumLock',
          145: 'ScrollLock',
          224: 'Meta',
        };
        /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */

        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            const key = normalizeKey[nativeEvent.key] || nativeEvent.key;

            if (key !== 'Unidentified') {
              return key;
            }
          } // Browser does not implement `key`, polyfill as much of it as we can.

          if (nativeEvent.type === 'keypress') {
            const charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.

            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
          }

          if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
            // While user keyboard layout determines the actual meaning of each
            // `keyCode` value, almost all function keys have a universal value.
            return translateToKey[nativeEvent.keyCode] || 'Unidentified';
          }

          return '';
        }
        /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */

        const modifierKeyToProp = {
          Alt: 'altKey',
          Control: 'ctrlKey',
          Meta: 'metaKey',
          Shift: 'shiftKey',
        }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
        // getModifierState. If getModifierState is not supported, we map it to a set of
        // modifier keys exposed by the event. In this case, Lock-keys are not supported.

        function modifierStateGetter(keyArg) {
          const syntheticEvent = this;
          const { nativeEvent } = syntheticEvent;

          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }

          const keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }

        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

        const KeyboardEventInterface = _assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') {
              return getEventCharCode(event);
            }

            return 0;
          },
          keyCode(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') {
              return event.keyCode;
            }

            return 0;
          },
          which(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') {
              return getEventCharCode(event);
            }

            if (event.type === 'keydown' || event.type === 'keyup') {
              return event.keyCode;
            }

            return 0;
          },
        });

        const SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        /**
     * @interface PointerEvent
     * @see http://www.w3.org/TR/pointerevents/
     */

        const PointerEventInterface = _assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0,
        });

        const SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */

        const TouchEventInterface = _assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState,
        });

        const SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        /**
     * @interface Event
     * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
     */

        const TransitionEventInterface = _assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0,
        });

        const SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

        const WheelEventInterface = _assign({}, MouseEventInterface, {
          deltaX(event) {
            return 'deltaX' in event ? event.deltaX // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
          },
          deltaY(event) {
            return 'deltaY' in event ? event.deltaY // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              : 'wheelDeltaY' in event ? -event.wheelDeltaY // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                : 'wheelDelta' in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0,
        });

        const SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        const END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

        const START_KEYCODE = 229;
        const canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
        let documentMode = null;

        if (canUseDOM && 'documentMode' in document) {
          documentMode = document.documentMode;
        } // Webkit offers a very useful `textInput` event that can be used to
        // directly represent `beforeInput`. The IE `textinput` event is not as
        // useful, so we don't use it.

        const canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
        // by the native compositionend event may be incorrect. Japanese ideographic
        // spaces, for instance (\u3000) are not recorded correctly.

        const useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        const SPACEBAR_CODE = 32;
        const SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

        function registerEvents() {
          registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
          registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
          registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
          registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
        } // Track whether we've ever handled a keypress on the space key.

        let hasSpaceKeypress = false;
        /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */

        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        /**
     * Translate native top level events into event types.
     */

        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case 'compositionstart':
              return 'onCompositionStart';

            case 'compositionend':
              return 'onCompositionEnd';

            case 'compositionupdate':
              return 'onCompositionUpdate';
          }
        }
        /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     */

        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
        }
        /**
     * Does our fallback mode think that this event is the end of composition?
     */

        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'keyup':
              // Command keys insert or clear IME input.
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

            case 'keydown':
              // Expect IME keyCode on each keydown. If we get any other
              // code we must have exited earlier.
              return nativeEvent.keyCode !== START_KEYCODE;

            case 'keypress':
            case 'mousedown':
            case 'focusout':
              // Events are not possible without cancelling IME.
              return true;

            default:
              return false;
          }
        }
        /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */

        function getDataFromCustomEvent(nativeEvent) {
          const { detail } = nativeEvent;

          if (typeof detail === 'object' && 'data' in detail) {
            return detail.data;
          }

          return null;
        }
        /**
     * Check if a composition event was triggered by Korean IME.
     * Our fallback mode does not work well with IE's Korean IME,
     * so just use native composition events when Korean IME is used.
     * Although CompositionEvent.locale property is deprecated,
     * it is available in IE, where our fallback mode is enabled.
     *
     * @param {object} nativeEvent
     * @return {boolean}
     */

        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === 'ko';
        } // Track the current IME composition status, if any.

        let isComposing = false;
        /**
     * @return {?object} A SyntheticCompositionEvent.
     */

        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          let eventType;
          let fallbackData;

          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = 'onCompositionStart';
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = 'onCompositionEnd';
          }

          if (!eventType) {
            return null;
          }

          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === 'onCompositionEnd') {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }

          const listeners = accumulateTwoPhaseListeners(targetInst, eventType);

          if (listeners.length > 0) {
            const event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners,
            });

            if (fallbackData) {
              // Inject data generated from fallback path into the synthetic event.
              // This matches the property of native CompositionEventInterface.
              event.data = fallbackData;
            } else {
              const customData = getDataFromCustomEvent(nativeEvent);

              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }

        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'compositionend':
              return getDataFromCustomEvent(nativeEvent);

            case 'keypress':
              /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
              var { which } = nativeEvent;

              if (which !== SPACEBAR_CODE) {
                return null;
              }

              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;

            case 'textInput':
              // Record the characters to be added to the DOM.
              var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
              // it at the keypress level and bail immediately. Android Chrome
              // doesn't give us keycodes, so we need to ignore it.

              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }

              return chars;

            default:
              // For other native event types, do nothing.
              return null;
          }
        }
        /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     */

        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          // If we are currently composing (IME) and using a fallback to do so,
          // try to extract the composed characters from the fallback object.
          // If composition event is available, we extract a string only at
          // compositionevent, otherwise extract it at fallback events.
          if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              const chars = getData();
              reset();
              isComposing = false;
              return chars;
            }

            return null;
          }

          switch (domEventName) {
            case 'paste':
              // If a paste event occurs after a keypress, throw out the input
              // chars. Paste events should not lead to BeforeInput events.
              return null;

            case 'keypress':
              /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
              if (!isKeypressCommand(nativeEvent)) {
                // IE fires the `keypress` event when a user types an emoji via
                // Touch keyboard of Windows.  In such a case, the `char` property
                // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                // is 2, the property `which` does not represent an emoji correctly.
                // In such a case, we directly return the `char` property instead of
                // using `which`.
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }

              return null;

            case 'compositionend':
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

            default:
              return null;
          }
        }
        /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @return {?object} A SyntheticInputEvent.
     */

        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          let chars;

          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          } // If no characters are being inserted, no BeforeInput event should
          // be fired.

          if (!chars) {
            return null;
          }

          const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

          if (listeners.length > 0) {
            const event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners,
            });
            event.data = chars;
          }
        }
        /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */

        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */

        const supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          'datetime-local': true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true,
        };

        function isTextInputElement(elem) {
          const nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

          if (nodeName === 'input') {
            return !!supportedInputTypes[elem.type];
          }

          if (nodeName === 'textarea') {
            return true;
          }

          return false;
        }
        /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */

        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }

          const eventName = `on${eventNameSuffix}`;
          let isSupported = (eventName in document);

          if (!isSupported) {
            const element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
          }

          return isSupported;
        }

        function registerEvents$1() {
          registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
        }

        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          // Flag this event loop as needing state restore.
          enqueueStateRestore(target);
          const listeners = accumulateTwoPhaseListeners(inst, 'onChange');

          if (listeners.length > 0) {
            const event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners,
            });
          }
        }
        /**
     * For IE shims
     */

        let activeElement = null;
        let activeElementInst = null;
        /**
     * SECTION: handle `change` event
     */

        function shouldUseChangeEvent(elem) {
          const nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
        }

        function manualDispatchChangeEvent(nativeEvent) {
          const dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
          // other events and have it go through ReactBrowserEventEmitter. Since it
          // doesn't, we manually listen for the events and so we have to enqueue and
          // process the abstract event manually.
          //
          // Batching is necessary here in order to ensure that all event handlers run
          // before the next rerender (including event handlers attached to ancestor
          // elements instead of directly on the input). Without this, controlled
          // components don't work properly in conjunction with event bubbling because
          // the component is rerendered and the value reverted before all the event
          // handlers can run. See https://github.com/facebook/react/issues/708.

          batchedUpdates(runEventInBatch, dispatchQueue);
        }

        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }

        function getInstIfValueChanged(targetInst) {
          const targetNode = getNodeFromInstance(targetInst);

          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }

        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === 'change') {
            return targetInst;
          }
        }
        /**
     * SECTION: handle `input` event
     */

        let isInputEventSupported = false;

        if (canUseDOM) {
          // IE9 claims to support the input event but fails to trigger it when
          // deleting text, so we ignore its input events.
          isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
        }
        /**
     * (For IE <=9) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */

        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent('onpropertychange', handlePropertyChange);
        }
        /**
     * (For IE <=9) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */

        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }

          activeElement.detachEvent('onpropertychange', handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        /**
     * (For IE <=9) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */

        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== 'value') {
            return;
          }

          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }

        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === 'focusout') {
            stopWatchingForValueChange();
          }
        } // For IE8 and IE9.

        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
            // On the selectionchange event, the target is just document which isn't
            // helpful for us so just check activeElement instead.
            //
            // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
            // propertychange on the first input event after setting `value` from a
            // script and fires only keydown, keypress, keyup. Catching keyup usually
            // gets it and catching keydown lets us fire an event for the first
            // keystroke if user does a key repeat (it'll be a little delayed: right
            // before the second keystroke). Other input methods (e.g., paste) seem to
            // fire selectionchange normally.
            return getInstIfValueChanged(activeElementInst);
          }
        }
        /**
     * SECTION: handle `click` event
     */

        function shouldUseClickEvent(elem) {
          // Use the `click` event to detect changes to checkbox and radio inputs.
          // This approach works across all browsers, whereas `change` does not fire
          // until `blur` in IE8.
          const { nodeName } = elem;
          return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
        }

        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === 'click') {
            return getInstIfValueChanged(targetInst);
          }
        }

        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === 'input' || domEventName === 'change') {
            return getInstIfValueChanged(targetInst);
          }
        }

        function handleControlledInputBlur(node) {
          const state = node._wrapperState;

          if (!state || !state.controlled || node.type !== 'number') {
            return;
          }

          {
            // If controlled, assign the value attribute to the current value on blur
            setDefaultValue(node, 'number', node.value);
          }
        }
        /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */

        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          const targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          let getTargetInstFunc; let
            handleEventFunc;

          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }

          if (getTargetInstFunc) {
            const inst = getTargetInstFunc(domEventName, targetInst);

            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }

          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          } // When blurring, set the value attribute for number inputs

          if (domEventName === 'focusout') {
            handleControlledInputBlur(targetNode);
          }
        }

        function registerEvents$2() {
          registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
          registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
          registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
          registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
        }
        /**
     * For almost every interaction we care about, there will be both a top-level
     * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
     * we do not extract duplicate events. However, moving the mouse into the
     * browser from outside will not fire a `mouseout` event. In this case, we use
     * the `mouseover` top-level event.
     */

        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          const isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
          const isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

          if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            const related = nativeEvent.relatedTarget || nativeEvent.fromElement;

            if (related) {
              // If the related node is managed by React, we can assume that we have
              // already dispatched the corresponding events during its mouseout.
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }

          if (!isOutEvent && !isOverEvent) {
            // Must not be a mouse or pointer in or out - ignoring.
            return;
          }

          let win; // TODO: why is this nullable in the types but we read from it?

          if (nativeEventTarget.window === nativeEventTarget) {
            // `nativeEventTarget` is probably a window object.
            win = nativeEventTarget;
          } else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            const doc = nativeEventTarget.ownerDocument;

            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }

          let from;
          let to;

          if (isOutEvent) {
            const _related = nativeEvent.relatedTarget || nativeEvent.toElement;

            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;

            if (to !== null) {
              const nearestMounted = getNearestMountedFiber(to);

              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
          }

          if (from === to) {
            // Nothing pertains to our managed components.
            return;
          }

          let SyntheticEventCtor = SyntheticMouseEvent;
          let leaveEventType = 'onMouseLeave';
          let enterEventType = 'onMouseEnter';
          let eventTypePrefix = 'mouse';

          if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
          }

          const fromNode = from == null ? win : getNodeFromInstance(from);
          const toNode = to == null ? win : getNodeFromInstance(to);
          const leave = new SyntheticEventCtor(leaveEventType, `${eventTypePrefix}leave`, from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          let enter = null; // We should only process this nativeEvent if we are processing
          // the first ancestor. Next time, we will ignore the event.

          const nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

          if (nativeTargetInst === targetInst) {
            const enterEvent = new SyntheticEventCtor(enterEventType, `${eventTypePrefix}enter`, to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }

          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */

        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
          ;
        }

        const objectIs = typeof Object.is === 'function' ? Object.is : is;
        const hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        /**
     * Performs equality by iterating through keys on an object and returning false
     * when any key has values which are not strictly equal between the arguments.
     * Returns true when the values of all keys are strictly equal.
     */

        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }

          if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
            return false;
          }

          const keysA = Object.keys(objA);
          const keysB = Object.keys(objB);

          if (keysA.length !== keysB.length) {
            return false;
          } // Test for A's keys different from B.

          for (let i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }

          return true;
        }
        /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */

        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }

          return node;
        }
        /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */

        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }

            node = node.parentNode;
          }
        }
        /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */

        function getNodeForCharacterOffset(root, offset) {
          let node = getLeafNode(root);
          let nodeStart = 0;
          let nodeEnd = 0;

          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;

              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart,
                };
              }

              nodeStart = nodeEnd;
            }

            node = getLeafNode(getSiblingNode(node));
          }
        }
        /**
     * @param {DOMElement} outerNode
     * @return {?object}
     */

        function getOffsets(outerNode) {
          const { ownerDocument } = outerNode;
          const win = ownerDocument && ownerDocument.defaultView || window;
          const selection = win.getSelection && win.getSelection();

          if (!selection || selection.rangeCount === 0) {
            return null;
          }

          const { anchorNode } = selection;
          const { anchorOffset } = selection;
          const { focusNode } = selection;
          const { focusOffset } = selection; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
          // up/down buttons on an <input type="number">. Anonymous divs do not seem to
          // expose properties, triggering a "Permission denied error" if any of its
          // properties are accessed. The only seemingly possible way to avoid erroring
          // is to access a property that typically works for non-anonymous divs and
          // catch any error that may otherwise arise. See
          // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

          try {
            /* eslint-disable no-unused-expressions */
            anchorNode.nodeType;
            focusNode.nodeType;
            /* eslint-enable no-unused-expressions */
          } catch (e) {
            return null;
          }

          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        /**
     * Returns {start, end} where `start` is the character/codepoint index of
     * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
     * `end` is the index of (focusNode, focusOffset).
     *
     * Returns null if you pass in garbage input but we should probably just crash.
     *
     * Exported only for testing.
     */

        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          let length = 0;
          let start = -1;
          let end = -1;
          let indexWithinAnchor = 0;
          let indexWithinFocus = 0;
          let node = outerNode;
          let parentNode = null;

          outer: while (true) {
            let next = null;

            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }

              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }

              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }

              if ((next = node.firstChild) === null) {
                break;
              } // Moving from `node` to its first child `next`.

              parentNode = node;
              node = next;
            }

            while (true) {
              if (node === outerNode) {
                // If `outerNode` has children, this is always the second time visiting
                // it. If it has no children, this is still the first loop, and the only
                // valid selection is anchorNode and focusNode both equal to this node
                // and both offsets 0, in which case we will have handled above.
                break outer;
              }

              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }

              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }

              if ((next = node.nextSibling) !== null) {
                break;
              }

              node = parentNode;
              parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.

            node = next;
          }

          if (start === -1 || end === -1) {
            // This should never happen. (Would happen if the anchor/focus nodes aren't
            // actually inside the passed-in node.)
            return null;
          }

          return {
            start,
            end,
          };
        }
        /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programmatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */

        function setOffsets(node, offsets) {
          const doc = node.ownerDocument || document;
          const win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
          // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
          // fails when pasting 100+ items)

          if (!win.getSelection) {
            return;
          }

          const selection = win.getSelection();
          const { length } = node.textContent;
          let start = Math.min(offsets.start, length);
          let end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
          // Flip backward selections, so we can set with a single range.

          if (!selection.extend && start > end) {
            const temp = end;
            end = start;
            start = temp;
          }

          const startMarker = getNodeForCharacterOffset(node, start);
          const endMarker = getNodeForCharacterOffset(node, end);

          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }

            const range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();

            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }

        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }

        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } if (outerNode === innerNode) {
            return true;
          } if (isTextNode(outerNode)) {
            return false;
          } if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } if ('contains' in outerNode) {
            return outerNode.contains(innerNode);
          } if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          }
          return false;
        }

        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }

        function isSameOriginFrame(iframe) {
          try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
          } catch (err) {
            return false;
          }
        }

        function getActiveElementDeep() {
          let win = window;
          let element = getActiveElement();

          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }

            element = getActiveElement(win.document);
          }

          return element;
        }
        /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */

        /**
     * @hasSelectionCapabilities: we get the element types that support selection
     * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
     * and `selectionEnd` rows.
     */

        function hasSelectionCapabilities(elem) {
          const nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
        }

        function getSelectionInformation() {
          const focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null,
          };
        }
        /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */

        function restoreSelection(priorSelectionInformation) {
          const curFocusedElem = getActiveElementDeep();
          const priorFocusedElem = priorSelectionInformation.focusedElem;
          const priorSelectionRange = priorSelectionInformation.selectionRange;

          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            } // Focusing a node can change the scroll position, which is undesirable

            const ancestors = [];
            let ancestor = priorFocusedElem;

            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop,
                });
              }
            }

            if (typeof priorFocusedElem.focus === 'function') {
              priorFocusedElem.focus();
            }

            for (let i = 0; i < ancestors.length; i++) {
              const info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */

        function getSelection(input) {
          let selection;

          if ('selectionStart' in input) {
            // Modern browser with input or textarea.
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd,
            };
          } else {
            // Content editable or old IE textarea.
            selection = getOffsets(input);
          }

          return selection || {
            start: 0,
            end: 0,
          };
        }
        /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */

        function setSelection(input, offsets) {
          const { start } = offsets;
          let { end } = offsets;

          if (end === undefined) {
            end = start;
          }

          if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }

        const skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

        function registerEvents$3() {
          registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
        }

        let activeElement$1 = null;
        let activeElementInst$1 = null;
        let lastSelection = null;
        let mouseDown = false;
        /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     */

        function getSelection$1(node) {
          if ('selectionStart' in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd,
            };
          }
          const win = node.ownerDocument && node.ownerDocument.defaultView || window;
          const selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset,
          };
        }
        /**
     * Get document associated with the event target.
     */

        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @param {object} nativeEventTarget
     * @return {?SyntheticEvent}
     */

        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          // Ensure we have the right element, and that the user is not dragging a
          // selection (this matches native `select` event behavior). In HTML5, select
          // fires only on input and textarea thus if there's no focused element we
          // won't dispatch.
          const doc = getEventTargetDocument(nativeEventTarget);

          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          } // Only fire when selection has actually changed.

          const currentSelection = getSelection$1(activeElement$1);

          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            const listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

            if (listeners.length > 0) {
              const event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners,
              });
              event.target = activeElement$1;
            }
          }
        }
        /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */

        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          const targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

          switch (domEventName) {
            // Track the input node that has focus.
            case 'focusin':
              if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }

              break;

            case 'focusout':
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.

            case 'mousedown':
              mouseDown = true;
              break;

            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.

            case 'selectionchange':
              if (skipSelectionChangeEvent) {
                break;
              }

              // falls through

            case 'keydown':
            case 'keyup':
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }

        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          const reactName = topLevelEventsToReactNames.get(domEventName);

          if (reactName === undefined) {
            return;
          }

          let SyntheticEventCtor = SyntheticEvent;
          let reactEventType = domEventName;

          switch (domEventName) {
            case 'keypress':
              // Firefox creates a keypress event for function keys too. This removes
              // the unwanted keypress events. Enter is however both printable and
              // non-printable. One would expect Tab to be as well (but it isn't).
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }

              /* falls through */

            case 'keydown':
            case 'keyup':
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;

            case 'focusin':
              reactEventType = 'focus';
              SyntheticEventCtor = SyntheticFocusEvent;
              break;

            case 'focusout':
              reactEventType = 'blur';
              SyntheticEventCtor = SyntheticFocusEvent;
              break;

            case 'beforeblur':
            case 'afterblur':
              SyntheticEventCtor = SyntheticFocusEvent;
              break;

            case 'click':
              // Firefox creates a click event on right mouse clicks. This removes the
              // unwanted click events.
              if (nativeEvent.button === 2) {
                return;
              }

              /* falls through */

            case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup': // TODO: Disabled elements should not respond to mouse events

              /* falls through */

            case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
              SyntheticEventCtor = SyntheticMouseEvent;
              break;

            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
              SyntheticEventCtor = SyntheticDragEvent;
              break;

            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
              SyntheticEventCtor = SyntheticTouchEvent;
              break;

            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;

            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;

            case 'scroll':
              SyntheticEventCtor = SyntheticUIEvent;
              break;

            case 'wheel':
              SyntheticEventCtor = SyntheticWheelEvent;
              break;

            case 'copy':
            case 'cut':
            case 'paste':
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;

            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }

          const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            // Some events don't bubble in the browser.
            // In the past, React has always bubbled them, but this can be surprising.
            // We're going to try aligning closer to the browser behavior by not bubbling
            // them in React either. We'll start by not bubbling onScroll, and then expand.
            const accumulateTargetOnly = !inCapturePhase // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        && domEventName === 'scroll';

            const _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

            if (_listeners.length > 0) {
              // Intentionally create event lazily.
              const _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

              dispatchQueue.push({
                event: _event,
                listeners: _listeners,
              });
            }
          }
        } // TODO: remove top-level side effect.

        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();

        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          // TODO: we should remove the concept of a "SimpleEventPlugin".
          // This is the basic functionality of the event system. All
          // the other plugins are essentially polyfills. So the plugin
          // should probably be inlined somewhere and have its logic
          // be core the to event system. This would potentially allow
          // us to ship builds of React without the polyfilled plugins below.
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          const shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
          // event's native "bubble" phase, which means that we're
          // not in the capture phase. That's because we emulate
          // the capture phase here still. This is a trade-off,
          // because in an ideal world we would not emulate and use
          // the phases properly, like we do with the SimpleEvent
          // plugin. However, the plugins below either expect
          // emulation (EnterLeave) or use state localized to that
          // plugin (BeforeInput, Change, Select). The state in
          // these modules complicates things, as you'll essentially
          // get the case where the capture phase event might change
          // state, only for the following bubble event to come in
          // later and not trigger anything as the state now
          // invalidates the heuristics of the event plugin. We
          // could alter all these plugins to work in such ways, but
          // that might cause other unknown side-effects that we
          // can't forsee right now.

          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        } // List of events that need to be individually attached to media elements.

        const mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
        // set them on the actual target element itself. This is primarily
        // because these events do not consistently bubble in the DOM.

        const nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

        function executeDispatch(event, listener, currentTarget) {
          const type = event.type || 'unknown-event';
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
          event.currentTarget = null;
        }

        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          let previousInstance;

          if (inCapturePhase) {
            for (let i = dispatchListeners.length - 1; i >= 0; i--) {
              const _dispatchListeners$i = dispatchListeners[i];
              const { instance } = _dispatchListeners$i;
              const { currentTarget } = _dispatchListeners$i;
              const { listener } = _dispatchListeners$i;

              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }

              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (let _i = 0; _i < dispatchListeners.length; _i++) {
              const _dispatchListeners$_i = dispatchListeners[_i];
              const _instance = _dispatchListeners$_i.instance;
              const _currentTarget = _dispatchListeners$_i.currentTarget;
              const _listener = _dispatchListeners$_i.listener;

              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }

              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }

        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

          for (let i = 0; i < dispatchQueue.length; i++) {
            const _dispatchQueue$i = dispatchQueue[i];
            const { event } = _dispatchQueue$i;
            const { listeners } = _dispatchQueue$i;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
          } // This would be a good time to rethrow if any of the event handlers threw.

          rethrowCaughtError();
        }

        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          const nativeEventTarget = getEventTarget(nativeEvent);
          const dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }

        function listenToNonDelegatedEvent(domEventName, targetElement) {
          const isCapturePhaseListener = false;
          const listenerSet = getEventListenerSet(targetElement);
          const listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }

        const listeningMarker = `_reactListening${Math.random().toString(36).slice(2)}`;

        function listenToAllSupportedEvents(rootContainerElement) {
          {
            if (rootContainerElement[listeningMarker]) {
              // Performance optimization: don't iterate through events
              // for the same portal container or root node more than once.
              // TODO: once we remove the flag, we may be able to also
              // remove some of the bookkeeping maps used for laziness.
              return;
            }

            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(domEventName => {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement, null);
              }

              listenToNativeEvent(domEventName, true, rootContainerElement, null);
            });
          }
        }

        function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
          let eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
          let target = rootContainerElement; // selectionchange needs to be attached to the document
          // otherwise it won't capture incoming events that are only
          // triggered on the document directly.

          if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
            target = rootContainerElement.ownerDocument;
          } // If the event can be delegated (or is capture phase), we can
          // register it to the root container. Otherwise, we should
          // register the event to the target element and mark it as
          // a non-delegated event.

          if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') {
              return;
            }

            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
          }

          const listenerSet = getEventListenerSet(target);
          const listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
          // we need to trap an event listener onto the target.

          if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }

            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }

        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          const listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
          // active and not passive.

          let isPassiveListener;

          if (passiveBrowserEventsSupported) {
            // Browsers introduced an intervention, making these events
            // passive by default on document. React doesn't bind them
            // to document anymore, but changing this now would undo
            // the performance wins from the change. So we emulate
            // the existing behavior manually on the roots now.
            // https://github.com/facebook/react/issues/19651
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
              isPassiveListener = true;
            }
          }

          targetContainer = targetContainer;
          let unsubscribeListener; // When legacyFBSupport is enabled, it's for when we

          if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }

        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }

        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          let ancestorInst = targetInst;

          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            const targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

            if (targetInst !== null) {
              // The below logic attempts to work out if we need to change
              // the target fiber to a different ancestor. We had similar logic
              // in the legacy event system, except the big difference between
              // systems is that the modern event system now has an event listener
              // attached to each React Root and React Portal Root. Together,
              // the DOM nodes representing these roots are the "rootContainer".
              // To figure out which ancestor instance we should use, we traverse
              // up the fiber tree from the target instance and attempt to find
              // root boundaries that match that of our current "rootContainer".
              // If we find that "rootContainer", we find the parent fiber
              // sub-tree for that root and make that our ancestor instance.
              let node = targetInst;

              mainLoop: while (true) {
                if (node === null) {
                  return;
                }

                const nodeTag = node.tag;

                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  let container = node.stateNode.containerInfo;

                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }

                  if (nodeTag === HostPortal) {
                    // The target is a portal, but it's not the rootContainer we're looking for.
                    // Normally portals handle their own events all the way down to the root.
                    // So we should be able to stop now. However, we don't know if this portal
                    // was part of *our* root.
                    let grandNode = node.return;

                    while (grandNode !== null) {
                      const grandTag = grandNode.tag;

                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        const grandContainer = grandNode.stateNode.containerInfo;

                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          // This is the rootContainer we're looking for and we found it as
                          // a parent of the Portal. That means we can ignore it because the
                          // Portal will bubble through to us.
                          return;
                        }
                      }

                      grandNode = grandNode.return;
                    }
                  } // Now we need to find it's corresponding host fiber in the other
                  // tree. To do this we can use getClosestInstanceFromNode, but we
                  // need to validate that the fiber is a host instance, otherwise
                  // we need to traverse up through the DOM till we find the correct
                  // node that is from the other tree.

                  while (container !== null) {
                    const parentNode = getClosestInstanceFromNode(container);

                    if (parentNode === null) {
                      return;
                    }

                    const parentTag = parentNode.tag;

                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }

                    container = container.parentNode;
                  }
                }

                node = node.return;
              }
            }
          }

          batchedEventUpdates(() => dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst));
        }

        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget,
          };
        }

        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
          const captureName = reactName !== null ? `${reactName}Capture` : null;
          const reactEventName = inCapturePhase ? captureName : reactName;
          const listeners = [];
          let instance = targetFiber;
          let lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

          while (instance !== null) {
            const _instance2 = instance;
            const { stateNode } = _instance2;
            const { tag } = _instance2; // Handle listeners that are on HostComponents (i.e. <div>)

            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode; // createEventHandle listeners

              if (reactEventName !== null) {
                const listener = getListener(instance, reactEventName);

                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.

            if (accumulateTargetOnly) {
              break;
            }

            instance = instance.return;
          }

          return listeners;
        } // We should only use this function for:
        // - BeforeInputEventPlugin
        // - ChangeEventPlugin
        // - SelectEventPlugin
        // This is because we only process these plugins
        // in the bubble phase, so we need to accumulate two
        // phase event listeners (via emulation).

        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          const captureName = `${reactName}Capture`;
          const listeners = [];
          let instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

          while (instance !== null) {
            const _instance3 = instance;
            const { stateNode } = _instance3;
            const { tag } = _instance3; // Handle listeners that are on HostComponents (i.e. <div>)

            if (tag === HostComponent && stateNode !== null) {
              const currentTarget = stateNode;
              const captureListener = getListener(instance, captureName);

              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }

              const bubbleListener = getListener(instance, reactName);

              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }

            instance = instance.return;
          }

          return listeners;
        }

        function getParent(inst) {
          if (inst === null) {
            return null;
          }

          do {
            inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
            // That is depending on if we want nested subtrees (layers) to bubble
            // events to their parent. We could also go through parentNode on the
            // host node but that wouldn't work for React Native and doesn't let us
            // do the portal feature.
          } while (inst && inst.tag !== HostComponent);

          if (inst) {
            return inst;
          }

          return null;
        }
        /**
     * Return the lowest common ancestor of A and B, or null if they are in
     * different trees.
     */

        function getLowestCommonAncestor(instA, instB) {
          let nodeA = instA;
          let nodeB = instB;
          let depthA = 0;

          for (let tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          let depthB = 0;

          for (let tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          } // If A is deeper, crawl up.

          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          } // If B is deeper, crawl up.

          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          } // Walk in lockstep until we find a match.

          let depth = depthA;

          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }

            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }

          return null;
        }

        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          const registrationName = event._reactName;
          const listeners = [];
          let instance = target;

          while (instance !== null) {
            if (instance === common) {
              break;
            }

            const _instance4 = instance;
            const { alternate } = _instance4;
            const { stateNode } = _instance4;
            const { tag } = _instance4;

            if (alternate !== null && alternate === common) {
              break;
            }

            if (tag === HostComponent && stateNode !== null) {
              const currentTarget = stateNode;

              if (inCapturePhase) {
                const captureListener = getListener(instance, registrationName);

                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                const bubbleListener = getListener(instance, registrationName);

                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }

            instance = instance.return;
          }

          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners,
            });
          }
        } // We should only use this function for:
        // - EnterLeaveEventPlugin
        // This is because we only process this plugin
        // in the bubble phase, so we need to accumulate two
        // phase event listeners.

        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          const common = from && to ? getLowestCommonAncestor(from, to) : null;

          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }

          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }

        function getListenerSetKey(domEventName, capture) {
          return `${domEventName}__${capture ? 'capture' : 'bubble'}`;
        }

        let didWarnInvalidHydration = false;
        const DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
        const SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
        const SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
        const AUTOFOCUS = 'autoFocus';
        const CHILDREN = 'children';
        const STYLE = 'style';
        const HTML$1 = '__html';
        const HTML_NAMESPACE$1 = Namespaces.html;
        let warnedUnknownTags;
        let suppressHydrationWarning;
        let validatePropertiesInDevelopment;
        let warnForTextDifference;
        let warnForPropDifference;
        let warnForExtraAttributes;
        let warnForInvalidEventListener;
        let canDiffStyleForHydrationWarning;
        let normalizeMarkupForTextOrAttribute;
        let normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true,
          };

          validatePropertiesInDevelopment = function (type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames,
            });
          }; // IE 11 parses & normalizes the style attribute as opposed to other
          // browsers. It adds spaces and sorts the properties in some
          // non-alphabetical order. Handling that would require sorting CSS
          // properties in the client & server versions or applying
          // `expectedStyle` to a temporary DOM node to read its `style` attribute
          // normalized. Since it only affects IE, we're skipping style warnings
          // in that browser completely in favor of doing all that work.
          // See https://github.com/facebook/react/issues/11807

          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
          // It also can turn \u0000 into \uFFFD inside attributes.
          // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
          // If we have a mismatch, it might be caused by that.
          // We will still patch up in this case but not fire the warning.

          const NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          const NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

          normalizeMarkupForTextOrAttribute = function (markup) {
            const markupString = typeof markup === 'string' ? markup : `${markup}`;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
          };

          warnForTextDifference = function (serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }

            const normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            const normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

            if (normalizedServerText === normalizedClientText) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };

          warnForPropDifference = function (propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }

            const normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            const normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

            if (normalizedServerValue === normalizedClientValue) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };

          warnForExtraAttributes = function (attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            const names = [];
            attributeNames.forEach(name => {
              names.push(name);
            });
            error('Extra attributes from the server: %s', names);
          };

          warnForInvalidEventListener = function (registrationName, listener) {
            if (listener === false) {
              error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
            } else {
              error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
            }
          }; // Parse the HTML and read it back to normalize the HTML string so that it
          // can be used for comparison.

          normalizeHTML = function (parent, html) {
            // We could have created a separate document here to avoid
            // re-initializing custom elements if they exist. But this breaks
            // how <noscript> is being handled. So we use the same document.
            // See the discussion in https://github.com/facebook/react/pull/11157.
            const testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }

        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }

        function noop() {}

        function trapClickOnNonInteractiveElement(node) {
          // Mobile Safari does not fire properly bubble click events on
          // non-interactive elements, which means delegated click listeners do not
          // fire. The workaround for this bug involves attaching an empty click
          // listener on the target node.
          // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
          // Just set it using the onclick property so that we don't have to manage any
          // bookkeeping for it. Not sure if we need to clear it when the listener is
          // removed.
          // TODO: Only do this for the relevant Safaris maybe?
          node.onclick = noop;
        }

        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (const propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }

            const nextProp = nextProps[propKey];

            if (propKey === STYLE) {
              {
                if (nextProp) {
                  // Freeze the next style object so that we can assume it won't be
                  // mutated. We have already warned for this in the past.
                  Object.freeze(nextProp);
                }
              } // Relies on `updateStylesByID` not mutating `styleUpdates`.

              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              const nextHtml = nextProp ? nextProp[HTML$1] : undefined;

              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === 'string') {
                // Avoid setting initial textContent when the text is empty. In IE11 setting
                // textContent on a <textarea> will cause the placeholder to not
                // show within the <textarea> until it has been focused and blurred again.
                // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                const canSetTextContent = tag !== 'textarea' || nextProp !== '';

                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === 'number') {
                setTextContent(domElement, `${nextProp}`);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (propKey === AUTOFOCUS) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }

                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }

        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          // TODO: Handle wasCustomComponentTag
          for (let i = 0; i < updatePayload.length; i += 2) {
            const propKey = updatePayload[i];
            const propValue = updatePayload[i + 1];

            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }

        function createElement(type, props, rootContainerElement, parentNamespace) {
          let isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
          // tags get no namespace.

          const ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          let domElement;
          let namespaceURI = parentNamespace;

          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }

          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
              // allow <SVG> or <mATH>.

              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
              }
            }

            if (type === 'script') {
              // Create the script via .innerHTML so its "parser-inserted" flag is
              // set to true and it does not execute
              const div = ownerDocument.createElement('div');
          div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
              // This is guaranteed to yield a script element.

              const { firstChild } = div;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') {
              // $FlowIssue `createElement` should be updated for Web Components
              domElement = ownerDocument.createElement(type, {
                is: props.is,
              });
            } else {
              // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
              // See discussion in https://github.com/facebook/react/pull/6896
              // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
              domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
              // attributes on `select`s needs to be added before `option`s are inserted.
              // This prevents:
              // - a bug where the `select` does not scroll to the correct option because singular
              //  `select` elements automatically pick the first item #13222
              // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
              // See https://github.com/facebook/react/issues/13222
              // and https://github.com/facebook/react/issues/14239

              if (type === 'select') {
                const node = domElement;

                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                  // it is possible that no option is selected.
                  //
                  // This is only necessary when a select in "single selection mode".
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }

          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
              }
            }
          }
          return domElement;
        }

        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }

        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          const isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          } // TODO: Make sure that we check isMounted before firing any of these events.

          let props;

          switch (tag) {
            case 'dialog':
              listenToNonDelegatedEvent('cancel', domElement);
              listenToNonDelegatedEvent('close', domElement);
              props = rawProps;
              break;

            case 'iframe':
            case 'object':
            case 'embed':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the load event.
              listenToNonDelegatedEvent('load', domElement);
              props = rawProps;
              break;

            case 'video':
            case 'audio':
              // We listen to these events in case to ensure emulated bubble
              // listeners still fire for all the media events.
              for (let i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }

              props = rawProps;
              break;

            case 'source':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the error event.
              listenToNonDelegatedEvent('error', domElement);
              props = rawProps;
              break;

            case 'img':
            case 'image':
            case 'link':
              // We listen to these events in case to ensure emulated bubble
              // listeners still fire for error and load events.
              listenToNonDelegatedEvent('error', domElement);
              listenToNonDelegatedEvent('load', domElement);
              props = rawProps;
              break;

            case 'details':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the toggle event.
              listenToNonDelegatedEvent('toggle', domElement);
              props = rawProps;
              break;

            case 'input':
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            case 'option':
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;

            case 'select':
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            case 'textarea':
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            default:
              props = rawProps;
          }

          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

          switch (tag) {
            case 'input':
              // TODO: Make sure we check if this is still unmounted or do any clean
              // up necessary since we never stop tracking anymore.
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;

            case 'textarea':
              // TODO: Make sure we check if this is still unmounted or do any clean
              // up necessary since we never stop tracking anymore.
              track(domElement);
              postMountWrapper$3(domElement);
              break;

            case 'option':
              postMountWrapper$1(domElement, rawProps);
              break;

            case 'select':
              postMountWrapper$2(domElement, rawProps);
              break;

            default:
              if (typeof props.onClick === 'function') {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
              }

              break;
          }
        } // Calculate the diff between the two objects.

        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          let updatePayload = null;
          let lastProps;
          let nextProps;

          switch (tag) {
            case 'input':
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;

            case 'option':
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;

            case 'select':
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;

            case 'textarea':
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;

            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;

              if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
              }

              break;
          }

          assertValidProps(tag, nextProps);
          let propKey;
          let styleName;
          let styleUpdates = null;

          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }

            if (propKey === STYLE) {
              const lastStyle = lastProps[propKey];

              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }

                  styleUpdates[styleName] = '';
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (propKey === AUTOFOCUS) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              // This is a special case. If any listener updates we need to ensure
              // that the "current" fiber pointer gets updated so we need a commit
              // to update this element.
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              // For all other deleted properties we add it to the queue. We use
              // the allowed property list in the commit phase instead.
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }

          for (propKey in nextProps) {
            const nextProp = nextProps[propKey];
            const lastProp = lastProps != null ? lastProps[propKey] : undefined;

            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }

            if (propKey === STYLE) {
              {
                if (nextProp) {
                  // Freeze the next style object so that we can assume it won't be
                  // mutated. We have already warned for this in the past.
                  Object.freeze(nextProp);
                }
              }

              if (lastProp) {
                // Unset styles on `lastProp` but not on `nextProp`.
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }

                    styleUpdates[styleName] = '';
                  }
                } // Update styles that changed since `lastProp`.

                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }

                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                // Relies on `updateStylesByID` not mutating `styleUpdates`.
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }

                  updatePayload.push(propKey, styleUpdates);
                }

                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              const nextHtml = nextProp ? nextProp[HTML$1] : undefined;
              const lastHtml = lastProp ? lastProp[HTML$1] : undefined;

              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === 'string' || typeof nextProp === 'number') {
                (updatePayload = updatePayload || []).push(propKey, `${nextProp}`);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                // We eagerly listen to this even though we haven't committed yet.
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }

                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }

              if (!updatePayload && lastProp !== nextProp) {
                // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
              }
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
              // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
              // In this case, call the opaque object's toString function which generates a new client
              // ID so client and server IDs match and throws to rerender.
              nextProp.toString();
            } else {
              // For any other property we always add it to the queue and then we
              // filter it out using the allowed property list during the commit.
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }

          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }

          return updatePayload;
        } // Apply the diff.

        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          // Update checked *before* name.
          // In the middle of an update, it is possible to have multiple checked.
          // When a checked radio tries to change name, browser makes another radio's checked false.
          if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }

          const wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          const isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
          // changed.

          switch (tag) {
            case 'input':
              // Update the wrapper around inputs *after* updating props. This has to
              // happen after `updateDOMProperties`. Otherwise HTML5 input validations
              // raise warnings and prevent the new value from being assigned.
              updateWrapper(domElement, nextRawProps);
              break;

            case 'textarea':
              updateWrapper$1(domElement, nextRawProps);
              break;

            case 'select':
              // <select> value update needs to occur after <option> children
              // reconciliation
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }

        function getPossibleStandardName(propName) {
          {
            const lowerCasedName = propName.toLowerCase();

            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }

            return possibleStandardNames[lowerCasedName] || null;
          }
        }

        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          let isCustomComponentTag;
          let extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          } // TODO: Make sure that we check isMounted before firing any of these events.

          switch (tag) {
            case 'dialog':
              listenToNonDelegatedEvent('cancel', domElement);
              listenToNonDelegatedEvent('close', domElement);
              break;

            case 'iframe':
            case 'object':
            case 'embed':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the load event.
              listenToNonDelegatedEvent('load', domElement);
              break;

            case 'video':
            case 'audio':
              // We listen to these events in case to ensure emulated bubble
              // listeners still fire for all the media events.
              for (let i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }

              break;

            case 'source':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the error event.
              listenToNonDelegatedEvent('error', domElement);
              break;

            case 'img':
            case 'image':
            case 'link':
              // We listen to these events in case to ensure emulated bubble
              // listeners still fire for error and load events.
              listenToNonDelegatedEvent('error', domElement);
              listenToNonDelegatedEvent('load', domElement);
              break;

            case 'details':
              // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the toggle event.
              listenToNonDelegatedEvent('toggle', domElement);
              break;

            case 'input':
              initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            case 'option':
              validateProps(domElement, rawProps);
              break;

            case 'select':
              initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;

            case 'textarea':
              initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
              // listeners still fire for the invalid event.

              listenToNonDelegatedEvent('invalid', domElement);
              break;
          }

          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            const { attributes } = domElement;

            for (let _i = 0; _i < attributes.length; _i++) {
              const name = attributes[_i].name.toLowerCase();

              switch (name) {
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                  break;
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.

                case 'value':
                  break;

                case 'checked':
                  break;

                case 'selected':
                  break;

                default:
                  // Intentionally use the original name.
                  // See discussion in https://github.com/facebook/react/pull/10676.
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          let updatePayload = null;

          for (const propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }

            const nextProp = rawProps[propKey];

            if (propKey === CHILDREN) {
              // For text content children we compare against textContent. This
              // might match additional HTML that is hidden when we read it using
              // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
              // satisfies our requirement. Our requirement is not to produce perfect
              // HTML and attributes. Ideally we should preserve structure but it's
              // ok not to if the visible content is still enough to indicate what
              // even listeners these nodes might be wired up to.
              // TODO: Warn if there is more than a single textNode as a child.
              // TODO: Should we use domElement.firstChild.nodeValue to compare?
              if (typeof nextProp === 'string') {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }

                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === 'number') {
                if (domElement.textContent !== `${nextProp}`) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }

                  updatePayload = [CHILDREN, `${nextProp}`];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }

                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }
            } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === 'boolean') {
              // Validate that the properties correspond to their expected values.
              let serverValue = void 0;
              const propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning) ;else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          || propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                const serverHTML = domElement.innerHTML;
                const nextHtml = nextProp ? nextProp[HTML$1] : undefined;

                if (nextHtml != null) {
                  const expectedHTML = normalizeHTML(domElement, nextHtml);

                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey);

                if (canDiffStyleForHydrationWarning) {
                  const expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute('style');

                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);

                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                let isMismatchDueToBadCasing = false;

                if (propertyInfo !== null) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  let ownNamespace = parentNamespace;

                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }

                  if (ownNamespace === HTML_NAMESPACE$1) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    const standardName = getPossibleStandardName(propKey);

                    if (standardName !== null && standardName !== propKey) {
                      // If an SVG prop is supplied with bad casing, it will
                      // be successfully parsed from HTML, but will produce a mismatch
                      // (and would be incorrectly rendered on the client).
                      // However, we already warn about bad casing elsewhere.
                      // So we'll skip the misleading extra mismatch warning in this case.
                      isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                      extraAttributeNames.delete(standardName);
                    } // $FlowFixMe - Should be inferred as not undefined.

                    extraAttributeNames.delete(propKey);
                  }

                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }

                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }

          {
            // $FlowFixMe - Should be inferred as not undefined.
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              // $FlowFixMe - Should be inferred as not undefined.
              warnForExtraAttributes(extraAttributeNames);
            }
          }

          switch (tag) {
            case 'input':
              // TODO: Make sure we check if this is still unmounted or do any clean
              // up necessary since we never stop tracking anymore.
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;

            case 'textarea':
              // TODO: Make sure we check if this is still unmounted or do any clean
              // up necessary since we never stop tracking anymore.
              track(domElement);
              postMountWrapper$3(domElement);
              break;

            case 'select':
            case 'option':
              // For input and textarea we current always set the value property at
              // post mount to force it to diverge from attributes. However, for
              // option and select we don't quite do the same thing and select
              // is not resilient to the DOM state changing so we don't do that here.
              // TODO: Consider not doing this for input and textarea.
              break;

            default:
              if (typeof rawProps.onClick === 'function') {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
              }

              break;
          }

          return updatePayload;
        }

        function diffHydratedText(textNode, text) {
          const isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }

        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }

        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }

        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }

        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
          }
        }

        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === '') {
              // We expect to insert empty text nodes since they're not represented in
              // the HTML.
              // TODO: Remove this special case if we can just avoid inserting empty
              // text nodes.
              return;
            }

            if (didWarnInvalidHydration) {
              return;
            }

            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }

        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case 'input':
              restoreControlledState(domElement, props);
              return;

            case 'textarea':
              restoreControlledState$2(domElement, props);
              return;

            case 'select':
              restoreControlledState$1(domElement, props);
          }
        }

        let validateDOMNesting = function () {};

        let updatedAncestorInfo = function () {};

        {
          // This validation code was written based on the HTML5 parsing spec:
          // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
          //
          // Note: this does not catch all invalid nesting, nor does it try to (as it's
          // not clear what practical benefit doing so provides); instead, we warn only
          // for cases where the parser will give a parse tree differing from what React
          // intended. For example, <b><div></div></b> is invalid but we don't warn
          // because it still parses correctly; we do warn for other cases like nested
          // <p> tags where the beginning of the second element implicitly closes the
          // first, causing a confusing mess.
          // https://html.spec.whatwg.org/multipage/syntax.html#special
          const specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

          const inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

          const buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

          const impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
          const emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null,
          };

          updatedAncestorInfo = function (oldInfo, tag) {
            const ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

            const info = {
              tag,
            };

            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }

            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            } // See rules for 'li', 'dd', 'dt' start tags in
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

            if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }

            ancestorInfo.current = info;

            if (tag === 'form') {
              ancestorInfo.formTag = info;
            }

            if (tag === 'a') {
              ancestorInfo.aTagInScope = info;
            }

            if (tag === 'button') {
              ancestorInfo.buttonTagInScope = info;
            }

            if (tag === 'nobr') {
              ancestorInfo.nobrTagInScope = info;
            }

            if (tag === 'p') {
              ancestorInfo.pTagInButtonScope = info;
            }

            if (tag === 'li') {
              ancestorInfo.listItemTagAutoclosing = info;
            }

            if (tag === 'dd' || tag === 'dt') {
              ancestorInfo.dlItemTagAutoclosing = info;
            }

            return ancestorInfo;
          };
          /**
       * Returns whether
       */

          const isTagValidWithParent = function (tag, parentTag) {
            // First, let's check if we're in an unusual parsing mode...
            switch (parentTag) {
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
              case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';

              case 'optgroup':
                return tag === 'option' || tag === '#text';
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but

              case 'option':
                return tag === '#text';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

              case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

              case 'tbody':
              case 'thead':
              case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

              case 'colgroup':
                return tag === 'col' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

              case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

              case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

              case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';

              case 'frameset':
                return tag === 'frame';

              case '#document':
                return tag === 'html';
            } // Probably in the "in body" parsing mode, so we outlaw only tag combos
            // where the parsing rules cause implicit opens or closes to be added.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

            switch (tag) {
              case 'h1':
              case 'h2':
              case 'h3':
              case 'h4':
              case 'h5':
              case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

              case 'rp':
              case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;

              case 'body':
              case 'caption':
              case 'col':
              case 'colgroup':
              case 'frameset':
              case 'frame':
              case 'head':
              case 'html':
              case 'tbody':
              case 'td':
              case 'tfoot':
              case 'th':
              case 'thead':
              case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
            }

            return true;
          };
          /**
       * Returns whether
       */

          const findInvalidAncestorForTag = function (tag, ancestorInfo) {
            switch (tag) {
              case 'address':
              case 'article':
              case 'aside':
              case 'blockquote':
              case 'center':
              case 'details':
              case 'dialog':
              case 'dir':
              case 'div':
              case 'dl':
              case 'fieldset':
              case 'figcaption':
              case 'figure':
              case 'footer':
              case 'header':
              case 'hgroup':
              case 'main':
              case 'menu':
              case 'nav':
              case 'ol':
              case 'p':
              case 'section':
              case 'summary':
              case 'ul':
              case 'pre':
              case 'listing':
              case 'table':
              case 'hr':
              case 'xmp':
              case 'h1':
              case 'h2':
              case 'h3':
              case 'h4':
              case 'h5':
              case 'h6':
                return ancestorInfo.pTagInButtonScope;

              case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

              case 'li':
                return ancestorInfo.listItemTagAutoclosing;

              case 'dd':
              case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;

              case 'button':
                return ancestorInfo.buttonTagInScope;

              case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;

              case 'nobr':
                return ancestorInfo.nobrTagInScope;
            }

            return null;
          };

          const didWarn$1 = {};

          validateDOMNesting = function (childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            const parentInfo = ancestorInfo.current;
            const parentTag = parentInfo && parentInfo.tag;

            if (childText != null) {
              if (childTag != null) {
                error('validateDOMNesting: when childText is passed, childTag should be null');
              }

              childTag = '#text';
            }

            const invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            const invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            const invalidParentOrAncestor = invalidParent || invalidAncestor;

            if (!invalidParentOrAncestor) {
              return;
            }

            const ancestorTag = invalidParentOrAncestor.tag;
            const warnKey = `${!!invalidParent}|${childTag}|${ancestorTag}`;

            if (didWarn$1[warnKey]) {
              return;
            }

            didWarn$1[warnKey] = true;
            let tagDisplayName = childTag;
            let whitespaceInfo = '';

            if (childTag === '#text') {
              if (/\S/.test(childText)) {
                tagDisplayName = 'Text nodes';
              } else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
              }
            } else {
              tagDisplayName = `<${childTag}>`;
            }

            if (invalidParent) {
              let info = '';

              if (ancestorTag === 'table' && childTag === 'tr') {
                info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
              }

              error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
            }
          };
        }
        let SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
        }
        const SUSPENSE_START_DATA = '$';
        const SUSPENSE_END_DATA = '/$';
        const SUSPENSE_PENDING_START_DATA = '$?';
        const SUSPENSE_FALLBACK_START_DATA = '$!';
        const STYLE$1 = 'style';
        let eventsEnabled = null;
        let selectionInformation = null;

        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
              return !!props.autoFocus;
          }

          return false;
        }

        function getRootHostContext(rootContainerInstance) {
          let type;
          let namespace;
          const { nodeType } = rootContainerInstance;

          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
            {
              type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
              const root = rootContainerInstance.documentElement;
              namespace = root ? root.namespaceURI : getChildNamespace(null, '');
              break;
            }

            default:
            {
              const container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              const ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }

          {
            const validatedTag = type.toLowerCase();
            const ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo,
            };
          }
        }

        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            const parentHostContextDev = parentHostContext;
            const namespace = getChildNamespace(parentHostContextDev.namespace, type);
            const ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo,
            };
          }
        }

        function getPublicInstance(instance) {
          return instance;
        }

        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          const activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }

        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }

        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          let parentNamespace;
          {
            // TODO: take namespace into account when validating.
            const hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);

            if (typeof props.children === 'string' || typeof props.children === 'number') {
              const string = `${props.children}`;
              const ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }

            parentNamespace = hostContextDev.namespace;
          }
          const domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }

        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }

        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }

        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            const hostContextDev = hostContext;

            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
              const string = `${newProps.children}`;
              const ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }

        function shouldSetTextContent(type, props) {
          return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }

        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            const hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          const textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        } // if a component just imports ReactDOM (e.g. for findDOMNode).
        // Some environments might not have setTimeout or clearTimeout.

        const scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
        const cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
        const noTimeout = -1; // -------------------

        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          // Despite the naming that might imply otherwise, this method only
          // fires if there is an `Update` effect scheduled during mounting.
          // This happens if `finalizeInitialChildren` returns `true` (which it
          // does to implement the `autoFocus` attribute on the client). But
          // there are also other cases when this might happen (such as patching
          // up text content during hydration mismatch). So we'll check this again.
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }

        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          // Update the props handle so that we know which props are the ones with
          // with current event handlers.
          updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }

        function resetTextContent(domElement) {
          setTextContent(domElement, '');
        }

        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }

        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }

        function appendChildToContainer(container, child) {
          let parentNode;

          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          } // This container might be used for a portal.
          // If something inside a portal is clicked, that click should bubble
          // through the React tree. However, on Mobile Safari the click would
          // never bubble through the *DOM* tree unless an ancestor with onclick
          // event exists. So we wouldn't see it and dispatch it.
          // This is why we ensure that non React root containers have inline onclick
          // defined.
          // https://github.com/facebook/react/issues/11918

          const reactRootContainer = container._reactRootContainer;

          if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(parentNode);
          }
        }

        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }

        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }

        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }

        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }

        function hideInstance(instance) {
          // TODO: Does this work for all element types? What about MathML? Should we
          // pass host context to this method?
          instance = instance;
          const { style } = instance;

          if (typeof style.setProperty === 'function') {
            style.setProperty('display', 'none', 'important');
          } else {
            style.display = 'none';
          }
        }

        function hideTextInstance(textInstance) {
          textInstance.nodeValue = '';
        }

        function unhideInstance(instance, props) {
          instance = instance;
          const styleProp = props[STYLE$1];
          const display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
          instance.style.display = dangerousStyleValue('display', display);
        }

        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }

        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = '';
          } else if (container.nodeType === DOCUMENT_NODE) {
            const { body } = container;

            if (body != null) {
              body.textContent = '';
            }
          }
        } // -------------------

        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          } // This has now been refined to an element node.

          return instance;
        }

        function canHydrateTextInstance(instance, text) {
          if (text === '' || instance.nodeType !== TEXT_NODE) {
            // Empty strings are not parsed by HTML so there won't be a correct match here.
            return null;
          } // This has now been refined to a text node.

          return instance;
        }

        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }

        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }

        function getNextHydratable(node) {
          // Skip non-hydratable nodes.
          for (; node != null; node = node.nextSibling) {
            const { nodeType } = node;

            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }

          return node;
        }

        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }

        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }

        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
          // get attached.

          updateFiberProps(instance, props);
          let parentNamespace;
          {
            const hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace);
        }

        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }

        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          let node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
          // There might be nested nodes so we need to keep track of how
          // deep we are and only break out when we're back on top.

          let depth = 0;

          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              const { data } = node;

              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                }
                depth--;
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }

            node = node.nextSibling;
          } // TODO: Warn, we didn't find the end comment boundary.

          return null;
        } // Returns the SuspenseInstance if this node is a direct child of a
        // SuspenseInstance. I.e. if its previous sibling is a Comment with
        // SUSPENSE_x_START_DATA. Otherwise, null.

        function getParentSuspenseInstance(targetInstance) {
          let node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
          // There might be nested nodes so we need to keep track of how
          // deep we are and only break out when we're back on top.

          let depth = 0;

          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              const { data } = node;

              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                }
                depth--;
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }

            node = node.previousSibling;
          }

          return null;
        }

        function commitHydratedContainer(container) {
          // Retry if any event replaying was blocked on this.
          retryIfBlockedOn(container);
        }

        function commitHydratedSuspenseInstance(suspenseInstance) {
          // Retry if any event replaying was blocked on this.
          retryIfBlockedOn(suspenseInstance);
        }

        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }

        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }

        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }

        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }

        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }

        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }

        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }

        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }

        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
        }

        let clientId = 0;

        function makeClientIdInDEV(warnOnAccessInDEV) {
          const id = `r:${(clientId++).toString(36)}`;
          return {
            toString() {
              warnOnAccessInDEV();
              return id;
            },
            valueOf() {
              warnOnAccessInDEV();
              return id;
            },
          };
        }

        function isOpaqueHydratingObject(value) {
          return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
        }

        function makeOpaqueHydratingObject(attemptToReadValue) {
          return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue,
          };
        }

        function preparePortalMount(portalInstance) {
          {
            listenToAllSupportedEvents(portalInstance);
          }
        }

        const randomKey = Math.random().toString(36).slice(2);
        const internalInstanceKey = `__reactFiber$${randomKey}`;
        const internalPropsKey = `__reactProps$${randomKey}`;
        const internalContainerInstanceKey = `__reactContainer$${randomKey}`;
        const internalEventHandlersKey = `__reactEvents$${randomKey}`;

        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }

        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }

        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }

        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
        // If the target node is part of a hydrated or not yet rendered subtree, then
        // this may also return a SuspenseComponent or HostRoot to indicate that.
        // Conceptually the HostRoot fiber is a child of the Container node. So if you
        // pass the Container node as the targetNode, you will not actually get the
        // HostRoot back. To get to the HostRoot, you need to pass a child of it.
        // The same thing applies to Suspense boundaries.

        function getClosestInstanceFromNode(targetNode) {
          let targetInst = targetNode[internalInstanceKey];

          if (targetInst) {
            // Don't return HostRoot or SuspenseComponent here.
            return targetInst;
          } // If the direct event target isn't a React owned DOM node, we need to look
          // to see if one of its parents is a React owned DOM node.

          let { parentNode } = targetNode;

          while (parentNode) {
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

            if (targetInst) {
              // Since this wasn't the direct target of the event, we might have
              // stepped past dehydrated DOM nodes to get here. However they could
              // also have been non-React nodes. We need to answer which one.
              // If we the instance doesn't have any children, then there can't be
              // a nested suspense boundary within it. So we can use this as a fast
              // bailout. Most of the time, when people add non-React children to
              // the tree, it is using a ref to a child-less DOM node.
              // Normally we'd only need to check one of the fibers because if it
              // has ever gone from having children to deleting them or vice versa
              // it would have deleted the dehydrated boundary nested inside already.
              // However, since the HostRoot starts out with an alternate it might
              // have one on the alternate so we need to check in case this was a
              // root.
              const { alternate } = targetInst;

              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                // Next we need to figure out if the node that skipped past is
                // nested within a dehydrated boundary and if so, which one.
                let suspenseInstance = getParentSuspenseInstance(targetNode);

                while (suspenseInstance !== null) {
                  // We found a suspense instance. That means that we haven't
                  // hydrated it yet. Even though we leave the comments in the
                  // DOM after hydrating, and there are boundaries in the DOM
                  // that could already be hydrated, we wouldn't have found them
                  // through this pass since if the target is hydrated it would
                  // have had an internalInstanceKey on it.
                  // Let's get the fiber associated with the SuspenseComponent
                  // as the deepest instance.
                  const targetSuspenseInst = suspenseInstance[internalInstanceKey];

                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  } // If we don't find a Fiber on the comment, it might be because
                  // we haven't gotten to hydrate it yet. There might still be a
                  // parent boundary that hasn't above this one so we need to find
                  // the outer most that is known.

                  suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                  // host component also hasn't hydrated yet. We can return it
                  // below since it will bail out on the isMounted check later.
                }
              }

              return targetInst;
            }

            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }

          return null;
        }
        /**
     * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
     * instance, or null if the node was not rendered by this React.
     */

        function getInstanceFromNode(node) {
          const inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            }
            return null;
          }

          return null;
        }
        /**
     * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
     * DOM node.
     */

        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            // In Fiber this, is just the state node right now. We assume it will be
            // a host component or host text.
            return inst.stateNode;
          } // Without this first invariant, passing a non-DOM-component triggers the next
          // invariant for a missing parent, which is super confusing.

          {
            {
              throw Error('getNodeFromInstance: Invalid argument.');
            }
          }
        }

        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }

        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }

        function getEventListenerSet(node) {
          let elementListenerSet = node[internalEventHandlersKey];

          if (elementListenerSet === undefined) {
            elementListenerSet = node[internalEventHandlersKey] = new Set();
          }

          return elementListenerSet;
        }

        const loggedTypeFailures = {};
        const ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              const owner = element._owner;
              const stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }

        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            // $FlowFixMe This is okay but Flow doesn't know it.
            const has = Function.call.bind(Object.prototype.hasOwnProperty);

            for (const typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                let error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.

                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== 'function') {
                    const err = Error(`${componentName || 'React class'}: ${location} type \`${typeSpecName}\` is invalid; ` + `it must be a function, usually from the \`prop-types\` package, but received \`${typeof typeSpecs[typeSpecName]}\`.` + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                  }

                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                } catch (ex) {
                  error$1 = ex;
                }

                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }

                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error('Failed %s type: %s', location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }

        const valueStack = [];
        let fiberStack;
        {
          fiberStack = [];
        }
        let index = -1;

        function createCursor(defaultValue) {
          return {
            current: defaultValue,
          };
        }

        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error('Unexpected pop.');
            }
            return;
          }

          {
            if (fiber !== fiberStack[index]) {
              error('Unexpected Fiber popped.');
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }

        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }

        let warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        const emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        } // A cursor to the current merged context object on the stack.

        const contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

        const didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
        // We use this to get access to the parent context after we have already
        // pushed the next context provider, and now need to merge their contexts.

        let previousContext = emptyContextObject;

        function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              // If the fiber is a context provider itself, when we read its context
              // we may have already pushed its own child context on the stack. A context
              // provider should not "see" its own child context. Therefore we read the
              // previous (parent) context instead for a context provider.
              return previousContext;
            }

            return contextStackCursor.current;
          }
        }

        function cacheContext(workInProgress, unmaskedContext, maskedContext) {
          {
            const instance = workInProgress.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }

        function getMaskedContext(workInProgress, unmaskedContext) {
          {
            const { type } = workInProgress;
            const { contextTypes } = type;

            if (!contextTypes) {
              return emptyContextObject;
            } // Avoid recreating masked context unless unmasked context has changed.
            // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
            // This may trigger infinite loops if componentWillReceiveProps calls setState.

            const instance = workInProgress.stateNode;

            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }

            const context = {};

            for (const key in contextTypes) {
              context[key] = unmaskedContext[key];
            }

            {
              const name = getComponentName(type) || 'Unknown';
              checkPropTypes(contextTypes, context, 'context', name);
            } // Cache unmasked context so we can avoid recreating masked context unless necessary.
            // Context is created before the class component is instantiated so check for instance.

            if (instance) {
              cacheContext(workInProgress, unmaskedContext, context);
            }

            return context;
          }
        }

        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }

        function isContextProvider(type) {
          {
            const { childContextTypes } = type;
            return childContextTypes !== null && childContextTypes !== undefined;
          }
        }

        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }

        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }

        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error('Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.');
              }
            }

            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }

        function processChildContext(fiber, type, parentContext) {
          {
            const instance = fiber.stateNode;
            const { childContextTypes } = type; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
            // It has only been added in Fiber to match the (unintentional) behavior in Stack.

            if (typeof instance.getChildContext !== 'function') {
              {
                const componentName = getComponentName(type) || 'Unknown';

                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                }
              }
              return parentContext;
            }

            const childContext = instance.getChildContext();

            for (const contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error(`${getComponentName(type) || 'Unknown'}.getChildContext(): key "${contextKey}" is not defined in childContextTypes.`);
                }
              }
            }

            {
              const name = getComponentName(type) || 'Unknown';
              checkPropTypes(childContextTypes, childContext, 'child context', name);
            }
            return _assign({}, parentContext, childContext);
          }
        }

        function pushContextProvider(workInProgress) {
          {
            const instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
            // If the instance does not exist yet, we will push null at first,
            // and replace it on the stack later when invalidating the context.

            const memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
            // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
            return true;
          }
        }

        function invalidateContextProvider(workInProgress, type, didChange) {
          {
            const instance = workInProgress.stateNode;

            if (!instance) {
              {
                throw Error('Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.');
              }
            }

            if (didChange) {
              // Merge parent and own context.
              // Skip this if we're not updating due to sCU.
              // This avoids unnecessarily recomputing memoized values.
              const mergedContext = processChildContext(workInProgress, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
              // It is important to unwind the context in the reverse order.

              pop(didPerformWorkStackCursor, workInProgress);
              pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

              push(contextStackCursor, mergedContext, workInProgress);
              push(didPerformWorkStackCursor, didChange, workInProgress);
            } else {
              pop(didPerformWorkStackCursor, workInProgress);
              push(didPerformWorkStackCursor, didChange, workInProgress);
            }
          }
        }

        function findCurrentUnmaskedContext(fiber) {
          {
            // Currently this is only used with renderSubtreeIntoContainer; not sure if it
            // makes sense elsewhere
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error('Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.');
              }
            }

            let node = fiber;

            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;

                case ClassComponent:
                {
                  const Component = node.type;

                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }

                  break;
                }
              }

              node = node.return;
            } while (node !== null);

            {
              {
                throw Error('Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
              }
            }
          }
        }

        const LegacyRoot = 0;
        const BlockingRoot = 1;
        const ConcurrentRoot = 2;
        let rendererID = null;
        let injectedHook = null;
        let hasLoggedError = false;
        const isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
            // No DevTools
            return false;
          }

          const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

          if (hook.isDisabled) {
            // This isn't a real property on the hook, but it can be set to opt out
            // of DevTools integration and associated warnings and logs.
            // https://github.com/facebook/react/issues/3877
            return true;
          }

          if (!hook.supportsFiber) {
            {
              error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
            } // DevTools exists, even though it doesn't support Fiber.

            return true;
          }

          try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

            injectedHook = hook;
          } catch (err) {
            // Catch all errors because it is unsafe to throw during initialization.
            {
              error('React instrumentation encountered an error: %s.', err);
            }
          } // DevTools exists

          return true;
        }

        function onScheduleRoot(root, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }

        function onCommitRoot(root, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
            try {
              const didError = (root.current.flags & DidCapture) === DidCapture;

              if (enableProfilerTimer) {
                injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }

        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }

        const Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
        const Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
        const Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
        const Scheduler_shouldYield = Scheduler.unstable_shouldYield;
        const Scheduler_requestPaint = Scheduler.unstable_requestPaint;
        const Scheduler_now$1 = Scheduler.unstable_now;
        const Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        const Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        const Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        const Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
        const Scheduler_LowPriority = Scheduler.unstable_LowPriority;
        const Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          // Provide explicit error message when production+profiling bundle of e.g.
          // react-dom is used with production (non-profiling) bundle of
          // scheduler/tracing
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error('It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling');
            }
          }
        }
        const fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
        // ascending numbers so we can compare them like numbers. They start at 90 to
        // avoid clashing with Scheduler's priorities.

        const ImmediatePriority$1 = 99;
        const UserBlockingPriority$2 = 98;
        const NormalPriority$1 = 97;
        const LowPriority$1 = 96;
        const IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

        const NoPriority$1 = 90;
        const shouldYield = Scheduler_shouldYield;
        const requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
    Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
        let syncQueue = null;
        let immediateQueueCallbackNode = null;
        let isFlushingSyncQueue = false;
        const initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
        // This will be the case for modern browsers that support `performance.now`. In
        // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
        // timestamp. In that case, subtract the module initialization time to simulate
        // the behavior of performance.now and keep our times small enough to fit
        // within 32 bits.
        // TODO: Consider lifting this into Scheduler.

        const now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
          return Scheduler_now$1() - initialTimeMs$1;
        };

        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;

            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$2;

            case Scheduler_NormalPriority:
              return NormalPriority$1;

            case Scheduler_LowPriority:
              return LowPriority$1;

            case Scheduler_IdlePriority:
              return IdlePriority$1;

            default:
            {
              {
                throw Error('Unknown priority level.');
              }
            }
          }
        }

        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;

            case UserBlockingPriority$2:
              return Scheduler_UserBlockingPriority;

            case NormalPriority$1:
              return Scheduler_NormalPriority;

            case LowPriority$1:
              return Scheduler_LowPriority;

            case IdlePriority$1:
              return Scheduler_IdlePriority;

            default:
            {
              {
                throw Error('Unknown priority level.');
              }
            }
          }
        }

        function runWithPriority$1(reactPriorityLevel, fn) {
          const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }

        function scheduleCallback(reactPriorityLevel, callback, options) {
          const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }

        function scheduleSyncCallback(callback) {
          // Push this callback into an internal queue. We'll flush these either in
          // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
          if (syncQueue === null) {
            syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            // Push onto existing queue. Don't need to schedule a callback because
            // we already scheduled one when we created the queue.
            syncQueue.push(callback);
          }

          return fakeCallbackNode;
        }

        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }

        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            const node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }

          flushSyncCallbackQueueImpl();
        }

        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            let i = 0;
            {
              try {
                const _isSync2 = true;
                const _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, () => {
                  for (; i < _queue.length; i++) {
                    let callback = _queue[i];

                    do {
                      callback = callback(_isSync2);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                } // Resume flushing in the next tick

                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
        } // TODO: this is special because it gets imported during build.

        const ReactVersion = '17.0.1';
        const NoMode = 0;
        const StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
        // tag instead

        const BlockingMode = 2;
        const ConcurrentMode = 4;
        const ProfileMode = 8;
        const DebugTracingMode = 16;
        const { ReactCurrentBatchConfig } = ReactSharedInternals;
        const NoTransition = 0;

        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }

        const ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings(fiber, instance) {},
          flushPendingUnsafeLifecycleWarnings() {},
          recordLegacyContextWarning(fiber, instance) {},
          flushLegacyContextWarning() {},
          discardPendingWarnings() {},
        };
        {
          const findStrictRoot = function (fiber) {
            let maybeStrictRoot = null;
            let node = fiber;

            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }

              node = node.return;
            }

            return maybeStrictRoot;
          };

          const setToSortedString = function (set) {
            const array = [];
            set.forEach(value => {
              array.push(value);
            });
            return array.sort().join(', ');
          };

          let pendingComponentWillMountWarnings = [];
          let pendingUNSAFE_ComponentWillMountWarnings = [];
          let pendingComponentWillReceivePropsWarnings = [];
          let pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          let pendingComponentWillUpdateWarnings = [];
          let pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

          const didWarnAboutUnsafeLifecycles = new Set();

          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
            // Dedup strategy: Warn once per component.
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }

            if (typeof instance.componentWillMount === 'function' // Don't warn about react-lifecycles-compat polyfilled components.
        && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }

            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }

            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }

            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }

            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }

            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };

          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
            // We do an initial pass to gather component names
            const componentWillMountUniqueNames = new Set();

            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(fiber => {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }

            const UNSAFE_componentWillMountUniqueNames = new Set();

            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }

            const componentWillReceivePropsUniqueNames = new Set();

            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(fiber => {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }

            const UNSAFE_componentWillReceivePropsUniqueNames = new Set();

            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }

            const componentWillUpdateUniqueNames = new Set();

            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(fiber => {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }

            const UNSAFE_componentWillUpdateUniqueNames = new Set();

            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            } // Finally, we flush all the warnings
            // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'

            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              const sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
            }

            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              const _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

              error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
            }

            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              const _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

              error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
            }

            if (componentWillMountUniqueNames.size > 0) {
              const _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

              warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
            }

            if (componentWillReceivePropsUniqueNames.size > 0) {
              const _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

              warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
            }

            if (componentWillUpdateUniqueNames.size > 0) {
              const _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

              warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
            }
          };

          let pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

          const didWarnAboutLegacyContext = new Set();

          ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
            const strictRoot = findStrictRoot(fiber);

            if (strictRoot === null) {
              error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
              return;
            } // Dedup strategy: Warn once per component.

            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }

            let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
              if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }

              warningsForRoot.push(fiber);
            }
          };

          ReactStrictModeWarnings.flushLegacyContextWarning = function () {
            pendingLegacyContextWarning.forEach((fiberArray, strictRoot) => {
              if (fiberArray.length === 0) {
                return;
              }

              const firstFiber = fiberArray[0];
              const uniqueNames = new Set();
              fiberArray.forEach(fiber => {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
              });
              const sortedNames = setToSortedString(uniqueNames);

              try {
                setCurrentFiber(firstFiber);
                error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };

          ReactStrictModeWarnings.discardPendingWarnings = function () {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }

        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            const props = _assign({}, baseProps);

            const { defaultProps } = Component;

            for (const propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }

            return props;
          }

          return baseProps;
        } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
        // Math.pow(2, 30) - 1
        // 0b111111111111111111111111111111

        const MAX_SIGNED_31_BIT_INT = 1073741823;
        const valueCursor = createCursor(null);
        let rendererSigil;
        {
          // Use this to detect multiple renderers using the same context
          rendererSigil = {};
        }
        let currentlyRenderingFiber = null;
        let lastContextDependency = null;
        let lastContextWithAllBitsObserved = null;
        let isDisallowedContextReadInDEV = false;

        function resetContextDependencies() {
          // This is called right before React yields execution, to ensure `readContext`
          // cannot be called outside the render phase.
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }

        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }

        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }

        function pushProvider(providerFiber, nextValue) {
          const context = providerFiber.type._context;
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
              }

              context._currentRenderer = rendererSigil;
            }
          }
        }

        function popProvider(providerFiber) {
          const currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          const context = providerFiber.type._context;
          {
            context._currentValue = currentValue;
          }
        }

        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            // No change
            return 0;
          }
          const changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
              error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
            }
          }
          return changedBits | 0;
        }

        function scheduleWorkOnParentPath(parent, renderLanes) {
          // Update the child lanes of all the ancestors, including the alternates.
          let node = parent;

          while (node !== null) {
            const { alternate } = node;

            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes);

              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else {
              // Neither alternate was updated, which means the rest of the
              // ancestor path already has sufficient priority.
              break;
            }

            node = node.return;
          }
        }

        function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
          let fiber = workInProgress.child;

          if (fiber !== null) {
            // Set the return pointer of the child to the work-in-progress fiber.
            fiber.return = workInProgress;
          }

          while (fiber !== null) {
            let nextFiber = void 0; // Visit this fiber.

            const list = fiber.dependencies;

            if (list !== null) {
              nextFiber = fiber.child;
              let dependency = list.firstContext;

              while (dependency !== null) {
                // Check if the context matches.
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  // Match! Schedule an update on this fiber.
                  if (fiber.tag === ClassComponent) {
                    // Schedule a force update on the work-in-progress.
                    const update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                    update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                    // update to the current fiber, too, which means it will persist even if
                    // this render is thrown away. Since it's a race condition, not sure it's
                    // worth fixing.

                    enqueueUpdate(fiber, update);
                  }

                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                  const { alternate } = fiber;

                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                  }

                  scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

                  list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                  // dependency list.

                  break;
                }

                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              // Don't scan deeper if this is a matching provider
              nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            } else {
              // Traverse down.
              nextFiber = fiber.child;
            }

            if (nextFiber !== null) {
              // Set the return pointer of the child to the work-in-progress fiber.
              nextFiber.return = fiber;
            } else {
              // No child. Traverse to next sibling.
              nextFiber = fiber;

              while (nextFiber !== null) {
                if (nextFiber === workInProgress) {
                  // We're back to the root of this subtree. Exit.
                  nextFiber = null;
                  break;
                }

                const { sibling } = nextFiber;

                if (sibling !== null) {
                  // Set the return pointer of the sibling to the work-in-progress fiber.
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                } // No more siblings. Traverse up.

                nextFiber = nextFiber.return;
              }
            }

            fiber = nextFiber;
          }
        }

        function prepareToReadContext(workInProgress, renderLanes) {
          currentlyRenderingFiber = workInProgress;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          const { dependencies } = workInProgress;

          if (dependencies !== null) {
            const { firstContext } = dependencies;

            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes)) {
                // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
              } // Reset the work-in-progress list

              dependencies.firstContext = null;
            }
          }
        }

        function readContext(context, observedBits) {
          {
            // This warning would fire if you read context inside a Hook like useMemo.
            // Unlike the class check below, it's not enforced in production for perf.
            if (isDisallowedContextReadInDEV) {
              error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
            }
          }
          if (lastContextWithAllBitsObserved === context) ;else if (observedBits === false || observedBits === 0) ;else {
            let resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
              // Observe all updates.
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }

            const contextItem = {
              context,
              observedBits: resolvedObservedBits,
              next: null,
            };

            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error('Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().');
                }
              } // This is the first dependency for this component. Create a new list.

              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
                responders: null,
              };
            } else {
              // Append a new context item.
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context._currentValue;
        }

        const UpdateState = 0;
        const ReplaceState = 1;
        var ForceUpdate = 2;
        const CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
        // It should only be read right after calling `processUpdateQueue`, via
        // `checkHasForceUpdateAfterProcessing`.

        let hasForceUpdate = false;
        let didWarnUpdateInsideUpdate;
        let currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }

        function initializeUpdateQueue(fiber) {
          const queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
            },
            effects: null,
          };
          fiber.updateQueue = queue;
        }

        function cloneUpdateQueue(current, workInProgress) {
          // Clone the update queue from current. Unless it's already a clone.
          const queue = workInProgress.updateQueue;
          const currentQueue = current.updateQueue;

          if (queue === currentQueue) {
            const clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects,
            };
            workInProgress.updateQueue = clone;
          }
        }

        function createUpdate(eventTime, lane) {
          const update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null,
          };
          return update;
        }

        function enqueueUpdate(fiber, update) {
          const { updateQueue } = fiber;

          if (updateQueue === null) {
            // Only occurs if the fiber has been unmounted.
            return;
          }

          const sharedQueue = updateQueue.shared;
          const { pending } = sharedQueue;

          if (pending === null) {
            // This is the first update. Create a circular list.
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }

          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
              didWarnUpdateInsideUpdate = true;
            }
          }
        }

        function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
          // Captured updates are updates that are thrown by a child during the render
          // phase. They should be discarded if the render is aborted. Therefore,
          // we should only put them on the work-in-progress queue, not the current one.
          let queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

          const current = workInProgress.alternate;

          if (current !== null) {
            const currentQueue = current.updateQueue;

            if (queue === currentQueue) {
              // The work-in-progress queue is the same as current. This happens when
              // we bail out on a parent fiber that then captures an error thrown by
              // a child. Since we want to append the update only to the work-in
              // -progress queue, we need to clone the updates. We usually clone during
              // processUpdateQueue, but that didn't happen in this case because we
              // skipped over the parent when we bailed out.
              let newFirst = null;
              let newLast = null;
              const { firstBaseUpdate } = queue;

              if (firstBaseUpdate !== null) {
                // Loop through the updates and clone them.
                let update = firstBaseUpdate;

                do {
                  const clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null,
                  };

                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }

                  update = update.next;
                } while (update !== null); // Append the captured update the end of the cloned list.

                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                // There are no base updates.
                newFirst = newLast = capturedUpdate;
              }

              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects,
              };
              workInProgress.updateQueue = queue;
              return;
            }
          } // Append the update to the end of the list.

          const { lastBaseUpdate } = queue;

          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }

          queue.lastBaseUpdate = capturedUpdate;
        }

        function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState:
            {
              const { payload } = update;

              if (typeof payload === 'function') {
              // Updater function
                {
                  enterDisallowedContextReadInDEV();
                }
                const nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress.mode & StrictMode) {
                    disableLogs();

                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }

                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              } // State object

              return payload;
            }

            case CaptureUpdate:
            {
              workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            }
            // Intentional fallthrough

            case UpdateState:
            {
              const _payload = update.payload;
              let partialState;

              if (typeof _payload === 'function') {
              // Updater function
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress.mode & StrictMode) {
                    disableLogs();

                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }

                  exitDisallowedContextReadInDEV();
                }
              } else {
              // Partial state object
                partialState = _payload;
              }

              if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
                return prevState;
              } // Merge the partial state and the previous state.

              return _assign({}, prevState, partialState);
            }

            case ForceUpdate:
            {
              hasForceUpdate = true;
              return prevState;
            }
          }

          return prevState;
        }

        function processUpdateQueue(workInProgress, props, instance, renderLanes) {
          // This is always non-null on a ClassComponent or HostRoot
          const queue = workInProgress.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          let { firstBaseUpdate } = queue;
          let { lastBaseUpdate } = queue; // Check if there are pending updates. If so, transfer them to the base queue.

          let pendingQueue = queue.shared.pending;

          if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.

            const lastPendingUpdate = pendingQueue;
            const firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue

            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }

            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument

            const current = workInProgress.alternate;

            if (current !== null) {
              // This is always non-null on a ClassComponent or HostRoot
              const currentQueue = current.updateQueue;
              const currentLastBaseUpdate = currentQueue.lastBaseUpdate;

              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }

                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          } // These values may change as we process the queue.

          if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            let newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.

            let newLanes = NoLanes;
            let newBaseState = null;
            let newFirstBaseUpdate = null;
            let newLastBaseUpdate = null;
            let update = firstBaseUpdate;

            do {
              const updateLane = update.lane;
              const updateEventTime = update.eventTime;

              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                // Priority is insufficient. Skip this update. If this is the first
                // skipped update, the previous update/state is the new base
                // update/state.
                const clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null,
                };

                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                } // Update the remaining priority in the queue.

                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                // This update does have sufficient priority.
                if (newLastBaseUpdate !== null) {
                  const _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null,
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                } // Process this update.

                newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                const { callback } = update;

                if (callback !== null) {
                  workInProgress.flags |= Callback;
                  const { effects } = queue;

                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }

              update = update.next;

              if (update === null) {
                pendingQueue = queue.shared.pending;

                if (pendingQueue === null) {
                  break;
                } else {
                  // An update was scheduled from inside a reducer. Add the new
                  // pending updates to the end of the list and keep processing.
                  const _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                  // unravel them when transferring them to the base queue.

                  const _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);

            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }

            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.

            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
          }

          {
            currentlyProcessingQueue = null;
          }
        }

        function callCallback(callback, context) {
          if (!(typeof callback === 'function')) {
            {
              throw Error(`Invalid argument passed as callback. Expected a function. Instead received: ${callback}`);
            }
          }

          callback.call(context);
        }

        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }

        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }

        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          // Commit the effects
          const { effects } = finishedQueue;
          finishedQueue.effects = null;

          if (effects !== null) {
            for (let i = 0; i < effects.length; i++) {
              const effect = effects[i];
              const { callback } = effect;

              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }

        const fakeInternalInstance = {};
        const { isArray } = Array; // React.Component uses a shared frozen object by default.
        // We'll use it to determine whether we need to initialize legacy refs.

        const emptyRefsObject = new React.Component().refs;
        let didWarnAboutStateAssignmentForComponent;
        let didWarnAboutUninitializedState;
        let didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        let didWarnAboutLegacyLifecyclesAndDerivedState;
        let didWarnAboutUndefinedDerivedState;
        let warnOnUndefinedDerivedState;
        let warnOnInvalidCallback;
        let didWarnAboutDirectlyAssigningPropsToState;
        let didWarnAboutContextTypeAndContextTypes;
        let didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          const didWarnOnInvalidCallback = new Set();

          warnOnInvalidCallback = function (callback, callerName) {
            if (callback === null || typeof callback === 'function') {
              return;
            }

            const key = `${callerName}_${callback}`;

            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
            }
          };

          warnOnUndefinedDerivedState = function (type, partialState) {
            if (partialState === undefined) {
              const componentName = getComponentName(type) || 'Component';

              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
              }
            }
          }; // This is so gross but it's at least non-critical and can be removed if
          // it causes problems. This is meant to give a nicer error message for
          // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
          // ...)) which otherwise throws a "_processChildContext is not a function"
          // exception.

          Object.defineProperty(fakeInternalInstance, '_processChildContext', {
            enumerable: false,
            value() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            },
          });
          Object.freeze(fakeInternalInstance);
        }

        function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
          const prevState = workInProgress.memoizedState;
          {
            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
              } finally {
                reenableLogs();
              }
            }
          }
          const partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          } // Merge the partial state and the previous state.

          const memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
          workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
          // base state.

          if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            const { updateQueue } = workInProgress;
            updateQueue.baseState = memoizedState;
          }
        }

        const classComponentUpdater = {
          isMounted,
          enqueueSetState(inst, payload, callback) {
            const fiber = get(inst);
            const eventTime = requestEventTime();
            const lane = requestUpdateLane(fiber);
            const update = createUpdate(eventTime, lane);
            update.payload = payload;

            if (callback !== undefined && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'setState');
              }
              update.callback = callback;
            }

            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState(inst, payload, callback) {
            const fiber = get(inst);
            const eventTime = requestEventTime();
            const lane = requestUpdateLane(fiber);
            const update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;

            if (callback !== undefined && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'replaceState');
              }
              update.callback = callback;
            }

            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate(inst, callback) {
            const fiber = get(inst);
            const eventTime = requestEventTime();
            const lane = requestUpdateLane(fiber);
            const update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;

            if (callback !== undefined && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'forceUpdate');
              }
              update.callback = callback;
            }

            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
        };

        function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
          const instance = workInProgress.stateNode;

          if (typeof instance.shouldComponentUpdate === 'function') {
            {
              if (workInProgress.mode & StrictMode) {
                disableLogs();

                try {
                  // Invoke the function an extra time to help detect side-effects.
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  reenableLogs();
                }
              }
            }
            const shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (shouldUpdate === undefined) {
                error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
              }
            }
            return shouldUpdate;
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }

          return true;
        }

        function checkClassInstance(workInProgress, ctor, newProps) {
          const instance = workInProgress.stateNode;
          {
            const name = getComponentName(ctor) || 'Component';
            const renderPresent = instance.render;

            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
              } else {
                error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
              }
            }

            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
            }

            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
            }

            if (instance.propTypes) {
              error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
            }

            if (instance.contextType) {
              error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
            }

            {
              if (instance.contextTypes) {
                error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
              }

              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
              }
            }

            if (typeof instance.componentShouldUpdate === 'function') {
              error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
            }

            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
              error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
            }

            if (typeof instance.componentDidUnmount === 'function') {
              error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
            }

            if (typeof instance.componentDidReceiveProps === 'function') {
              error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
            }

            if (typeof instance.componentWillRecieveProps === 'function') {
              error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
            }

            if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
              error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
            }

            const hasMutatedProps = instance.props !== newProps;

            if (instance.props !== undefined && hasMutatedProps) {
              error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
            }

            if (instance.defaultProps) {
              error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
            }

            if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
            }

            if (typeof instance.getDerivedStateFromProps === 'function') {
              error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
            }

            if (typeof instance.getDerivedStateFromError === 'function') {
              error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
            }

            if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
              error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
            }

            const _state = instance.state;

            if (_state && (typeof _state !== 'object' || isArray(_state))) {
              error('%s.state: must be set to an object or null', name);
            }

            if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
              error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
            }
          }
        }

        function adoptClassInstance(workInProgress, instance) {
          instance.updater = classComponentUpdater;
          workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

          set(instance, workInProgress);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }

        function constructClassInstance(workInProgress, ctor, props) {
          let isLegacyContextConsumer = false;
          let unmaskedContext = emptyContextObject;
          let context = emptyContextObject;
          const { contextType } = ctor;
          {
            if ('contextType' in ctor) {
              const isValid = // Allow null for conditional declaration
          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                let addendum = '';

                if (contextType === undefined) {
                  addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
                } else if (typeof contextType !== 'object') {
                  addendum = ` However, it is set to a ${typeof contextType}.`;
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = ' Did you accidentally pass the Context.Provider instead?';
                } else if (contextType._context !== undefined) {
                  // <Context.Consumer>
                  addendum = ' Did you accidentally pass the Context.Consumer instead?';
                } else {
                  addendum = ` However, it is set to an object with keys {${Object.keys(contextType).join(', ')}}.`;
                }

                error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
              }
            }
          }

          if (typeof contextType === 'object' && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            const { contextTypes } = ctor;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
          } // Instantiate twice to help detect side-effects.

          {
            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                new ctor(props, context); // eslint-disable-line no-new
              } finally {
                reenableLogs();
              }
            }
          }
          const instance = new ctor(props, context);
          const state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
          adoptClassInstance(workInProgress, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
              const componentName = getComponentName(ctor) || 'Component';

              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
              }
            } // If new component APIs are defined, "unsafe" lifecycles won't be called.
            // Warn about these lifecycles if they are present.
            // Don't warn about react-lifecycles-compat polyfilled methods though.

            if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
              let foundWillMountName = null;
              let foundWillReceivePropsName = null;
              let foundWillUpdateName = null;

              if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = 'componentWillMount';
              } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                foundWillMountName = 'UNSAFE_componentWillMount';
              }

              if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = 'componentWillReceiveProps';
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
              }

              if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = 'componentWillUpdate';
              } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                foundWillUpdateName = 'UNSAFE_componentWillUpdate';
              }

              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                const _componentName = getComponentName(ctor) || 'Component';

                const newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? `\n  ${foundWillMountName}` : '', foundWillReceivePropsName !== null ? `\n  ${foundWillReceivePropsName}` : '', foundWillUpdateName !== null ? `\n  ${foundWillUpdateName}` : '');
                }
              }
            }
          } // Cache unmasked context so we can avoid recreating masked context unless necessary.
          // ReactFiberContext usually updates this cache but can't for newly-created instances.

          if (isLegacyContextConsumer) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return instance;
        }

        function callComponentWillMount(workInProgress, instance) {
          const oldState = instance.state;

          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }

          if (oldState !== instance.state) {
            {
              error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
          const oldState = instance.state;

          if (typeof instance.componentWillReceiveProps === 'function') {
            instance.componentWillReceiveProps(newProps, nextContext);
          }

          if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }

          if (instance.state !== oldState) {
            {
              const componentName = getComponentName(workInProgress.type) || 'Component';

              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        } // Invokes the mount life-cycles on a previously never rendered instance.

        function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
          {
            checkClassInstance(workInProgress, ctor, newProps);
          }
          const instance = workInProgress.stateNode;
          instance.props = newProps;
          instance.state = workInProgress.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress);
          const { contextType } = ctor;

          if (typeof contextType === 'object' && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
          }

          {
            if (instance.state === newProps) {
              const componentName = getComponentName(ctor) || 'Component';

              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
              }
            }

            if (workInProgress.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
            }

            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
            }
          }
          processUpdateQueue(workInProgress, newProps, instance, renderLanes);
          instance.state = workInProgress.memoizedState;
          const { getDerivedStateFromProps } = ctor;

          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
          } // In order to support react-lifecycles-compat polyfilled components,
          // Unsafe lifecycles should not be invoked for components using the new APIs.

          if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.

            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
          }

          if (typeof instance.componentDidMount === 'function') {
            workInProgress.flags |= Update;
          }
        }

        function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
          const instance = workInProgress.stateNode;
          const oldProps = workInProgress.memoizedProps;
          instance.props = oldProps;
          const oldContext = instance.context;
          const { contextType } = ctor;
          let nextContext = emptyContextObject;

          if (typeof contextType === 'object' && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            const nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
          }

          const { getDerivedStateFromProps } = ctor;
          const hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
          // ever the previously attempted to render - not the "current". However,
          // during componentDidUpdate we pass the "current" props.
          // In order to support react-lifecycles-compat polyfilled components,
          // Unsafe lifecycles should not be invoked for components using the new APIs.

          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
            }
          }

          resetHasForceUpdateBeforeProcessing();
          const oldState = workInProgress.memoizedState;
          let newState = instance.state = oldState;
          processUpdateQueue(workInProgress, newProps, instance, renderLanes);
          newState = workInProgress.memoizedState;

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
              workInProgress.flags |= Update;
            }

            return false;
          }

          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
          }

          const shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

          if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
              if (typeof instance.componentWillMount === 'function') {
                instance.componentWillMount();
              }

              if (typeof instance.UNSAFE_componentWillMount === 'function') {
                instance.UNSAFE_componentWillMount();
              }
            }

            if (typeof instance.componentDidMount === 'function') {
              workInProgress.flags |= Update;
            }
          } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
              workInProgress.flags |= Update;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.

            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
          } // Update the existing instance's state, props, and context pointers even
          // if shouldComponentUpdate returns false.

          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        } // Invokes the update life-cycles and returns false if it shouldn't rerender.

        function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
          const instance = workInProgress.stateNode;
          cloneUpdateQueue(current, workInProgress);
          const unresolvedOldProps = workInProgress.memoizedProps;
          const oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
          instance.props = oldProps;
          const unresolvedNewProps = workInProgress.pendingProps;
          const oldContext = instance.context;
          const { contextType } = ctor;
          let nextContext = emptyContextObject;

          if (typeof contextType === 'object' && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
          }

          const { getDerivedStateFromProps } = ctor;
          const hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
          // ever the previously attempted to render - not the "current". However,
          // during componentDidUpdate we pass the "current" props.
          // In order to support react-lifecycles-compat polyfilled components,
          // Unsafe lifecycles should not be invoked for components using the new APIs.

          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
            }
          }

          resetHasForceUpdateBeforeProcessing();
          const oldState = workInProgress.memoizedState;
          let newState = instance.state = oldState;
          processUpdateQueue(workInProgress, newProps, instance, renderLanes);
          newState = workInProgress.memoizedState;

          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
              if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.flags |= Update;
              }
            }

            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.flags |= Snapshot;
              }
            }

            return false;
          }

          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
          }

          const shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

          if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
              if (typeof instance.componentWillUpdate === 'function') {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }

              if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }

            if (typeof instance.componentDidUpdate === 'function') {
              workInProgress.flags |= Update;
            }

            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              workInProgress.flags |= Snapshot;
            }
          } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
              if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.flags |= Update;
              }
            }

            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.flags |= Snapshot;
              }
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.

            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
          } // Update the existing instance's state, props, and context pointers even
          // if shouldComponentUpdate returns false.

          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }

        let didWarnAboutMaps;
        let didWarnAboutGenerators;
        let didWarnAboutStringRefs;
        let ownerHasKeyUseWarning;
        let ownerHasFunctionTypeWarning;

        let warnForMissingKey = function (child, returnFiber) {};

        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          /**
       * Warn if there's no key explicitly set on dynamic arrays of children or
       * object keys are not valid. This allows us to keep track of children between
       * updates.
       */

          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};

          warnForMissingKey = function (child, returnFiber) {
            if (child === null || typeof child !== 'object') {
              return;
            }

            if (!child._store || child._store.validated || child.key != null) {
              return;
            }

            if (!(typeof child._store === 'object')) {
              {
                throw Error('React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.');
              }
            }

            child._store.validated = true;
            const componentName = getComponentName(returnFiber.type) || 'Component';

            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }

            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
          };
        }
        const isArray$1 = Array.isArray;

        function coerceRef(returnFiber, current, element) {
          const mixedRef = element.ref;

          if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            {
              // TODO: Clean this up once we turn on the string ref warning for
              // everyone, because the strict mode case will no longer be relevant
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                const componentName = getComponentName(returnFiber.type) || 'Component';

                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }

            if (element._owner) {
              const owner = element._owner;
              let inst;

              if (owner) {
                const ownerFiber = owner;

                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error('Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref');
                  }
                }

                inst = ownerFiber.stateNode;
              }

              if (!inst) {
                {
                  throw Error(`Missing owner for string ref ${mixedRef}. This error is likely caused by a bug in React. Please file an issue.`);
                }
              }

              const stringRef = `${mixedRef}`; // Check if previous string ref matches new string ref

              if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
                return current.ref;
              }

              const ref = function (value) {
                let { refs } = inst;

                if (refs === emptyRefsObject) {
                  // This is a lazy pooled frozen object, so we need to initialize.
                  refs = inst.refs = {};
                }

                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };

              ref._stringRef = stringRef;
              return ref;
            }
            if (!(typeof mixedRef === 'string')) {
              {
                throw Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
              }
            }

            if (!element._owner) {
              {
                throw Error(`Element ref was specified as a string (${mixedRef}) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.`);
              }
            }
          }

          return mixedRef;
        }

        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== 'textarea') {
            {
              {
                throw Error(`Objects are not valid as a React child (found: ${Object.prototype.toString.call(newChild) === '[object Object]' ? `object with keys {${Object.keys(newChild).join(', ')}}` : newChild}). If you meant to render a collection of children, use an array instead.`);
              }
            }
          }
        }

        function warnOnFunctionType(returnFiber) {
          {
            const componentName = getComponentName(returnFiber.type) || 'Component';

            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }

            ownerHasFunctionTypeWarning[componentName] = true;
            error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
          }
        } // We avoid inlining this to avoid potential deopts from using try/catch.
        // to be able to optimize each path individually by branching early. This needs
        // a compiler or we can do it manually. Helpers that don't need this branching
        // live outside of this function.

        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              // Noop.
              return;
            } // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.

            const last = returnFiber.lastEffect;

            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }

            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
          }

          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              // Noop.
              return null;
            } // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.

            let childToDelete = currentFirstChild;

            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }

            return null;
          }

          function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            const existingChildren = new Map();
            let existingChild = currentFirstChild;

            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }

              existingChild = existingChild.sibling;
            }

            return existingChildren;
          }

          function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            const clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }

          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;

            if (!shouldTrackSideEffects) {
              // Noop.
              return lastPlacedIndex;
            }

            const current = newFiber.alternate;

            if (current !== null) {
              const oldIndex = current.index;

              if (oldIndex < lastPlacedIndex) {
                // This is a move.
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
              // This item can stay in place.
              return oldIndex;
            }
            // This is an insertion.
            newFiber.flags = Placement;
            return lastPlacedIndex;
          }

          function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = Placement;
            }

            return newFiber;
          }

          function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
              // Insert
              const created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            // Update
            const existing = useFiber(current, textContent);
            existing.return = returnFiber;
            return existing;
          }

          function updateElement(returnFiber, current, element, lanes) {
            if (current !== null) {
              if (current.elementType === element.type // Keep this check inline so it only runs on the false path:
          || isCompatibleFamilyForHotReloading(current, element)) {
                // Move based on index
                const existing = useFiber(current, element.props);
                existing.ref = coerceRef(returnFiber, current, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            } // Insert

            const created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
          }

          function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
              // Insert
              const created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            // Update
            const existing = useFiber(current, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }

          function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
              // Insert
              const created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            }
            // Update
            const existing = useFiber(current, fragment);
            existing.return = returnFiber;
            return existing;
          }

          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
              // Text nodes don't have keys. If the previous node is implicitly keyed
              // we can continue to replace it without aborting even if it is not a text
              // node.
              const created = createFiberFromText(`${newChild}`, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }

            if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                {
                  const _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }

                case REACT_PORTAL_TYPE:
                {
                  const _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

                  _created2.return = returnFiber;
                  return _created2;
                }
              }

              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                const _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

                _created3.return = returnFiber;
                return _created3;
              }

              throwOnInvalidObjectType(returnFiber, newChild);
            }

            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }

          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            const key = oldFiber !== null ? oldFiber.key : null;

            if (typeof newChild === 'string' || typeof newChild === 'number') {
              // Text nodes don't have keys. If the previous node is implicitly keyed
              // we can continue to replace it without aborting even if it is not a text
              // node.
              if (key !== null) {
                return null;
              }

              return updateTextNode(returnFiber, oldFiber, `${newChild}`, lanes);
            }

            if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  }
                  return null;
                }

                case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  }
                  return null;
                }
              }

              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }

                return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
              }

              throwOnInvalidObjectType(returnFiber, newChild);
            }

            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }

          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
              // Text nodes don't have keys, so we neither have to check the old nor
              // new node for the key. If both are text nodes, they match.
              const matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, `${newChild}`, lanes);
            }

            if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                {
                  const _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }

                case REACT_PORTAL_TYPE:
                {
                  const _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
              }

              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                const _matchedFiber3 = existingChildren.get(newIdx) || null;

                return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
              }

              throwOnInvalidObjectType(returnFiber, newChild);
            }

            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          /**
       * Warns if there is a duplicate or missing key
       */

          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== 'object' || child === null) {
                return knownKeys;
              }

              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var { key } = child;

                  if (typeof key !== 'string') {
                    break;
                  }

                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }

                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }

                  error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
                  break;
              }
            }
            return knownKeys;
          }

          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // This algorithm can't optimize by searching from both ends since we
            // don't have backpointers on fibers. I'm trying to see how far we can get
            // with that model. If it ends up not being worth the tradeoffs, we can
            // add it later.
            // Even with a two ended optimization, we'd want to optimize for the case
            // where there are few changes and brute force the comparison instead of
            // going for the Map. It'd like to explore hitting that path first in
            // forward-only mode and only go for the Map once we notice that we need
            // lots of look ahead. This doesn't handle reversal as well as two ended
            // search but that's unusual. Besides, for the two ended optimization to
            // work on Iterables, we'd need to copy the whole set.
            // In this first iteration, we'll just live with hitting the bad case
            // (adding everything to a Map) in for every insert/move.
            // If you change this code, also update reconcileChildrenIterator() which
            // uses the same algorithm.
            {
              // First, validate keys.
              let knownKeys = null;

              for (let i = 0; i < newChildren.length; i++) {
                const child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            let resultingFirstChild = null;
            let previousNewFiber = null;
            let oldFiber = currentFirstChild;
            let lastPlacedIndex = 0;
            let newIdx = 0;
            let nextOldFiber = null;

            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }

              const newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

              if (newFiber === null) {
                // TODO: This breaks on empty slots like null children. That's
                // unfortunate because it triggers the slow path all the time. We need
                // a better way to communicate whether this was a miss or null,
                // boolean, undefined, etc.
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }

                break;
              }

              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  // We matched the slot, but we didn't reuse the existing fiber, so we
                  // need to delete the existing child.
                  deleteChild(returnFiber, oldFiber);
                }
              }

              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
              } else {
                // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
              }

              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }

            if (newIdx === newChildren.length) {
              // We've reached the end of the new children. We can delete the rest.
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }

            if (oldFiber === null) {
              // If we don't have any more existing children we can choose a fast path
              // since the rest will all be insertions.
              for (; newIdx < newChildren.length; newIdx++) {
                const _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

                if (_newFiber === null) {
                  continue;
                }

                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

                if (previousNewFiber === null) {
                  // TODO: Move out of the loop. This only happens for the first run.
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }

                previousNewFiber = _newFiber;
              }

              return resultingFirstChild;
            } // Add all children to a key map for quick lookups.

            const existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

            for (; newIdx < newChildren.length; newIdx++) {
              const _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    // The new fiber is a work in progress, but if there exists a
                    // current, that means that we reused the fiber. We need to delete
                    // it from the child list so that we don't add it to the deletion
                    // list.
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }

                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }

                previousNewFiber = _newFiber2;
              }
            }

            if (shouldTrackSideEffects) {
              // Any existing children that weren't consumed above were deleted. We need
              // to add them to the deletion list.
              existingChildren.forEach(child => deleteChild(returnFiber, child));
            }

            return resultingFirstChild;
          }

          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            const iteratorFn = getIteratorFn(newChildrenIterable);

            if (!(typeof iteratorFn === 'function')) {
              {
                throw Error('An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.');
              }
            }

            {
              // We don't support rendering Generators because it's a mutation.
              // See https://github.com/facebook/react/issues/12995
              if (typeof Symbol === 'function' // $FlowFixMe Flow doesn't know about toStringTag
          && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) {
                  error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
                }

                didWarnAboutGenerators = true;
              } // Warn about using Maps as children

              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                }

                didWarnAboutMaps = true;
              } // First, validate keys.
              // We'll get a different iterator later for the main pass.

              const _newChildren = iteratorFn.call(newChildrenIterable);

              if (_newChildren) {
                let knownKeys = null;

                let _step = _newChildren.next();

                for (; !_step.done; _step = _newChildren.next()) {
                  const child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            const newChildren = iteratorFn.call(newChildrenIterable);

            if (!(newChildren != null)) {
              {
                throw Error('An iterable object provided no iterator.');
              }
            }

            let resultingFirstChild = null;
            let previousNewFiber = null;
            let oldFiber = currentFirstChild;
            let lastPlacedIndex = 0;
            let newIdx = 0;
            let nextOldFiber = null;
            let step = newChildren.next();

            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }

              const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

              if (newFiber === null) {
                // TODO: This breaks on empty slots like null children. That's
                // unfortunate because it triggers the slow path all the time. We need
                // a better way to communicate whether this was a miss or null,
                // boolean, undefined, etc.
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }

                break;
              }

              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  // We matched the slot, but we didn't reuse the existing fiber, so we
                  // need to delete the existing child.
                  deleteChild(returnFiber, oldFiber);
                }
              }

              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
              } else {
                // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
              }

              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }

            if (step.done) {
              // We've reached the end of the new children. We can delete the rest.
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }

            if (oldFiber === null) {
              // If we don't have any more existing children we can choose a fast path
              // since the rest will all be insertions.
              for (; !step.done; newIdx++, step = newChildren.next()) {
                const _newFiber3 = createChild(returnFiber, step.value, lanes);

                if (_newFiber3 === null) {
                  continue;
                }

                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

                if (previousNewFiber === null) {
                  // TODO: Move out of the loop. This only happens for the first run.
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }

                previousNewFiber = _newFiber3;
              }

              return resultingFirstChild;
            } // Add all children to a key map for quick lookups.

            const existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

            for (; !step.done; newIdx++, step = newChildren.next()) {
              const _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    // The new fiber is a work in progress, but if there exists a
                    // current, that means that we reused the fiber. We need to delete
                    // it from the child list so that we don't add it to the deletion
                    // list.
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }

                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }

                previousNewFiber = _newFiber4;
              }
            }

            if (shouldTrackSideEffects) {
              // Any existing children that weren't consumed above were deleted. We need
              // to add them to the deletion list.
              existingChildren.forEach(child => deleteChild(returnFiber, child));
            }

            return resultingFirstChild;
          }

          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              // We already have an existing node so let's just update it and delete
              // the rest.
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              const existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.

            deleteRemainingChildren(returnFiber, currentFirstChild);
            const created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }

          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            const { key } = element;
            let child = currentFirstChild;

            while (child !== null) {
              // TODO: If key === null and child.key === null, then this only applies to
              // the first item in the list.
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment:
                  {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      const existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }

                    break;
                  }

                  case Block: // We intentionally fallthrough here if enableBlocksAPI is not on.
                    // eslint-disable-next-lined no-fallthrough

                  default:
                  {
                    if (child.elementType === element.type // Keep this check inline so it only runs on the false path:
                  || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);

                      const _existing3 = useFiber(child, element.props);

                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }

                    break;
                  }
                } // Didn't match.

                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }

              child = child.sibling;
            }

            if (element.type === REACT_FRAGMENT_TYPE) {
              const created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            }
            const _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }

          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            const { key } = portal;
            let child = currentFirstChild;

            while (child !== null) {
              // TODO: If key === null and child.key === null, then this only applies to
              // the first item in the list.
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  const existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }

              child = child.sibling;
            }

            const created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } // This API will tag the children with the side-effect of the reconciliation
          // itself. They will be added to the side-effect list as we pass through the
          // children and the parent.

          function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            const isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            } // Handle object types

            const isObject = typeof newChild === 'object' && newChild !== null;

            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            }

            if (typeof newChild === 'string' || typeof newChild === 'number') {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, `${newChild}`, lanes));
            }

            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }

            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }

            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }

            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }

            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
              // If the new child is undefined, and the return fiber is a composite
              // component, throw an error. If Fiber return types are disabled,
              // we already threw above.
              switch (returnFiber.tag) {
                case ClassComponent:
                {
                  {
                    const instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                      break;
                    }
                  }
                }
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough

                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                {
                  {
                    {
                      throw Error(`${getComponentName(returnFiber.type) || 'Component'}(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.`);
                    }
                  }
                }
              }
            } // Remaining cases are all treated as empty.

            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }

          return reconcileChildFibers;
        }

        const reconcileChildFibers = ChildReconciler(true);
        const mountChildFibers = ChildReconciler(false);

        function cloneChildFibers(current, workInProgress) {
          if (!(current === null || workInProgress.child === current.child)) {
            {
              throw Error('Resuming work not yet implemented.');
            }
          }

          if (workInProgress.child === null) {
            return;
          }

          let currentChild = workInProgress.child;
          let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress.child = newChild;
          newChild.return = workInProgress;

          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
          }

          newChild.sibling = null;
        } // Reset a workInProgress child set to prepare it for a second pass.

        function resetChildFibers(workInProgress, lanes) {
          let { child } = workInProgress;

          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }

        const NO_CONTEXT = {};
        const contextStackCursor$1 = createCursor(NO_CONTEXT);
        const contextFiberStackCursor = createCursor(NO_CONTEXT);
        const rootInstanceStackCursor = createCursor(NO_CONTEXT);

        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error('Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.');
            }
          }

          return c;
        }

        function getRootHostContainer() {
          const rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }

        function pushHostContainer(fiber, nextRootInstance) {
          // Push current root instance onto the stack;
          // This allows us to reset root when portals are popped.
          push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
          // This enables us to pop only Fibers that provide unique contexts.

          push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
          // However, we can't just call getRootHostContext() and push it because
          // we'd have a different number of entries on the stack depending on
          // whether getRootHostContext() throws somewhere in renderer code or not.
          // So we push an empty value first. This lets us safely unwind on errors.

          push(contextStackCursor$1, NO_CONTEXT, fiber);
          const nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }

        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }

        function getHostContext() {
          const context = requiredContext(contextStackCursor$1.current);
          return context;
        }

        function pushHostContext(fiber) {
          const rootInstance = requiredContext(rootInstanceStackCursor.current);
          const context = requiredContext(contextStackCursor$1.current);
          const nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

          if (context === nextContext) {
            return;
          } // Track the context and the Fiber that provided it.
          // This enables us to pop only Fibers that provide unique contexts.

          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }

        function popHostContext(fiber) {
          // Do not pop unless this Fiber provided the current context.
          // pushHostContext() only pushes Fibers that provide unique contexts.
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }

          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }

        const DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
        // inherited deeply down the subtree. The upper bits only affect
        // this immediate suspense boundary and gets reset each new
        // boundary or suspense list.

        const SubtreeSuspenseContextMask = 1; // Subtree Flags:
        // InvisibleParentSuspenseContext indicates that one of our parent Suspense
        // boundaries is not currently showing visible main content.
        // Either because it is already showing a fallback or is not mounted at all.
        // We can use this to determine if it is desirable to trigger a fallback at
        // the parent. If not, then we might need to trigger undesirable boundaries
        // and/or suspend the commit to avoid hiding the parent content.

        const InvisibleParentSuspenseContext = 1; // Shallow Flags:
        // ForceSuspenseFallback can be used by SuspenseList to force newly added
        // items into their fallback state during one of the render passes.

        const ForceSuspenseFallback = 2;
        const suspenseStackCursor = createCursor(DefaultSuspenseContext);

        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }

        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }

        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }

        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }

        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }

        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }

        function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
          // If it was the primary children that just suspended, capture and render the
          // fallback. Otherwise, don't capture and bubble to the next boundary.
          const nextState = workInProgress.memoizedState;

          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              // A dehydrated boundary always captures.
              return true;
            }

            return false;
          }

          const props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

          if (props.fallback === undefined) {
            return false;
          } // Regular boundaries always capture.

          if (props.unstable_avoidThisFallback !== true) {
            return true;
          } // If it's a boundary we should avoid, then we prefer to bubble up to the
          // parent boundary if it is currently invisible.

          if (hasInvisibleParent) {
            return false;
          } // If the parent is not able to handle it, we must handle it.

          return true;
        }

        function findFirstSuspended(row) {
          let node = row;

          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              const state = node.memoizedState;

              if (state !== null) {
                const { dehydrated } = state;

                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        && node.memoizedProps.revealOrder !== undefined) {
              const didSuspend = (node.flags & DidCapture) !== NoFlags;

              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === row) {
              return null;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }

          return null;
        }

        const NoFlags$1 =
    /*  */
    0; // Represents whether effect should fire.

        const HasEffect =
    /* */
    1; // Represents the phase in which the effect (not the clean-up) fires.

        const Layout =
    /*    */
    2;
        const Passive$1 =
    /*   */
    4; // This may have been an insertion or a hydration.

        let hydrationParentFiber = null;
        let nextHydratableInstance = null;
        let isHydrating = false;

        function enterHydrationState(fiber) {
          const parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }

        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;

              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          const childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
          // these children are not part of the reconciliation list of children.
          // Even if we abort and rereconcile the children, that will try to hydrate
          // again and the nodes are still in the host tree so these will be
          // recreated.

          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }

        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot:
              {
                const parentContainer = returnFiber.stateNode.containerInfo;

                switch (fiber.tag) {
                  case HostComponent:
                    var { type } = fiber;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;

                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }

                break;
              }

              case HostComponent:
              {
                const parentType = returnFiber.type;
                const parentProps = returnFiber.memoizedProps;
                const parentInstance = returnFiber.stateNode;

                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;

                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;

                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }

                break;
              }

              default:
            }
          }
        }

        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent:
            {
              const { type } = fiber;
              const props = fiber.pendingProps;
              const instance = canHydrateInstance(nextInstance, type);

              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }

              return false;
            }

            case HostText:
            {
              const text = fiber.pendingProps;
              const textInstance = canHydrateTextInstance(nextInstance, text);

              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }

              return false;
            }

            case SuspenseComponent:
            {
              return false;
            }

            default:
              return false;
          }
        }

        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }

          let nextInstance = nextHydratableInstance;

          if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }

          const firstAttemptedInstance = nextInstance;

          if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);

            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              // Nothing to hydrate. Make it an insertion.
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.

            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }

          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }

        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          const instance = fiber.stateNode;
          const updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

          fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
          // is a new ref we mark this as an update.

          if (updatePayload !== null) {
            return true;
          }

          return false;
        }

        function prepareToHydrateHostTextInstance(fiber) {
          const textInstance = fiber.stateNode;
          const textContent = fiber.memoizedProps;
          const shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              // We assume that prepareToHydrateHostTextInstance is called in a context where the
              // hydration parent is the parent host component of this host text.
              const returnFiber = hydrationParentFiber;

              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot:
                  {
                    const parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }

                  case HostComponent:
                  {
                    const parentType = returnFiber.type;
                    const parentProps = returnFiber.memoizedProps;
                    const parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }

        function skipPastDehydratedSuspenseInstance(fiber) {
          const suspenseState = fiber.memoizedState;
          const suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

          if (!suspenseInstance) {
            {
              throw Error('Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.');
            }
          }

          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }

        function popToNextHostParent(fiber) {
          let parent = fiber.return;

          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }

          hydrationParentFiber = parent;
        }

        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            // We're deeper than the current hydration context, inside an inserted
            // tree.
            return false;
          }

          if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }

          const { type } = fiber; // If we have any remaining hydratable nodes, we need to delete them now.
          // We only do this deeper than head and body since they tend to have random
          // other nodes in them. We also ignore components with pure text content in
          // side of them.
          // TODO: Better heuristic.

          if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            let nextInstance = nextHydratableInstance;

            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }

          popToNextHostParent(fiber);

          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }

          return true;
        }

        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }

        function getIsHydrating() {
          return isHydrating;
        } // and should be reset before starting a new render.
        // This tracks which mutable sources need to be reset after a render.

        const workInProgressSources = [];
        let rendererSigil$1;
        {
          // Used to detect multiple renderers using the same mutable source.
          rendererSigil$1 = {};
        }

        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }

        function resetWorkInProgressVersions() {
          for (let i = 0; i < workInProgressSources.length; i++) {
            const mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }

          workInProgressSources.length = 0;
        }

        function getWorkInProgressVersion(mutableSource) {
          {
            return mutableSource._workInProgressVersionPrimary;
          }
        }

        function setWorkInProgressVersion(mutableSource, version) {
          {
            mutableSource._workInProgressVersionPrimary = version;
          }
          workInProgressSources.push(mutableSource);
        }

        function warnAboutMultipleRenderersDEV(mutableSource) {
          {
            {
              if (mutableSource._currentPrimaryRenderer == null) {
                mutableSource._currentPrimaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
              }
            }
          }
        } // Eager reads the version of a mutable source and stores it on the root.

        const ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        const ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        let didWarnAboutMismatchedHooksForComponent;
        let didWarnAboutUseOpaqueIdentifier;
        {
          didWarnAboutUseOpaqueIdentifier = {};
          didWarnAboutMismatchedHooksForComponent = new Set();
        } // These are set right before calling the component.

        let renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
        // the work-in-progress hook.

        let currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
        // current hook list is the list that belongs to the current fiber. The
        // work-in-progress hook list is a new list that will be added to the
        // work-in-progress fiber.

        let currentHook = null;
        let workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
        // does not get reset if we do another render pass; only when we're completely
        // finished evaluating this component. This is an optimization so we know
        // whether we need to clear render phase updates after a throw.

        let didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
        // gets reset after each attempt.
        // TODO: Maybe there's some way to consolidate this with
        // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

        let didScheduleRenderPhaseUpdateDuringThisPass = false;
        const RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

        let currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
        // The list stores the order of hooks used during the initial render (mount).
        // Subsequent renders (updates) reference this list.

        let hookTypesDev = null;
        let hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
        // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
        // When true, such Hooks will always be "remounted". Only used during hot reload.

        let ignorePreviousDependencies = false;

        function mountHookTypesDev() {
          {
            const hookName = currentHookNameInDev;

            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }

        function updateHookTypesDev() {
          {
            const hookName = currentHookNameInDev;

            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;

              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }

        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
              // Verify deps, but only on mount to avoid extra checks.
              // It's unlikely their type would change as usually you define them inline.
              error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
            }
          }
        }

        function warnOnHookMismatchInDev(currentHookName) {
          {
            const componentName = getComponentName(currentlyRenderingFiber$1.type);

            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);

              if (hookTypesDev !== null) {
                let table = '';
                const secondColumnStart = 30;

                for (let i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  const oldHookName = hookTypesDev[i];
                  const newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  let row = `${i + 1}. ${oldHookName}`; // Extra space so second column lines up
                  // lol @ IE not supporting String#repeat

                  while (row.length < secondColumnStart) {
                    row += ' ';
                  }

                  row += `${newHookName}\n`;
                  table += row;
                }

                error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
              }
            }
          }
        }

        function throwInvalidHookError() {
          {
            {
              throw Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
            }
          }
        }

        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              // Only true when this component is being hot reloaded.
              return false;
            }
          }

          if (prevDeps === null) {
            {
              error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
            }
            return false;
          }

          {
            // Don't bother comparing lengths in prod because these arrays should be
            // passed inline.
            if (nextDeps.length !== prevDeps.length) {
              error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, `[${prevDeps.join(', ')}]`, `[${nextDeps.join(', ')}]`);
            }
          }

          for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }

            return false;
          }

          return true;
        }

        function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress;
          {
            hookTypesDev = current !== null ? current._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1; // Used for hot reloading:

            ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
          }
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          workInProgress.lanes = NoLanes; // The following should have already been reset
          // currentHook = null;
          // workInProgressHook = null;
          // didScheduleRenderPhaseUpdate = false;
          // TODO Warn if no hooks are used at all during mount, then some are used during update.
          // Currently we will identify the update render as a mount because memoizedState === null.
          // This is tricky because it's valid for certain types of components (e.g. React.lazy)
          // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
          // Non-stateful hooks (e.g. context) don't get added to memoizedState,
          // so memoizedState would be null during updates and mounts.

          {
            if (current !== null && current.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              // This dispatcher handles an edge case where a component is updating,
              // but no stateful hooks have been used.
              // We want to match the production code behavior (which will use HooksDispatcherOnMount),
              // but with the extra DEV validation to ensure hooks ordering hasn't changed.
              // This dispatcher does that.
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          let children = Component(props, secondArg); // Check if there was a render phase update

          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            let numberOfReRenders = 0;

            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;

              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error('Too many re-renders. React limits the number of renders to prevent an infinite loop.');
                }
              }

              numberOfReRenders += 1;
              {
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
              } // Start over from the beginning of the list

              currentHook = null;
              workInProgressHook = null;
              workInProgress.updateQueue = null;
              {
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          } // We can assume the previous dispatcher is always this one, since we set it
          // at the beginning of the render phase and there's no re-entrancy.

          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress._debugHookTypes = hookTypesDev;
          } // This check uses currentHook so that it works the same in DEV and prod bundles.
          // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

          const didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;

          if (didRenderTooFewHooks) {
            {
              throw Error('Rendered fewer hooks than expected. This may be caused by an accidental early return statement.');
            }
          }

          return children;
        }

        function bailoutHooks(current, workInProgress, lanes) {
          workInProgress.updateQueue = current.updateQueue;
          workInProgress.flags &= ~(Passive | Update);
          current.lanes = removeLanes(current.lanes, lanes);
        }

        function resetHooksAfterThrow() {
          // We can assume the previous dispatcher is always this one, since we set it
          // at the beginning of the render phase and there's no re-entrancy.
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

          if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            let hook = currentlyRenderingFiber$1.memoizedState;

            while (hook !== null) {
              const { queue } = hook;

              if (queue !== null) {
                queue.pending = null;
              }

              hook = hook.next;
            }

            didScheduleRenderPhaseUpdate = false;
          }

          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
        }

        function mountWorkInProgressHook() {
          const hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null,
          };

          if (workInProgressHook === null) {
            // This is the first hook in the list
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            // Append to the end of the list
            workInProgressHook = workInProgressHook.next = hook;
          }

          return workInProgressHook;
        }

        function updateWorkInProgressHook() {
          // This function is used both for updates and for re-renders triggered by a
          // render phase update. It assumes there is either a current hook we can
          // clone, or a work-in-progress hook from a previous render pass that we can
          // use as a base. When we reach the end of the base list, we must switch to
          // the dispatcher used for mounts.
          let nextCurrentHook;

          if (currentHook === null) {
            const current = currentlyRenderingFiber$1.alternate;

            if (current !== null) {
              nextCurrentHook = current.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }

          let nextWorkInProgressHook;

          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }

          if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) {
              {
                throw Error('Rendered more hooks than during the previous render.');
              }
            }

            currentHook = nextCurrentHook;
            const newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null,
            };

            if (workInProgressHook === null) {
              // This is the first hook in the list.
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              // Append to the end of the list.
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }

          return workInProgressHook;
        }

        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
          };
        }

        function basicStateReducer(state, action) {
          // $FlowFixMe: Flow doesn't like mixed types
          return typeof action === 'function' ? action(state) : action;
        }

        function mountReducer(reducer, initialArg, init) {
          const hook = mountWorkInProgressHook();
          let initialState;

          if (init !== undefined) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }

          hook.memoizedState = hook.baseState = initialState;
          const queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState,
          };
          const dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }

        function updateReducer(reducer, initialArg, init) {
          const hook = updateWorkInProgressHook();
          const { queue } = hook;

          if (!(queue !== null)) {
            {
              throw Error('Should have a queue. This is likely a bug in React. Please file an issue.');
            }
          }

          queue.lastRenderedReducer = reducer;
          const current = currentHook; // The last rebase update that is NOT part of the base state.

          let { baseQueue } = current; // The last pending update that hasn't been processed yet.

          const pendingQueue = queue.pending;

          if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
              // Merge the pending queue and the base queue.
              const baseFirst = baseQueue.next;
              const pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }

            {
              if (current.baseQueue !== baseQueue) {
                // Internal invariant that should never happen, but feasibly could in
                // the future if we implement resuming, or some form of that.
                error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
              }
            }
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }

          if (baseQueue !== null) {
            // We have a queue to process.
            const first = baseQueue.next;
            let newState = current.baseState;
            let newBaseState = null;
            let newBaseQueueFirst = null;
            let newBaseQueueLast = null;
            let update = first;

            do {
              const updateLane = update.lane;

              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                // Priority is insufficient. Skip this update. If this is the first
                // skipped update, the previous update/state is the new base
                // update/state.
                const clone = {
                  lane: updateLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null,
                };

                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                } // Update the remaining priority in the queue.
                // TODO: Don't need to accumulate this. Instead, we can remove
                // renderLanes from the original lanes.

                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                // This update does have sufficient priority.
                if (newBaseQueueLast !== null) {
                  const _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null,
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                } // Process this update.

                if (update.eagerReducer === reducer) {
                  // If this update was processed eagerly, and its reducer matches the
                  // current reducer, we can use the eagerly computed state.
                  newState = update.eagerState;
                } else {
                  const { action } = update;
                  newState = reducer(newState, action);
                }
              }

              update = update.next;
            } while (update !== null && update !== first);

            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            } // Mark that the fiber performed work, but only if the new state is
            // different from the current state.

            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }

            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }

          const { dispatch } = queue;
          return [hook.memoizedState, dispatch];
        }

        function rerenderReducer(reducer, initialArg, init) {
          const hook = updateWorkInProgressHook();
          const { queue } = hook;

          if (!(queue !== null)) {
            {
              throw Error('Should have a queue. This is likely a bug in React. Please file an issue.');
            }
          }

          queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
          // work-in-progress hook.

          const { dispatch } = queue;
          const lastRenderPhaseUpdate = queue.pending;
          let newState = hook.memoizedState;

          if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            let update = firstRenderPhaseUpdate;

            do {
              // Process this render phase update. We don't have to check the
              // priority because it will always be the same as the current
              // render's.
              const { action } = update;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.

            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }

            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.

            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }

            queue.lastRenderedState = newState;
          }

          return [newState, dispatch];
        }

        function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
          {
            warnAboutMultipleRenderersDEV(source);
          }
          const getVersion = source._getVersion;
          const version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

          let isSafeToReadFromSource = false; // Check the version first.
          // If this render has already been started with a specific version,
          // we can use it alone to determine if we can safely read from the source.

          const currentRenderVersion = getWorkInProgressVersion(source);

          if (currentRenderVersion !== null) {
            // It's safe to read if the store hasn't been mutated since the last time
            // we read something.
            isSafeToReadFromSource = currentRenderVersion === version;
          } else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

            if (isSafeToReadFromSource) {
              // If it's safe to read from this source during the current render,
              // store the version in case other components read from it.
              // A changed version number will let those components know to throw and restart the render.
              setWorkInProgressVersion(source, version);
            }
          }

          if (isSafeToReadFromSource) {
            const snapshot = getSnapshot(source._source);
            {
              if (typeof snapshot === 'function') {
                error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
              }
            }
            return snapshot;
          }
          // This handles the special case of a mutable source being shared between renderers.
          // In that case, if the source is mutated between the first and second renderer,
          // The second renderer don't know that it needs to reset the WIP version during unwind,
          // (because the hook only marks sources as dirty if it's written to their WIP version).
          // That would cause this tear check to throw again and eventually be visible to the user.
          // We can avoid this infinite loop by explicitly marking the source as dirty.
          //
          // This can lead to tearing in the first renderer when it resumes,
          // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
          markSourceAsDirty(source);
          {
            {
              throw Error('Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.');
            }
          }
        }

        function useMutableSource(hook, source, getSnapshot, subscribe) {
          const root = getWorkInProgressRoot();

          if (!(root !== null)) {
            {
              throw Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            }
          }

          const getVersion = source._getVersion;
          const version = getVersion(source._source);
          const dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

          const _dispatcher$useState = dispatcher.useState(() => readFromUnsubcribedMutableSource(root, source, getSnapshot));
          const currentSnapshot = _dispatcher$useState[0];
          let setSnapshot = _dispatcher$useState[1];

          let snapshot = currentSnapshot; // Grab a handle to the state hook as well.
          // We use it to clear the pending update queue if we have a new source.

          const stateHook = workInProgressHook;
          const { memoizedState } = hook;
          const { refs } = memoizedState;
          const prevGetSnapshot = refs.getSnapshot;
          const prevSource = memoizedState.source;
          const prevSubscribe = memoizedState.subscribe;
          const fiber = currentlyRenderingFiber$1;
          hook.memoizedState = {
            refs,
            source,
            subscribe,
          }; // Sync the values needed by our subscription handler after each commit.

          dispatcher.useEffect(() => {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.

            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

            const maybeNewVersion = getVersion(source._source);

            if (!objectIs(version, maybeNewVersion)) {
              const maybeNewSnapshot = getSnapshot(source._source);
              {
                if (typeof maybeNewSnapshot === 'function') {
                  error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
                }
              }

              if (!objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                const lane = requestUpdateLane(fiber);
                markRootMutableRead(root, lane);
              } // If the source mutated between render and now,
              // there may be state updates already scheduled from the old source.
              // Entangle the updates so that they render in the same batch.

              markRootEntangled(root, root.mutableReadLanes);
            }
          }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

          dispatcher.useEffect(() => {
            const handleChange = function () {
              const latestGetSnapshot = refs.getSnapshot;
              const latestSetSnapshot = refs.setSnapshot;

              try {
                latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

                const lane = requestUpdateLane(fiber);
                markRootMutableRead(root, lane);
              } catch (error) {
                // A selector might throw after a source mutation.
                // e.g. it might try to read from a part of the store that no longer exists.
                // In this case we should still schedule an update with React.
                // Worst case the selector will throw again and then an error boundary will handle it.
                latestSetSnapshot(() => {
                  throw error;
                });
              }
            };

            const unsubscribe = subscribe(source._source, handleChange);
            {
              if (typeof unsubscribe !== 'function') {
                error('Mutable source subscribe function must return an unsubscribe function.');
              }
            }
            return unsubscribe;
          }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
          //
          // If either the source or the subscription have changed we can't can't trust the update queue.
          // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
          //
          // If the getSnapshot function changed, we also shouldn't rely on the update queue.
          // It's possible that the underlying source was mutated between the when the last "change" event fired,
          // and when the current render (with the new getSnapshot function) is processed.
          //
          // In both cases, we need to throw away pending updates (since they are no longer relevant)
          // and treat reading from the source as we do in the mount case.

          if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            const newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot,
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
          }

          return snapshot;
        }

        function mountMutableSource(source, getSnapshot, subscribe) {
          const hook = mountWorkInProgressHook();
          hook.memoizedState = {
            refs: {
              getSnapshot,
              setSnapshot: null,
            },
            source,
            subscribe,
          };
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }

        function updateMutableSource(source, getSnapshot, subscribe) {
          const hook = updateWorkInProgressHook();
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }

        function mountState(initialState) {
          const hook = mountWorkInProgressHook();

          if (typeof initialState === 'function') {
            // $FlowFixMe: Flow doesn't like mixed types
            initialState = initialState();
          }

          hook.memoizedState = hook.baseState = initialState;
          const queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState,
          };
          const dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }

        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }

        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }

        function pushEffect(tag, create, destroy, deps) {
          const effect = {
            tag,
            create,
            destroy,
            deps,
            // Circular
            next: null,
          };
          let componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            const { lastEffect } = componentUpdateQueue;

            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              const firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }

          return effect;
        }

        function mountRef(initialValue) {
          const hook = mountWorkInProgressHook();
          const ref = {
            current: initialValue,
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }

        function updateRef(initialValue) {
          const hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }

        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          const hook = mountWorkInProgressHook();
          const nextDeps = deps === undefined ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
        }

        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          const hook = updateWorkInProgressHook();
          const nextDeps = deps === undefined ? null : deps;
          let destroy;

          if (currentHook !== null) {
            const prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;

            if (nextDeps !== null) {
              const prevDeps = prevEffect.deps;

              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }

          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }

        function mountEffect(create, deps) {
          {
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if (typeof jest !== 'undefined') {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }

        function updateEffect(create, deps) {
          {
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if (typeof jest !== 'undefined') {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }

        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }

        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }

        function imperativeHandleEffect(create, ref) {
          if (typeof ref === 'function') {
            const refCallback = ref;

            const _inst = create();

            refCallback(_inst);
            return function () {
              refCallback(null);
            };
          } if (ref !== null && ref !== undefined) {
            const refObject = ref;
            {
              if (!refObject.hasOwnProperty('current')) {
                error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', `an object with keys {${Object.keys(refObject).join(', ')}}`);
              }
            }

            const _inst2 = create();

            refObject.current = _inst2;
            return function () {
              refObject.current = null;
            };
          }
        }

        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== 'function') {
              error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
            }
          } // TODO: If deps are provided, should we skip comparing the ref itself?

          const effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }

        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== 'function') {
              error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
            }
          } // TODO: If deps are provided, should we skip comparing the ref itself?

          const effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }

        function mountDebugValue(value, formatterFn) { // This hook is normally a no-op.
          // The react-debug-hooks package injects its own implementation
          // so that e.g. DevTools can display custom hook values.
        }

        const updateDebugValue = mountDebugValue;

        function mountCallback(callback, deps) {
          const hook = mountWorkInProgressHook();
          const nextDeps = deps === undefined ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }

        function updateCallback(callback, deps) {
          const hook = updateWorkInProgressHook();
          const nextDeps = deps === undefined ? null : deps;
          const prevState = hook.memoizedState;

          if (prevState !== null) {
            if (nextDeps !== null) {
              const prevDeps = prevState[1];

              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }

          hook.memoizedState = [callback, nextDeps];
          return callback;
        }

        function mountMemo(nextCreate, deps) {
          const hook = mountWorkInProgressHook();
          const nextDeps = deps === undefined ? null : deps;
          const nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }

        function updateMemo(nextCreate, deps) {
          const hook = updateWorkInProgressHook();
          const nextDeps = deps === undefined ? null : deps;
          const prevState = hook.memoizedState;

          if (prevState !== null) {
            // Assume these are defined. If they're not, areHookInputsEqual will warn.
            if (nextDeps !== null) {
              const prevDeps = prevState[1];

              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }

          const nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }

        function mountDeferredValue(value) {
          const _mountState = mountState(value);
          const prevValue = _mountState[0];
          const setValue = _mountState[1];

          mountEffect(() => {
            const prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;

            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }

        function updateDeferredValue(value) {
          const _updateState = updateState();
          const prevValue = _updateState[0];
          const setValue = _updateState[1];

          updateEffect(() => {
            const prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;

            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }

        function rerenderDeferredValue(value) {
          const _rerenderState = rerenderState();
          const prevValue = _rerenderState[0];
          const setValue = _rerenderState[1];

          updateEffect(() => {
            const prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;

            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }

        function startTransition(setPending, callback) {
          const priorityLevel = getCurrentPriorityLevel();
          {
            runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, () => {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, () => {
              const prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;

              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            });
          }
        }

        function mountTransition() {
          const _mountState2 = mountState(false);
          const isPending = _mountState2[0];
          const setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
          // never changes.

          const start = startTransition.bind(null, setPending);
          mountRef(start);
          return [start, isPending];
        }

        function updateTransition() {
          const _updateState2 = updateState();
          const isPending = _updateState2[0];

          const startRef = updateRef();
          const start = startRef.current;
          return [start, isPending];
        }

        function rerenderTransition() {
          const _rerenderState2 = rerenderState();
          const isPending = _rerenderState2[0];

          const startRef = updateRef();
          const start = startRef.current;
          return [start, isPending];
        }

        var isUpdatingOpaqueValueInRenderPhase = false;

        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }

        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            // TODO: Should warn in effects and callbacks, too
            const name = getComponentName(fiber.type) || 'Unknown';

            if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
              error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');
              didWarnAboutUseOpaqueIdentifier[name] = true;
            }
          }
        }

        function mountOpaqueIdentifier() {
          const makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));

          if (getIsHydrating()) {
            let didUpgrade = false;
            const fiber = currentlyRenderingFiber$1;

            const readValue = function () {
              if (!didUpgrade) {
                // Only upgrade once. This works even inside the render phase because
                // the update is added to a shared queue, which outlasts the
                // in-progress render.
                didUpgrade = true;
                {
                  isUpdatingOpaqueValueInRenderPhase = true;
                  setId(makeId());
                  isUpdatingOpaqueValueInRenderPhase = false;
                  warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
              }

              {
                {
                  throw Error('The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.');
                }
              }
            };

            const id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];

            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
              currentlyRenderingFiber$1.flags |= Update | Passive;
              pushEffect(HasEffect | Passive$1, () => {
                setId(makeId());
              }, undefined, null);
            }

            return id;
          }
          const _id = makeId();

          mountState(_id);
          return _id;
        }

        function updateOpaqueIdentifier() {
          const id = updateState()[0];
          return id;
        }

        function rerenderOpaqueIdentifier() {
          const id = rerenderState()[0];
          return id;
        }

        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === 'function') {
              error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
            }
          }
          const eventTime = requestEventTime();
          const lane = requestUpdateLane(fiber);
          const update = {
            lane,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null,
          }; // Append the update to the end of the list.

          const { pending } = queue;

          if (pending === null) {
            // This is the first update. Create a circular list.
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }

          queue.pending = update;
          const { alternate } = fiber;

          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            // This is a render phase update. Stash it in a lazily-created map of
            // queue -> linked list of updates. After this render pass, we'll restart
            // and apply the stashed updates on top of the work-in-progress hook.
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          } else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              // The queue is currently empty, which means we can eagerly compute the
              // next state before entering the render phase. If the new state is the
              // same as the current state, we may be able to bail out entirely.
              const { lastRenderedReducer } = queue;

              if (lastRenderedReducer !== null) {
                let prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }

                try {
                  const currentState = queue.lastRenderedState;
                  const eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                  // it, on the update object. If the reducer hasn't changed by the
                  // time we enter the render phase, then the eager state can be used
                  // without calling the reducer again.

                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;

                  if (objectIs(eagerState, currentState)) {
                    // Fast path. We can bail out without scheduling React to re-render.
                    // It's still possible that we'll need to rebase this update later,
                    // if the component re-renders for a different reason and by that
                    // time the reducer has changed.
                    return;
                  }
                } catch (error) { // Suppress the error. It will throw again in the render phase.
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }

            {
              // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
              if (typeof jest !== 'undefined') {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }

        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler,
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        let InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        let InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          const warnInvalidContextAccess = function () {
            error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
          };

          const warnInvalidHookAccess = function () {
            error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
          };

          HooksDispatcherOnMountInDEV = {
            readContext(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              mountHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState(initialState) {
              currentHookNameInDev = 'useState';
              mountHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition() {
              currentHookNameInDev = 'useTransition';
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState(initialState) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition() {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              updateHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return updateRef();
            },
            useState(initialState) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition() {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return updateRef();
            },
            useState(initialState) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition() {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              mountHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              mountHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState(initialState) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              mountHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition() {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState(initialState) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition() {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback(callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext(context, observedBits) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect(create, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle(ref, create, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect(create, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo(create, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer(reducer, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef(initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState(initialState) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              updateHookTypesDev();
              const prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue(value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue(value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition() {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource(source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier() {
              currentHookNameInDev = 'useOpaqueIdentifier';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
        }
        const now$1 = Scheduler.unstable_now;
        let commitTime = 0;
        let profilerStartTime = -1;

        function getCommitTime() {
          return commitTime;
        }

        function recordCommitTime() {
          commitTime = now$1();
        }

        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();

          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }

        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }

        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            const elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;

            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }

            profilerStartTime = -1;
          }
        }

        function transferActualDuration(fiber) {
          // Transfer time spent rendering these children so we don't lose it
          // after we rerender. This is used as a helper in special cases
          // where we should count the work of multiple passes.
          let { child } = fiber;

          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }

        const ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        let didReceiveUpdate = false;
        let didWarnAboutBadClass;
        let didWarnAboutModulePatternComponent;
        let didWarnAboutContextTypeOnFunctionComponent;
        let didWarnAboutGetDerivedStateOnFunctionComponent;
        let didWarnAboutFunctionRefs;
        let didWarnAboutReassigningProps;
        let didWarnAboutRevealOrder;
        let didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }

        function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
          if (current === null) {
            // If this is a fresh new component that hasn't been rendered yet, we
            // won't update its child set by applying minimal side-effects. Instead,
            // we will add them all to the child before it gets rendered. That means
            // we can optimize this reconciliation pass by not tracking side-effects.
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
          } else {
            // If the current child is the same as the work in progress, it means that
            // we haven't yet started any work on these children. Therefore, we use
            // the clone algorithm to create a copy of all the current children.
            // If we had any progressed work already, that is invalid at this point so
            // let's throw it out.
            workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
          }
        }

        function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
          // This function is fork of reconcileChildren. It's used in cases where we
          // want to reconcile without matching against the existing set. This has the
          // effect of all current children being unmounted; even if the type and key
          // are the same, the old child is unmounted and a new child is created.
          //
          // To do this, we're going to go through the reconcile algorithm twice. In
          // the first pass, we schedule a deletion for all the current children by
          // passing null.
          workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
          // pass null in place of where we usually pass the current child set. This has
          // the effect of remounting all children regardless of whether their
          // identities match.

          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        }

        function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
          // TODO: current can be non-null here even if the component
          // hasn't yet mounted. This happens after the first render suspends.
          // We'll need to figure out if this is fine or can cause issues.
          {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              const innerPropTypes = Component.propTypes;

              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                  'prop', getComponentName(Component));
              }
            }
          }
          const { render } = Component;
          const { ref } = workInProgress; // The rest is a fork of updateFunctionComponent

          let nextChildren;
          prepareToReadContext(workInProgress, renderLanes);
          {
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
              } finally {
                reenableLogs();
              }
            }

            setIsRendering(false);
          }

          if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          } // React DevTools reads this flag.

          workInProgress.flags |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
          if (current === null) {
            const { type } = Component;

            if (isSimpleFunctionComponent(type) && Component.compare === null // SimpleMemoComponent codepath doesn't resolve outer props either.
        && Component.defaultProps === undefined) {
              let resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              } // If this is a plain function component without default props,
              // and with only the default shallow comparison, we upgrade it
              // to a SimpleMemoComponent to allow fast path updates.

              workInProgress.tag = SimpleMemoComponent;
              workInProgress.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress, type);
              }
              return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
            }

            {
              const innerPropTypes = type.propTypes;

              if (innerPropTypes) {
                // Inner memo component props aren't currently validated in createElement.
                // We could move it there, but we'd still need this for lazy code path.
                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                  'prop', getComponentName(type));
              }
            }
            const child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
          }

          {
            const _type = Component.type;
            const _innerPropTypes = _type.propTypes;

            if (_innerPropTypes) {
              // Inner memo component props aren't currently validated in createElement.
              // We could move it there, but we'd still need this for lazy code path.
              checkPropTypes(_innerPropTypes, nextProps, // Resolved props
                'prop', getComponentName(_type));
            }
          }
          const currentChild = current.child; // This is always exactly one child

          if (!includesSomeLane(updateLanes, renderLanes)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            const prevProps = currentChild.memoizedProps; // Default to shallow comparison

            let { compare } = Component;
            compare = compare !== null ? compare : shallowEqual;

            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
          } // React DevTools reads this flag.

          workInProgress.flags |= PerformedWork;
          const newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress.ref;
          newChild.return = workInProgress;
          workInProgress.child = newChild;
          return newChild;
        }

        function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
          // TODO: current can be non-null here even if the component
          // hasn't yet mounted. This happens when the inner render suspends.
          // We'll need to figure out if this is fine or can cause issues.
          {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              let outerMemoType = workInProgress.elementType;

              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                const lazyComponent = outerMemoType;
                const payload = lazyComponent._payload;
                const init = lazyComponent._init;

                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.

                const outerPropTypes = outerMemoType && outerMemoType.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                    'prop', getComponentName(outerMemoType));
                }
              }
            }
          }

          if (current !== null) {
            const prevProps = current.memoizedProps;

            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref // Prevent bailout if the implementation changed due to hot reload.
        && workInProgress.type === current.type) {
              didReceiveUpdate = false;

              if (!includesSomeLane(renderLanes, updateLanes)) {
                // The pending lanes were cleared at the beginning of beginWork. We're
                // about to bail out, but there might be other lanes that weren't
                // included in the current render. Usually, the priority level of the
                // remaining updates is accumlated during the evaluation of the
                // component (i.e. when processing the update queue). But since since
                // we're bailing out early *without* evaluating the component, we need
                // to account for it here, too. Reset to the value of the current fiber.
                // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                // because a MemoComponent fiber does not have hooks or an update queue;
                // rather, it wraps around an inner component, which may or may not
                // contains hooks.
                // TODO: Move the reset at in beginWork out of the common path so that
                // this is no longer necessary.
                workInProgress.lanes = current.lanes;
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              } if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
              }
            }
          }

          return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
        }

        function updateOffscreenComponent(current, workInProgress, renderLanes) {
          const nextProps = workInProgress.pendingProps;
          const nextChildren = nextProps.children;
          const prevState = current !== null ? current.memoizedState : null;

          if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
              // In legacy sync mode, don't defer the subtree. Render it now.
              // TODO: Figure out what we should do in Blocking mode.
              const nextState = {
                baseLanes: NoLanes,
              };
              workInProgress.memoizedState = nextState;
              pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
              let nextBaseLanes;

              if (prevState !== null) {
                const prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
              } else {
                nextBaseLanes = renderLanes;
              } // Schedule this fiber to re-render at offscreen priority. Then bailout.

              {
                markSpawnedWork(OffscreenLane);
              }
              workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
              const _nextState = {
                baseLanes: nextBaseLanes,
              };
              workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
              // to avoid a push/pop misalignment.

              pushRenderLanes(workInProgress, nextBaseLanes);
              return null;
            } else {
              // Rendering at offscreen, so we can clear the base lanes.
              const _nextState2 = {
                baseLanes: NoLanes,
              };
              workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

              const subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
              pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
          } else {
            let _subtreeRenderLanes;

            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

              workInProgress.memoizedState = null;
            } else {
              // We weren't previously hidden, and we still aren't, so there's nothing
              // special to do. Need to push to the stack regardless, though, to avoid
              // a push/pop misalignment.
              _subtreeRenderLanes = renderLanes;
            }

            pushRenderLanes(workInProgress, _subtreeRenderLanes);
          }

          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        } // Note: These happen to have identical begin phases, for now. We shouldn't hold
        // ourselves to this constraint, though. If the behavior diverges, we should
        // fork the function.

        const updateLegacyHiddenComponent = updateOffscreenComponent;

        function updateFragment(current, workInProgress, renderLanes) {
          const nextChildren = workInProgress.pendingProps;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateMode(current, workInProgress, renderLanes) {
          const nextChildren = workInProgress.pendingProps.children;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateProfiler(current, workInProgress, renderLanes) {
          {
            workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
            // These are reset during render to allow the DevTools commit hook a chance to read them,

            const { stateNode } = workInProgress;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          const nextProps = workInProgress.pendingProps;
          const nextChildren = nextProps.children;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function markRef(current, workInProgress) {
          const { ref } = workInProgress;

          if (current === null && ref !== null || current !== null && current.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.flags |= Ref;
          }
        }

        function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
          {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              const innerPropTypes = Component.propTypes;

              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                  'prop', getComponentName(Component));
              }
            }
          }
          let context;
          {
            const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
            context = getMaskedContext(workInProgress, unmaskedContext);
          }
          let nextChildren;
          prepareToReadContext(workInProgress, renderLanes);
          {
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
              } finally {
                reenableLogs();
              }
            }

            setIsRendering(false);
          }

          if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          } // React DevTools reads this flag.

          workInProgress.flags |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
          {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              const innerPropTypes = Component.propTypes;

              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, // Resolved props
                  'prop', getComponentName(Component));
              }
            }
          } // Push context providers early to prevent context stack mismatches.
          // During mounting we don't know the child context yet as the instance doesn't exist.
          // We will invalidate the child context in finishClassComponent() right after rendering.

          let hasContext;

          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }

          prepareToReadContext(workInProgress, renderLanes);
          const instance = workInProgress.stateNode;
          let shouldUpdate;

          if (instance === null) {
            if (current !== null) {
              // A class component without an instance only mounts if it suspended
              // inside a non-concurrent tree, in an inconsistent state. We want to
              // treat it like a new mount, even though an empty version of it already
              // committed. Disconnect the alternate pointers.
              current.alternate = null;
              workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

              workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.

            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
          } else if (current === null) {
            // In a resume, we'll already have an instance we can reuse.
            shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
          } else {
            shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
          }

          const nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
          {
            const inst = workInProgress.stateNode;

            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
              }

              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }

        function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
          // Refs should update even if shouldComponentUpdate returns false
          markRef(current, workInProgress);
          const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

          if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) {
              invalidateContextProvider(workInProgress, Component, false);
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }

          const instance = workInProgress.stateNode; // Rerender

          ReactCurrentOwner$1.current = workInProgress;
          let nextChildren;

          if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();

              if (workInProgress.mode & StrictMode) {
                disableLogs();

                try {
                  instance.render();
                } finally {
                  reenableLogs();
                }
              }

              setIsRendering(false);
            }
          } // React DevTools reads this flag.

          workInProgress.flags |= PerformedWork;

          if (current !== null && didCaptureError) {
            // If we're recovering from an error, reconcile without reusing any of
            // the existing children. Conceptually, the normal children and the children
            // that are shown on error are two different sets, so we shouldn't reuse
            // normal children even if their identities match.
            forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
          } else {
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          } // Memoize state using the values we just used to render.
          // TODO: Restructure so we never read values from the instance.

          workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

          if (hasContext) {
            invalidateContextProvider(workInProgress, Component, true);
          }

          return workInProgress.child;
        }

        function pushHostRootContext(workInProgress) {
          const root = workInProgress.stateNode;

          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            // Should always be set
            pushTopLevelContextObject(workInProgress, root.context, false);
          }

          pushHostContainer(workInProgress, root.containerInfo);
        }

        function updateHostRoot(current, workInProgress, renderLanes) {
          pushHostRootContext(workInProgress);
          const { updateQueue } = workInProgress;

          if (!(current !== null && updateQueue !== null)) {
            {
              throw Error('If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.');
            }
          }

          const nextProps = workInProgress.pendingProps;
          const prevState = workInProgress.memoizedState;
          const prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current, workInProgress);
          processUpdateQueue(workInProgress, nextProps, null, renderLanes);
          const nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
          // being called "element".

          const nextChildren = nextState.element;

          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }

          const root = workInProgress.stateNode;

          if (root.hydrate && enterHydrationState(workInProgress)) {
            // If we don't have any current children this might be the first pass.
            // We always try to hydrate. If this isn't a hydration pass there won't
            // be any children to hydrate which is effectively the same thing as
            // not hydrating.
            {
              const { mutableSourceEagerHydrationData } = root;

              if (mutableSourceEagerHydrationData != null) {
                for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                  const mutableSource = mutableSourceEagerHydrationData[i];
                  const version = mutableSourceEagerHydrationData[i + 1];
                  setWorkInProgressVersion(mutableSource, version);
                }
              }
            }
            const child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
            workInProgress.child = child;
            let node = child;

            while (node) {
              // Mark each child as hydrating. This is a fast path to know whether this
              // tree is part of a hydrating tree. This is used to determine if a child
              // node has fully mounted yet, and for scheduling event replaying.
              // Conceptually this is similar to Placement in that a new subtree is
              // inserted into the React tree here. It just happens to not need DOM
              // mutations because it already exists.
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            resetHydrationState();
          }

          return workInProgress.child;
        }

        function updateHostComponent(current, workInProgress, renderLanes) {
          pushHostContext(workInProgress);

          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          const { type } = workInProgress;
          const nextProps = workInProgress.pendingProps;
          const prevProps = current !== null ? current.memoizedProps : null;
          let nextChildren = nextProps.children;
          const isDirectTextChild = shouldSetTextContent(type, nextProps);

          if (isDirectTextChild) {
            // We special case a direct text child of a host node. This is a common
            // case. We won't handle it as a reified child. We will instead handle
            // this in the host environment that also has access to this prop. That
            // avoids allocating another HostText fiber and traversing it.
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            // If we're switching from a direct text child to a normal child, or to
            // empty, we need to schedule the text content to be reset.
            workInProgress.flags |= ContentReset;
          }

          markRef(current, workInProgress);
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          return workInProgress.child;
        }

        function updateHostText(current, workInProgress) {
          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          } // Nothing to do here. This is terminal. We'll do the completion step
          // immediately after.

          return null;
        }

        function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
          if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

            workInProgress.flags |= Placement;
          }

          const props = workInProgress.pendingProps;
          const lazyComponent = elementType;
          const payload = lazyComponent._payload;
          const init = lazyComponent._init;
          let Component = init(payload); // Store the unwrapped component in the type.

          workInProgress.type = Component;
          const resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
          const resolvedProps = resolveDefaultProps(Component, props);
          let child;

          switch (resolvedTag) {
            case FunctionComponent:
            {
              {
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

            case ClassComponent:
            {
              {
                workInProgress.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

            case ForwardRef:
            {
              {
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

            case MemoComponent:
            {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  const outerPropTypes = Component.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                      'prop', getComponentName(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
                updateLanes, renderLanes);
              return child;
            }
          }

          let hint = '';
          {
            if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = ' Did you wrap a component in React.lazy() more than once?';
            }
          } // This message intentionally doesn't mention ForwardRef or MemoComponent
          // because the fact that it's a separate type of work is an
          // implementation detail.

          {
            {
              throw Error(`Element type is invalid. Received a promise that resolves to: ${Component}. Lazy element type must resolve to a class or function.${hint}`);
            }
          }
        }

        function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
          if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

            workInProgress.flags |= Placement;
          } // Promote the fiber to a class and try rendering again.

          workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
          // Push context providers early to prevent context stack mismatches.
          // During mounting we don't know the child context yet as the instance doesn't exist.
          // We will invalidate the child context in finishClassComponent() right after rendering.

          let hasContext;

          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }

          prepareToReadContext(workInProgress, renderLanes);
          constructClassInstance(workInProgress, Component, nextProps);
          mountClassInstance(workInProgress, Component, nextProps, renderLanes);
          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        }

        function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
          if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

            workInProgress.flags |= Placement;
          }

          const props = workInProgress.pendingProps;
          let context;
          {
            const unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
            context = getMaskedContext(workInProgress, unmaskedContext);
          }
          prepareToReadContext(workInProgress, renderLanes);
          let value;
          {
            if (Component.prototype && typeof Component.prototype.render === 'function') {
              const componentName = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }

            if (workInProgress.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
            }

            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress;
            value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
            setIsRendering(false);
          } // React DevTools reads this flag.

          workInProgress.flags |= PerformedWork;
          {
            // Support for module components is deprecated and is removed behind a flag.
            // Whether or not it would crash later, we want to show a good message in DEV first.
            if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
              const _componentName = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }

          if ( // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
            typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            {
              const _componentName2 = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            } // Proceed under the assumption that this is a class instance

            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.

            let hasContext = false;

            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress);
            } else {
              hasContext = false;
            }

            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            const { getDerivedStateFromProps } = Component;

            if (typeof getDerivedStateFromProps === 'function') {
              applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            }

            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
          }
          // Proceed under the assumption that this is a function component
          workInProgress.tag = FunctionComponent;
          {
            if (workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
              } finally {
                reenableLogs();
              }
            }
          }
          reconcileChildren(null, workInProgress, value, renderLanes);
          {
            validateFunctionComponentInDev(workInProgress, Component);
          }
          return workInProgress.child;
        }

        function validateFunctionComponentInDev(workInProgress, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
              }
            }

            if (workInProgress.ref !== null) {
              let info = '';
              const ownerName = getCurrentFiberOwnerNameInDevOrNull();

              if (ownerName) {
                info += `\n\nCheck the render method of \`${ownerName}\`.`;
              }

              let warningKey = ownerName || workInProgress._debugID || '';
              const debugSource = workInProgress._debugSource;

              if (debugSource) {
                warningKey = `${debugSource.fileName}:${debugSource.lineNumber}`;
              }

              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
              }
            }

            if (typeof Component.getDerivedStateFromProps === 'function') {
              const _componentName3 = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }

            if (typeof Component.contextType === 'object' && Component.contextType !== null) {
              const _componentName4 = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }

        const SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane,
        };

        function mountSuspenseOffscreenState(renderLanes) {
          return {
            baseLanes: renderLanes,
          };
        }

        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
          };
        } // TODO: Probably should inline this back

        function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
          // If we're already showing a fallback, there are cases where we need to
          // remain on that fallback regardless of whether the content has resolved.
          // For example, SuspenseList coordinates when nested content appears.
          if (current !== null) {
            const suspenseState = current.memoizedState;

            if (suspenseState === null) {
              // Currently showing content. Don't hide it, even if ForceSuspenseFallack
              // is true. More precise name might be "ForceRemainSuspenseFallback".
              // Note: This is a factoring smell. Can't remain on a fallback if there's
              // no fallback to remain on.
              return false;
            }
          } // Not currently showing content. Consult the Suspense context.

          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }

        function getRemainingWorkInPrimaryTree(current, renderLanes) {
          // TODO: Should not remove render lanes that were pinged during this render
          return removeLanes(current.childLanes, renderLanes);
        }

        function updateSuspenseComponent(current, workInProgress, renderLanes) {
          const nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

          {
            if (shouldSuspend(workInProgress)) {
              workInProgress.flags |= DidCapture;
            }
          }
          let suspenseContext = suspenseStackCursor.current;
          let showFallback = false;
          const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

          if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
          } else {
            // Attempting the main content
            if (current === null || current.memoizedState !== null) {
              // This is a new mount or this boundary is already showing a fallback state.
              // Mark this subtree context as having at least one invisible parent that could
              // handle the fallback state.
              // Boundaries without fallbacks or should be avoided are not considered since
              // they cannot handle preferred fallback states.
              if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }

          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
          // boundary's children. This involves some custom reconcilation logic. Two
          // main reasons this is so complicated.
          //
          // First, Legacy Mode has different semantics for backwards compatibility. The
          // primary tree will commit in an inconsistent state, so when we do the
          // second pass to render the fallback, we do some exceedingly, uh, clever
          // hacks to make that not totally break. Like transferring effects and
          // deletions from hidden tree. In Concurrent Mode, it's much simpler,
          // because we bailout on the primary tree completely and leave it in its old
          // state, no effects. Same as what we do for Offscreen (except that
          // Offscreen doesn't have the first render pass).
          //
          // Second is hydration. During hydration, the Suspense fiber has a slightly
          // different layout, where the child points to a dehydrated fragment, which
          // contains the DOM rendered by the server.
          //
          // Third, even if you set all that aside, Suspense is like error boundaries in
          // that we first we try to render one tree, and if that fails, we render again
          // and switch to a different tree. Like a try/catch block. So we have to track
          // which branch we're currently rendering. Ideally we would model this using
          // a stack.

          if (current === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) {
              tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            }

            const nextPrimaryChildren = nextProps.children;
            const nextFallbackChildren = nextProps.fallback;

            if (showFallback) {
              const fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
              const primaryChildFragment = workInProgress.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } if (typeof nextProps.unstable_expectedLoadTime === 'number') {
              // This is a CPU-bound tree. Skip this tree and show a placeholder to
              // unblock the surrounding content. Then immediately retry after the
              // initial commit.
              const _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

              const _primaryChildFragment = workInProgress.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
              // get it started back up to attempt the next item. While in terms of
              // priority this work has the same priority as this current render, it's
              // not part of the same transition once the transition has committed. If
              // it's sync, we still want to yield so that it can be painted.
              // Conceptually, this is really the same as pinging. We can use any
              // RetryLane even if it's the one currently rendering since we're leaving
              // it behind on this node.

              workInProgress.lanes = SomeRetryLane;
              {
                markSpawnedWork(SomeRetryLane);
              }
              return _fallbackFragment;
            }
            return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
          }
          // This is an update.
          // If the current fiber has a SuspenseState, that means it's already showing
          // a fallback.
          const prevState = current.memoizedState;

          if (prevState !== null) {
            if (showFallback) {
              const _nextFallbackChildren2 = nextProps.fallback;
              const _nextPrimaryChildren2 = nextProps.children;

              const _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

              const _primaryChildFragment3 = workInProgress.child;
              const prevOffscreenState = current.child.memoizedState;
              _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
              _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment;
            }
            const _nextPrimaryChildren3 = nextProps.children;

            const _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

            workInProgress.memoizedState = null;
            return _primaryChildFragment4;
          }
          // The current tree is not already showing a fallback.
          if (showFallback) {
            // Timed out.
            const _nextFallbackChildren3 = nextProps.fallback;
            const _nextPrimaryChildren4 = nextProps.children;

            const _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

            const _primaryChildFragment5 = workInProgress.child;
            const _prevOffscreenState = current.child.memoizedState;
            _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
            _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
            // fallback children.

            workInProgress.memoizedState = SUSPENDED_MARKER;
            return _fallbackChildFragment2;
          }
          // Still haven't timed out. Continue rendering the children, like we
          // normally do.
          const _nextPrimaryChildren5 = nextProps.children;

          const _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

          workInProgress.memoizedState = null;
          return _primaryChildFragment6;
        }

        function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
          const { mode } = workInProgress;
          const primaryChildProps = {
            mode: 'visible',
            children: primaryChildren,
          };
          const primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
          primaryChildFragment.return = workInProgress;
          workInProgress.child = primaryChildFragment;
          return primaryChildFragment;
        }

        function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
          const { mode } = workInProgress;
          const progressedPrimaryFragment = workInProgress.child;
          const primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren,
          };
          let primaryChildFragment;
          let fallbackChildFragment;

          if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;

            if (workInProgress.mode & ProfileMode) {
              // Reset the durations from the first pass so they aren't included in the
              // final amounts. This seems counterintuitive, since we're intentionally
              // not measuring part of the render phase, but this makes it match what we
              // do in Concurrent Mode.
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }

            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
          } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
          }

          primaryChildFragment.return = workInProgress;
          fallbackChildFragment.return = workInProgress;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress.child = primaryChildFragment;
          return fallbackChildFragment;
        }

        function createWorkInProgressOffscreenFiber(current, offscreenProps) {
          // The props argument to `createWorkInProgress` is `any` typed, so we use this
          // wrapper function to constrain it.
          return createWorkInProgress(current, offscreenProps);
        }

        function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
          const currentPrimaryChildFragment = current.child;
          const currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          const primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren,
          });

          if ((workInProgress.mode & BlockingMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes;
          }

          primaryChildFragment.return = workInProgress;
          primaryChildFragment.sibling = null;

          if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
          }

          workInProgress.child = primaryChildFragment;
          return primaryChildFragment;
        }

        function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
          const { mode } = workInProgress;
          const currentPrimaryChildFragment = current.child;
          const currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          const primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren,
          };
          let primaryChildFragment;

          if ( // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
            (mode & BlockingMode) === NoMode // Make sure we're on the second pass, i.e. the primary child fragment was
      // already cloned. In legacy mode, the only case where this isn't true is
      // when DevTools forces us to display a fallback; we skip the first render
      // pass entirely and go straight to rendering the fallback. (In Concurrent
      // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
      // only codepath.)
      && workInProgress.child !== currentPrimaryChildFragment) {
            const progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;

            if (workInProgress.mode & ProfileMode) {
              // Reset the durations from the first pass so they aren't included in the
              // final amounts. This seems counterintuitive, since we're intentionally
              // not measuring part of the render phase, but this makes it match what we
              // do in Concurrent Mode.
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.

            const progressedLastEffect = primaryChildFragment.lastEffect;

            if (progressedLastEffect !== null) {
              workInProgress.firstEffect = primaryChildFragment.firstEffect;
              workInProgress.lastEffect = progressedLastEffect;
              progressedLastEffect.nextEffect = null;
            } else {
              // TODO: Reset this somewhere else? Lol legacy mode is so weird.
              workInProgress.firstEffect = workInProgress.lastEffect = null;
            }
          } else {
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          }

          let fallbackChildFragment;

          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.

            fallbackChildFragment.flags |= Placement;
          }

          fallbackChildFragment.return = workInProgress;
          primaryChildFragment.return = workInProgress;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress.child = primaryChildFragment;
          return fallbackChildFragment;
        }

        function scheduleWorkOnFiber(fiber, renderLanes) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
          const { alternate } = fiber;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
          }

          scheduleWorkOnParentPath(fiber.return, renderLanes);
        }

        function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
          // Mark any Suspense boundaries with fallbacks as having work to do.
          // If they were previously forced into fallbacks, they may now be able
          // to unblock.
          let node = firstChild;

          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              const state = node.memoizedState;

              if (state !== null) {
                scheduleWorkOnFiber(node, renderLanes);
              }
            } else if (node.tag === SuspenseListComponent) {
              // If the tail is hidden there might not be an Suspense boundaries
              // to schedule work on. In this case we have to schedule it on the
              // list itself.
              // We don't have to traverse to the children of the list since
              // the list will propagate the change when it rerenders.
              scheduleWorkOnFiber(node, renderLanes);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }

        function findLastContentRow(firstChild) {
          // This is going to find the last row among these children that is already
          // showing content on the screen, as opposed to being in fallback state or
          // new. If a row has multiple Suspense boundaries, any of them being in the
          // fallback state, counts as the whole row being in a fallback state.
          // Note that the "rows" will be workInProgress, but any nested children
          // will still be current since we haven't rendered them yet. The mounted
          // order may not be the same as the new order. We use the new order.
          let row = firstChild;
          let lastContentRow = null;

          while (row !== null) {
            const currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }

            row = row.sibling;
          }

          return lastContentRow;
        }

        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;

              if (typeof revealOrder === 'string') {
                switch (revealOrder.toLowerCase()) {
                  case 'together':
                  case 'forwards':
                  case 'backwards':
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                  case 'forward':
                  case 'backward':
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }

        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }

        function validateSuspenseListNestedChild(childSlot, index) {
          {
            const isArray = Array.isArray(childSlot);
            const isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

            if (isArray || isIterable) {
              const type = isArray ? 'array' : 'iterable';
              error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
              return false;
            }
          }
          return true;
        }

        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (let i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                const iteratorFn = getIteratorFn(children);

                if (typeof iteratorFn === 'function') {
                  const childrenIterator = iteratorFn.call(children);

                  if (childrenIterator) {
                    let step = childrenIterator.next();
                    let _i = 0;

                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }

                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }

        function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          const renderState = workInProgress.memoizedState;

          if (renderState === null) {
            workInProgress.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode,
              lastEffect: lastEffectBeforeRendering,
            };
          } else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        } // This can end up rendering this component multiple passes.
        // The first pass splits the children fibers into two sets. A head and tail.
        // We first render the head. If anything is in fallback state, we do another
        // pass through beginWork to rerender all children (including the tail) with
        // the force suspend context. If the first render didn't have anything in
        // in fallback state. Then we render each row in the tail one-by-one.
        // That happens in the completeWork phase without going back to beginWork.

        function updateSuspenseListComponent(current, workInProgress, renderLanes) {
          const nextProps = workInProgress.pendingProps;
          const { revealOrder } = nextProps;
          const tailMode = nextProps.tail;
          const newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current, workInProgress, newChildren, renderLanes);
          let suspenseContext = suspenseStackCursor.current;
          const shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
          } else {
            const didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

            if (didSuspendBefore) {
              // If we previously forced a fallback, we need to schedule work
              // on any nested boundaries to let them know to try to render
              // again. This is the same as context updating.
              propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            }

            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext);

          if ((workInProgress.mode & BlockingMode) === NoMode) {
            // In legacy mode, SuspenseList doesn't work so we just
            // use make it a noop by treating it as the default revealOrder.
            workInProgress.memoizedState = null;
          } else {
            switch (revealOrder) {
              case 'forwards':
              {
                const lastContentRow = findLastContentRow(workInProgress.child);
                let tail;

                if (lastContentRow === null) {
                // The whole list is part of the tail.
                // TODO: We could fast path by just rendering the tail now.
                  tail = workInProgress.child;
                  workInProgress.child = null;
                } else {
                // Disconnect the tail rows after the content row.
                // We're going to render them separately later.
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }

                initSuspenseListRenderState(workInProgress, false, // isBackwards
                  tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
              }

              case 'backwards':
              {
              // We're going to find the first row that has existing content.
              // At the same time we're going to reverse the list of everything
              // we pass in the meantime. That's going to be our tail in reverse
              // order.
                let _tail = null;
                let row = workInProgress.child;
                workInProgress.child = null;

                while (row !== null) {
                  const currentRow = row.alternate; // New rows can't be content rows.

                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  // This is the beginning of the main content.
                    workInProgress.child = row;
                    break;
                  }

                  const nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.

                initSuspenseListRenderState(workInProgress, true, // isBackwards
                  _tail, null, // last
                  tailMode, workInProgress.lastEffect);
                break;
              }

              case 'together':
              {
                initSuspenseListRenderState(workInProgress, false, // isBackwards
                  null, // tail
                  null, // last
                  undefined, workInProgress.lastEffect);
                break;
              }

              default:
              {
              // The default reveal order is the same as not having
              // a boundary.
                workInProgress.memoizedState = null;
              }
            }
          }

          return workInProgress.child;
        }

        function updatePortalComponent(current, workInProgress, renderLanes) {
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          const nextChildren = workInProgress.pendingProps;

          if (current === null) {
            // Portals are special because we don't append the children during mount
            // but at commit. Therefore we need to track insertions which the normal
            // flow doesn't do during mount. This doesn't happen at the root because
            // the root always starts with a "current" with a null child.
            // TODO: Consider unifying this with how the root works.
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
          } else {
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
          }

          return workInProgress.child;
        }

        let hasWarnedAboutUsingNoValuePropOnContextProvider = false;

        function updateContextProvider(current, workInProgress, renderLanes) {
          const providerType = workInProgress.type;
          const context = providerType._context;
          const newProps = workInProgress.pendingProps;
          const oldProps = workInProgress.memoizedProps;
          const newValue = newProps.value;
          {
            if (!('value' in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
              }
            }

            const providerPropTypes = workInProgress.type.propTypes;

            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
            }
          }
          pushProvider(workInProgress, newValue);

          if (oldProps !== null) {
            const oldValue = oldProps.value;
            const changedBits = calculateChangedBits(context, newValue, oldValue);

            if (changedBits === 0) {
              // No change. Bailout early if children are the same.
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              }
            } else {
              // The context value changed. Search for matching consumers and schedule
              // them to update.
              propagateContextChange(workInProgress, context, changedBits, renderLanes);
            }
          }

          const newChildren = newProps.children;
          reconcileChildren(current, workInProgress, newChildren, renderLanes);
          return workInProgress.child;
        }

        let hasWarnedAboutUsingContextAsConsumer = false;

        function updateContextConsumer(current, workInProgress, renderLanes) {
          let context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
          // DEV mode, we create a separate object for Context.Consumer that acts
          // like a proxy to Context. This proxy object adds unnecessary code in PROD
          // so we use the old behaviour (Context.Consumer references Context) to
          // reduce size and overhead. The separate object references context via
          // a property called "_context", which also gives us the ability to check
          // in DEV mode if this property exists or not and warn if it does not.

          {
            if (context._context === undefined) {
              // This may be because it's a Context (rather than a Consumer).
              // Or it may be because it's older React where they're the same thing.
              // We only want to warn if we're sure it's a new React.
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                }
              }
            } else {
              context = context._context;
            }
          }
          const newProps = workInProgress.pendingProps;
          const render = newProps.children;
          {
            if (typeof render !== 'function') {
              error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
            }
          }
          prepareToReadContext(workInProgress, renderLanes);
          const newValue = readContext(context, newProps.unstable_observedBits);
          let newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            newChildren = render(newValue);
            setIsRendering(false);
          } // React DevTools reads this flag.

          workInProgress.flags |= PerformedWork;
          reconcileChildren(current, workInProgress, newChildren, renderLanes);
          return workInProgress.child;
        }

        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }

        function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
          if (current !== null) {
            // Reuse previous dependencies
            workInProgress.dependencies = current.dependencies;
          }

          {
            // Don't update "base" render times for bailouts.
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

          if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
            // The children don't have any work either. We can skip them.
            // TODO: Once we add back resuming, we should check if the children are
            // a work-in-progress set. If so, we need to transfer their effects.
            return null;
          }
          // This fiber doesn't have work, but its subtree does. Clone the child
          // fibers and continue.
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }

        function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
          {
            const returnFiber = oldWorkInProgress.return;

            if (returnFiber === null) {
              throw new Error('Cannot swap the root fiber.');
            } // Disconnect from the old current.
            // It will get deleted.

            current.alternate = null;
            oldWorkInProgress.alternate = null; // Connect to the new tree.

            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              let prevSibling = returnFiber.child;

              if (prevSibling === null) {
                throw new Error('Expected parent to have a child.');
              }

              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;

                if (prevSibling === null) {
                  throw new Error('Expected to find the previous sibling.');
                }
              }

              prevSibling.sibling = newWorkInProgress;
            } // Delete the old fiber and place the new one.
            // Since the old fiber is disconnected, we have to schedule it manually.

            const last = returnFiber.lastEffect;

            if (last !== null) {
              last.nextEffect = current;
              returnFiber.lastEffect = current;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current;
            }

            current.nextEffect = null;
            current.flags = Deletion;
            newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

            return newWorkInProgress;
          }
        }

        function beginWork(current, workInProgress, renderLanes) {
          const updateLanes = workInProgress.lanes;
          {
            if (workInProgress._debugNeedsRemount && current !== null) {
              // This will restart the begin phase with a new fiber.
              return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
            }
          }

          if (current !== null) {
            const oldProps = current.memoizedProps;
            const newProps = workInProgress.pendingProps;

            if (oldProps !== newProps || hasContextChanged() // Force a re-render if the implementation changed due to hot reload:
        || workInProgress.type !== current.type) {
              // If props or context changed, mark the fiber as having performed work.
              // This may be unset if the props are determined to be equal later (memo).
              didReceiveUpdate = true;
            } else if (!includesSomeLane(renderLanes, updateLanes)) {
              didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
              // the begin phase. There's still some bookkeeping we that needs to be done
              // in this optimized path, mostly pushing stuff onto the stack.

              switch (workInProgress.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress);
                  resetHydrationState();
                  break;

                case HostComponent:
                  pushHostContext(workInProgress);
                  break;

                case ClassComponent:
                {
                  const Component = workInProgress.type;

                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress);
                  }

                  break;
                }

                case HostPortal:
                  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                  break;

                case ContextProvider:
                {
                  const newValue = workInProgress.memoizedProps.value;
                  pushProvider(workInProgress, newValue);
                  break;
                }

                case Profiler:
                  {
                    // Profiler should only call onRender when one of its descendants actually rendered.
                    const hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                    if (hasChildWork) {
                      workInProgress.flags |= Update;
                    } // Reset effect durations for the next eventual effect phase.
                    // These are reset during render to allow the DevTools commit hook a chance to read them,

                    const { stateNode } = workInProgress;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                  break;

                case SuspenseComponent:
                {
                  const state = workInProgress.memoizedState;

                  if (state !== null) {
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  // child fragment.
                    const primaryChildFragment = workInProgress.child;
                    const primaryChildLanes = primaryChildFragment.childLanes;

                    if (includesSomeLane(renderLanes, primaryChildLanes)) {
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                      return updateSuspenseComponent(current, workInProgress, renderLanes);
                    }
                    // The primary child fragment does not have pending work marked
                    // on it
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                    // priority. Bailout.

                    const child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                    if (child !== null) {
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling;
                    }
                    return null;
                  }
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));

                  break;
                }

                case SuspenseListComponent:
                {
                  const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

                  const _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                    // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                      return updateSuspenseListComponent(current, workInProgress, renderLanes);
                    } // If none of the children had any work, that means that none of
                    // them got retried so they'll still be blocked in the same way
                    // as before. We can fast bail out.

                    workInProgress.flags |= DidCapture;
                  } // If nothing suspended before and we're rendering the same children,
                  // then the tail doesn't matter. Anything new that suspends will work
                  // in the "together" mode, so we can continue from the state we had.

                  const renderState = workInProgress.memoizedState;

                  if (renderState !== null) {
                  // Reset to the "together" mode in case we've started a different
                  // update in the past but didn't complete it.
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                  }

                  pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                  if (_hasChildWork) {
                    break;
                  } else {
                  // If none of the children had any work, that means that none of
                  // them got retried so they'll still be blocked in the same way
                  // as before. We can fast bail out.
                    return null;
                  }
                }

                case OffscreenComponent:
                case LegacyHiddenComponent:
                {
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                  workInProgress.lanes = NoLanes;
                  return updateOffscreenComponent(current, workInProgress, renderLanes);
                }
              }

              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
              didReceiveUpdate = true;
            } else {
            // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
              didReceiveUpdate = false;
            }
          } else {
            didReceiveUpdate = false;
          } // Before entering the begin phase, clear pending update priority.
          // TODO: This assumes that we're about to evaluate the component and process
          // the update queue. However, there's an exception: SimpleMemoComponent
          // sometimes bails out later in the begin phase. This indicates that we should
          // move this assignment out of the common path and into each branch.

          workInProgress.lanes = NoLanes;

          switch (workInProgress.tag) {
            case IndeterminateComponent:
            {
              return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            }

            case LazyComponent:
            {
              const { elementType } = workInProgress;
              return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
            }

            case FunctionComponent:
            {
              const _Component = workInProgress.type;
              const unresolvedProps = workInProgress.pendingProps;
              const resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
            }

            case ClassComponent:
            {
              const _Component2 = workInProgress.type;
              const _unresolvedProps = workInProgress.pendingProps;

              const _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

              return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
            }

            case HostRoot:
              return updateHostRoot(current, workInProgress, renderLanes);

            case HostComponent:
              return updateHostComponent(current, workInProgress, renderLanes);

            case HostText:
              return updateHostText(current, workInProgress);

            case SuspenseComponent:
              return updateSuspenseComponent(current, workInProgress, renderLanes);

            case HostPortal:
              return updatePortalComponent(current, workInProgress, renderLanes);

            case ForwardRef:
            {
              const { type } = workInProgress;
              const _unresolvedProps2 = workInProgress.pendingProps;

              const _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

              return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            }

            case Fragment:
              return updateFragment(current, workInProgress, renderLanes);

            case Mode:
              return updateMode(current, workInProgress, renderLanes);

            case Profiler:
              return updateProfiler(current, workInProgress, renderLanes);

            case ContextProvider:
              return updateContextProvider(current, workInProgress, renderLanes);

            case ContextConsumer:
              return updateContextConsumer(current, workInProgress, renderLanes);

            case MemoComponent:
            {
              const _type2 = workInProgress.type;
              const _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

              let _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

              {
                if (workInProgress.type !== workInProgress.elementType) {
                  const outerPropTypes = _type2.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                      'prop', getComponentName(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
            }

            case SimpleMemoComponent:
            {
              return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
            }

            case IncompleteClassComponent:
            {
              const _Component3 = workInProgress.type;
              const _unresolvedProps4 = workInProgress.pendingProps;

              const _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

              return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
            }

            case SuspenseListComponent:
            {
              return updateSuspenseListComponent(current, workInProgress, renderLanes);
            }

            case FundamentalComponent:
            {
              break;
            }

            case ScopeComponent:
            {
              break;
            }

            case Block:
            {
              break;
            }

            case OffscreenComponent:
            {
              return updateOffscreenComponent(current, workInProgress, renderLanes);
            }

            case LegacyHiddenComponent:
            {
              return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
            }
          }

          {
            {
              throw Error(`Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in React. Please file an issue.`);
            }
          }
        }

        function markUpdate(workInProgress) {
          // Tag the fiber with an update effect. This turns a Placement into
          // a PlacementAndUpdate.
          workInProgress.flags |= Update;
        }

        function markRef$1(workInProgress) {
          workInProgress.flags |= Ref;
        }

        let appendAllChildren;
        let updateHostContainer;
        let updateHostComponent$1;
        let updateHostText$1;
        {
          // Mutation mode
          appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            let node = workInProgress.child;

            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal) ;else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }

              if (node === workInProgress) {
                return;
              }

              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress) {
                  return;
                }

                node = node.return;
              }

              node.sibling.return = node.return;
              node = node.sibling;
            }
          };

          updateHostContainer = function (workInProgress) { // Noop
          };

          updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            const oldProps = current.memoizedProps;

            if (oldProps === newProps) {
              // In mutation mode, this is sufficient for a bailout because
              // we won't touch this node even if children changed.
              return;
            } // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.

            const instance = workInProgress.stateNode;
            const currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
            // component is hitting the resume path. Figure out why. Possibly
            // related to `hidden`.

            const updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

            workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
            // is a new ref we mark this as an update. All the work is done in commitWork.

            if (updatePayload) {
              markUpdate(workInProgress);
            }
          };

          updateHostText$1 = function (current, workInProgress, oldText, newText) {
            // If the text differs, mark it as an update. All the work in done in commitWork.
            if (oldText !== newText) {
              markUpdate(workInProgress);
            }
          };
        }

        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            // If we're hydrating, we should consume as many items as we can
            // so we don't leave any behind.
            return;
          }

          switch (renderState.tailMode) {
            case 'hidden':
            {
            // Any insertions at the end of the tail list after this point
            // should be invisible. If there are already mounted boundaries
            // anything before them are not considered for collapsing.
            // Therefore we need to go through the whole tail to find if
            // there are any.
              let tailNode = renderState.tail;
              let lastTailNode = null;

              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }

                tailNode = tailNode.sibling;
              } // Next we're simply going to delete all insertions after the
              // last rendered item.

              if (lastTailNode === null) {
              // All remaining items in the tail are insertions.
                renderState.tail = null;
              } else {
              // Detach the insertion after the last node that was already
              // inserted.
                lastTailNode.sibling = null;
              }

              break;
            }

            case 'collapsed':
            {
            // Any insertions at the end of the tail list after this point
            // should be invisible. If there are already mounted boundaries
            // anything before them are not considered for collapsing.
            // Therefore we need to go through the whole tail to find if
            // there are any.
              let _tailNode = renderState.tail;
              let _lastTailNode = null;

              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }

                _tailNode = _tailNode.sibling;
              } // Next we're simply going to delete all insertions after the
              // last rendered item.

              if (_lastTailNode === null) {
              // All remaining items in the tail are insertions.
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                // We suspended during the head. We want to show at least one
                // row at the tail. So we'll keep on and cut off the rest.
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
              // Detach the insertion after the last node that was already
              // inserted.
                _lastTailNode.sibling = null;
              }

              break;
            }
          }
        }

        function completeWork(current, workInProgress, renderLanes) {
          const newProps = workInProgress.pendingProps;

          switch (workInProgress.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;

            case ClassComponent:
            {
              const Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              return null;
            }

            case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              resetWorkInProgressVersions();
              const fiberRoot = workInProgress.stateNode;

              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }

              if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
                const wasHydrated = popHydrationState(workInProgress);

                if (wasHydrated) {
                // If we hydrated, then we'll need to schedule an update for
                // the commit side-effects on the root.
                  markUpdate(workInProgress);
                } else if (!fiberRoot.hydrate) {
                // Schedule an effect to clear this container at the start of the next commit.
                // This handles the case of React rendering into a container with previous children.
                // It's also safe to do for updates too, because current.child would only be null
                // if the previous render was null (so the the container would already be empty).
                  workInProgress.flags |= Snapshot;
                }
              }

              updateHostContainer(workInProgress);
              return null;
            }

            case HostComponent:
            {
              popHostContext(workInProgress);
              const rootContainerInstance = getRootHostContainer();
              const { type } = workInProgress;

              if (current !== null && workInProgress.stateNode != null) {
                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

                if (current.ref !== workInProgress.ref) {
                  markRef$1(workInProgress);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress.stateNode !== null)) {
                    {
                      throw Error('We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.');
                    }
                  } // This can happen when we abort work.

                  return null;
                }

                const currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                // "stack" as the parent. Then append children as we go in beginWork
                // or completeWork depending on whether we want to add them top->down or
                // bottom->up. Top->down is faster in IE11.

                const _wasHydrated = popHydrationState(workInProgress);

                if (_wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                  if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  // If changes to the hydrated node need to be applied at the
                  // commit-phase we mark this as such.
                    markUpdate(workInProgress);
                  }
                } else {
                  const instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                  appendAllChildren(instance, workInProgress, false, false);
                  workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                  // (eg DOM renderer supports auto-focus for certain elements).
                  // Make sure such renderers get scheduled for later work.

                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress);
                  }
                }

                if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                  markRef$1(workInProgress);
                }
              }

              return null;
            }

            case HostText:
            {
              const newText = newProps;

              if (current && workInProgress.stateNode != null) {
                const oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                // to schedule a side-effect to do the updates.

                updateHostText$1(current, workInProgress, oldText, newText);
              } else {
                if (typeof newText !== 'string') {
                  if (!(workInProgress.stateNode !== null)) {
                    {
                      throw Error('We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.');
                    }
                  } // This can happen when we abort work.
                }

                const _rootContainerInstance = getRootHostContainer();

                const _currentHostContext = getHostContext();

                const _wasHydrated2 = popHydrationState(workInProgress);

                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress)) {
                    markUpdate(workInProgress);
                  }
                } else {
                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
              }

              return null;
            }

            case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              const nextState = workInProgress.memoizedState;

              if ((workInProgress.flags & DidCapture) !== NoFlags) {
              // Something suspended. Re-render with the fallback children.
                workInProgress.lanes = renderLanes; // Do not reset the effect list.

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              const nextDidTimeout = nextState !== null;
              let prevDidTimeout = false;

              if (current === null) {
                if (workInProgress.memoizedProps.fallback !== undefined) {
                  popHydrationState(workInProgress);
                }
              } else {
                const prevState = current.memoizedState;
                prevDidTimeout = prevState !== null;
              }

              if (nextDidTimeout && !prevDidTimeout) {
              // If this subtreee is running in blocking mode we can suspend,
              // otherwise we won't suspend.
              // TODO: This will still suspend a synchronous tree if anything
              // in the concurrent tree already suspended during this render.
              // This is a known bug.
                if ((workInProgress.mode & BlockingMode) !== NoMode) {
                // TODO: Move this back to throwException because this is too late
                // if this is a large tree which is common for initial loads. We
                // don't know if we should restart a render or not until we get
                // this marker, and this is too late.
                // If this render already had a ping or lower pri updates,
                // and this is the first time we know we're going to suspend we
                // should be able to immediately restart from within throwException.
                  const hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  // If this was in an invisible tree or a new render, then showing
                  // this boundary is ok.
                    renderDidSuspend();
                  } else {
                  // Otherwise, we're going to have to hide content so we should
                  // suspend for longer if possible.
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }

              {
              // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) {
                // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                  workInProgress.flags |= Update;
                }
              }
              return null;
            }

            case HostPortal:
              popHostContainer(workInProgress);
              updateHostContainer(workInProgress);

              if (current === null) {
                preparePortalMount(workInProgress.stateNode.containerInfo);
              }

              return null;

            case ContextProvider:
              // Pop provider fiber
              popProvider(workInProgress);
              return null;

            case IncompleteClassComponent:
            {
            // Same as class component case. I put it down here so that the tags are
            // sequential to ensure this switch is compiled to a jump table.
              const _Component = workInProgress.type;

              if (isContextProvider(_Component)) {
                popContext(workInProgress);
              }

              return null;
            }

            case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              const renderState = workInProgress.memoizedState;

              if (renderState === null) {
              // We're running in the default, "independent" mode.
              // We don't do anything in this mode.
                return null;
              }

              let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
              const renderedTail = renderState.rendering;

              if (renderedTail === null) {
              // We just rendered the head.
                if (!didSuspendAlready) {
                // This is the first pass. We need to figure out if anything is still
                // suspended in the rendered set.
                // If new content unsuspended, but there's still some content that
                // didn't. Then we need to do a second pass that forces everything
                // to keep showing their fallbacks.
                // We might be suspended if something in this render pass suspended, or
                // something in the previous committed pass suspended. Otherwise,
                // there's no chance so we can skip the expensive call to
                // findFirstSuspended.
                  const cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

                  if (!cannotBeSuspended) {
                    let row = workInProgress.child;

                    while (row !== null) {
                      const suspended = findFirstSuspended(row);

                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                        // part of the second pass. In that case nothing will subscribe to
                        // its thennables. Instead, we'll transfer its thennables to the
                        // SuspenseList so that it can retry if they resolve.
                        // There might be multiple of these in the list but since we're
                        // going to wait for all of them anyway, it doesn't really matter
                        // which ones gets to ping. In theory we could get clever and keep
                        // track of how many dependencies remain but it gets tricky because
                        // in the meantime, we can add/remove/change items and dependencies.
                        // We might bail out of the loop before finding any but that
                        // doesn't matter since that means that the other boundaries that
                        // we did find already has their listeners attached.

                        const newThennables = suspended.updateQueue;

                        if (newThennables !== null) {
                          workInProgress.updateQueue = newThennables;
                          workInProgress.flags |= Update;
                        } // Rerender the whole list, but this time, we'll force fallbacks
                        // to stay in place.
                        // Reset the effect list before doing the second pass since that's now invalid.

                        if (renderState.lastEffect === null) {
                          workInProgress.firstEffect = null;
                        }

                        workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                        resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                        // rerender the children.

                        pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress.child;
                      }

                      row = row.sibling;
                    }
                  }

                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  // We have already passed our CPU deadline but we still have rows
                  // left in the tail. We'll just give up further attempts to render
                  // the main content and only render fallbacks.
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                    // to get it started back up to attempt the next item. While in terms
                    // of priority this work has the same priority as this current render,
                    // it's not part of the same transition once the transition has
                    // committed. If it's sync, we still want to yield so that it can be
                    // painted. Conceptually, this is really the same as pinging.
                    // We can use any RetryLane even if it's the one currently rendering
                    // since we're leaving it behind on this node.

                    workInProgress.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                } // Next we're going to render the tail.
              } else {
              // Append the rendered row to the child list.
                if (!didSuspendAlready) {
                  const _suspended = findFirstSuspended(renderedTail);

                  if (_suspended !== null) {
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                    // get lost if this row ends up dropped during a second pass.

                    const _newThennables = _suspended.updateQueue;

                    if (_newThennables !== null) {
                      workInProgress.updateQueue = _newThennables;
                      workInProgress.flags |= Update;
                    }

                    cutOffTailIfNeeded(renderState, true); // This might have been modified.

                    if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                    ) {
                      // We need to delete the row we just rendered.
                      // Reset the effect list to what it was before we rendered this
                      // child. The nested children have already appended themselves.
                      const lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      } // We're done.

                      return null;
                    }
                  } else if ( // The time it took to render last row is greater than the remaining
                  // time we have to render. So rendering one more row would likely
                  // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                  // We have now passed our CPU deadline and we'll just give up further
                  // attempts to render the main content and only render fallbacks.
                  // The assumption is that this is usually faster.
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                    // to get it started back up to attempt the next item. While in terms
                    // of priority this work has the same priority as this current render,
                    // it's not part of the same transition once the transition has
                    // committed. If it's sync, we still want to yield so that it can be
                    // painted. Conceptually, this is really the same as pinging.
                    // We can use any RetryLane even if it's the one currently rendering
                    // since we're leaving it behind on this node.

                    workInProgress.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                }

                if (renderState.isBackwards) {
                // The effect list of the backwards tail will have been added
                // to the end. This breaks the guarantee that life-cycles fire in
                // sibling order but that isn't a strong guarantee promised by React.
                // Especially since these might also just pop in during future commits.
                // Append to the beginning of the list.
                  renderedTail.sibling = workInProgress.child;
                  workInProgress.child = renderedTail;
                } else {
                  const previousSibling = renderState.last;

                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress.child = renderedTail;
                  }

                  renderState.last = renderedTail;
                }
              }

              if (renderState.tail !== null) {
              // We still have tail rows to render.
              // Pop a row.
                const next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null; // Restore the context.
                // TODO: We can probably just avoid popping it instead and only
                // setting it the first time we go from not suspended to suspended.

                let suspenseContext = suspenseStackCursor.current;

                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }

                pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

                return next;
              }

              return null;
            }

            case FundamentalComponent:
            {
              break;
            }

            case ScopeComponent:
            {
              break;
            }

            case Block:
              break;

            case OffscreenComponent:
            case LegacyHiddenComponent:
            {
              popRenderLanes(workInProgress);

              if (current !== null) {
                const _nextState = workInProgress.memoizedState;
                const _prevState = current.memoizedState;
                const prevIsHidden = _prevState !== null;
                const nextIsHidden = _nextState !== null;

                if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
                  workInProgress.flags |= Update;
                }
              }

              return null;
            }
          }

          {
            {
              throw Error(`Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in React. Please file an issue.`);
            }
          }
        }

        function unwindWork(workInProgress, renderLanes) {
          switch (workInProgress.tag) {
            case ClassComponent:
            {
              const Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              const { flags } = workInProgress;

              if (flags & ShouldCapture) {
                workInProgress.flags = flags & ~ShouldCapture | DidCapture;

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              return null;
            }

            case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              resetWorkInProgressVersions();
              const _flags = workInProgress.flags;

              if (!((_flags & DidCapture) === NoFlags)) {
                {
                  throw Error('The root failed to unmount after an error. This is likely a bug in React. Please file an issue.');
                }
              }

              workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            case HostComponent:
            {
            // TODO: popHydrationState
              popHostContext(workInProgress);
              return null;
            }

            case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              const _flags2 = workInProgress.flags;

              if (_flags2 & ShouldCapture) {
                workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              return null;
            }

            case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
              // caught by a nested boundary. If not, it should bubble through.

              return null;
            }

            case HostPortal:
              popHostContainer(workInProgress);
              return null;

            case ContextProvider:
              popProvider(workInProgress);
              return null;

            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress);
              return null;

            default:
              return null;
          }
        }

        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent:
            {
              const { childContextTypes } = interruptedWork.type;

              if (childContextTypes !== null && childContextTypes !== undefined) {
                popContext(interruptedWork);
              }

              break;
            }

            case HostRoot:
            {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }

            case HostComponent:
            {
              popHostContext(interruptedWork);
              break;
            }

            case HostPortal:
              popHostContainer(interruptedWork);
              break;

            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;

            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;

            case ContextProvider:
              popProvider(interruptedWork);
              break;

            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }

        function createCapturedValue(value, source) {
          // If the value is an error, call this function immediately after it is thrown
          // so the stack is accurate.
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
          };
        } // This module is forked in different environments.
        // By default, return `true` to log errors to the console.
        // Forks can return `false` if this isn't desirable.

        function showErrorDialog(boundary, errorInfo) {
          return true;
        }

        function logCapturedError(boundary, errorInfo) {
          try {
            const logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.

            if (logError === false) {
              return;
            }

            const error = errorInfo.value;

            if (true) {
              const { source } = errorInfo;
              const { stack } = errorInfo;
              const componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
              // `preventDefault()` in window `error` handler.
              // We record this information as an expando on the error.

              if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  // The error is recoverable and was silenced.
                  // Ignore it and don't print the stack addendum.
                  // This is handy for testing error boundaries without noise.
                  return;
                } // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.

                console.error(error); // Don't transform to our wrapper
                // For a more detailed description of this block, see:
                // https://github.com/facebook/react/pull/13384
              }

              const componentName = source ? getComponentName(source.type) : null;
              const componentNameMessage = componentName ? `The above error occurred in the <${componentName}> component:` : 'The above error occurred in one of your React components:';
              let errorBoundaryMessage;
              const errorBoundaryName = getComponentName(boundary.type);

              if (errorBoundaryName) {
                errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + `using the error boundary you provided, ${errorBoundaryName}.`;
              } else {
                errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
              }

              const combinedMessage = `${componentNameMessage}\n${componentStack}\n\n` + `${errorBoundaryMessage}`; // In development, we provide our own message with just the component stack.
              // We don't include the original error message and JS stack because the browser
              // has already printed it. Even if the application swallows the error, it is still
              // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

              console.error(combinedMessage); // Don't transform to our wrapper
            } else {}
          } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(() => {
              throw e;
            });
          }
        }

        const PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

        function createRootErrorUpdate(fiber, errorInfo, lane) {
          const update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

          update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
          // being called "element".

          update.payload = {
            element: null,
          };
          const error = errorInfo.value;

          update.callback = function () {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
          };

          return update;
        }

        function createClassErrorUpdate(fiber, errorInfo, lane) {
          const update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          const { getDerivedStateFromError } = fiber.type;

          if (typeof getDerivedStateFromError === 'function') {
            const error$1 = errorInfo.value;

            update.payload = function () {
              logCapturedError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }

          const inst = fiber.stateNode;

          if (inst !== null && typeof inst.componentDidCatch === 'function') {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }

              if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

                logCapturedError(fiber, errorInfo);
              }

              const error$1 = errorInfo.value;
              const { stack } = errorInfo;
              this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : '',
              });
              {
                if (typeof getDerivedStateFromError !== 'function') {
                  // If componentDidCatch is the only error boundary method defined,
                  // then it needs to call setState to recover from errors.
                  // If no state update is scheduled then the boundary will swallow the error.
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
                  }
                }
              }
            };
          } else {
            update.callback = function () {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }

          return update;
        }

        function attachPingListener(root, wakeable, lanes) {
          // Attach a listener to the promise to "ping" the root and retry. But only if
          // one does not already exist for the lanes we're currently rendering (which
          // acts like a "thread ID" here).
          let { pingCache } = root;
          let threadIDs;

          if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);

            if (threadIDs === undefined) {
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }

          if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }

        function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
          // The source fiber did not complete.
          sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

          sourceFiber.firstEffect = sourceFiber.lastEffect = null;

          if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            const wakeable = value;

            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              // Reset the memoizedState to what it was before we attempted
              // to render it.
              const currentSource = sourceFiber.alternate;

              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }

            const hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

            let _workInProgress = returnFiber;

            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                // Found the nearest boundary.
                // Stash the promise on the boundary fiber. If the boundary times out, we'll
                // attach another listener to flip the boundary back to its normal state.
                const wakeables = _workInProgress.updateQueue;

                if (wakeables === null) {
                  const updateQueue = new Set();
                  updateQueue.add(wakeable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                } // If the boundary is outside of blocking mode, we should *not*
                // suspend the commit. Pretend as if the suspended component rendered
                // null and keep rendering. In the commit phase, we'll schedule a
                // subsequent synchronous update to re-render the Suspense.
                //
                // Note: It doesn't matter whether the component that suspended was
                // inside a blocking mode tree. If the Suspense is outside of it, we
                // should *not* suspend the commit.

                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.flags |= DidCapture;
                  sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                  // But we shouldn't call any lifecycle methods or callbacks. Remove
                  // all lifecycle effect tags.

                  sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

                  if (sourceFiber.tag === ClassComponent) {
                    const currentSourceFiber = sourceFiber.alternate;

                    if (currentSourceFiber === null) {
                      // This is a new mount. Change the tag so it's not mistaken for a
                      // completed class component. For example, we should not call
                      // componentWillUnmount if it is deleted.
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      // When we try rendering again, we should not reuse the current fiber,
                      // since it's known to be in an inconsistent state. Use a force update to
                      // prevent a bail out.
                      const update = createUpdate(NoTimestamp, SyncLane);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  } // The source fiber did not complete. Mark it with Sync priority to
                  // indicate that it still has pending work.

                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

                  return;
                } // Confirmed that the boundary is in a concurrent mode tree. Continue
                // with the normal suspend path.
                //
                // After this we'll use a set of heuristics to determine whether this
                // render pass will run to completion or restart or "suspend" the commit.
                // The actual logic for this is spread out in different places.
                //
                // This first principle is that if we're going to suspend when we complete
                // a root, then we should also restart if we get an update or ping that
                // might unsuspend it, and vice versa. The only reason to suspend is
                // because you think you might want to restart before committing. However,
                // it doesn't make sense to restart only while in the period we're suspended.
                //
                // Restarting too aggressively is also not good because it starves out any
                // intermediate loading state. So we use heuristics to determine when.
                // Suspense Heuristics
                //
                // If nothing threw a Promise or all the same fallbacks are already showing,
                // then don't suspend/restart.
                //
                // If this is an initial render of a new tree of Suspense boundaries and
                // those trigger a fallback, then don't suspend/restart. We want to ensure
                // that we can show the initial loading state as quickly as possible.
                //
                // If we hit a "Delayed" case, such as when we'd switch from content back into
                // a fallback, then we should always suspend/restart. Transitions apply
                // to this case. If none is defined, JND is used instead.
                //
                // If we're already showing a fallback and it gets "retried", allowing us to show
                // another level, but there's still an inner boundary that would show a fallback,
                // then we suspend/restart for 500ms since the last time we showed a fallback
                // anywhere in the tree. This effectively throttles progressive loading into a
                // consistent train of commits. This also gives us an opportunity to restart to
                // get to the completed state slightly earlier.
                //
                // If there's ambiguity due to batching it's resolved in preference of:
                // 1) "delayed", 2) "initial render", 3) "retry".
                //
                // We want to ensure that a "busy" state doesn't get force committed. We want to
                // ensure that new initial loading states can commit as soon as possible.

                attachPingListener(root, wakeable, rootRenderLanes);
                _workInProgress.flags |= ShouldCapture;
                _workInProgress.lanes = rootRenderLanes;
                return;
              } // This boundary already captured during this render. Continue to the next
              // boundary.

              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?

            value = new Error(`${getComponentName(sourceFiber.type) || 'A React component'} suspended while rendering, but no fallback UI was specified.\n` + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
          } // We didn't find a boundary that could handle this type of exception. Start
          // over and traverse parent path again, this time treating the exception
          // as an error.

          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          let workInProgress = returnFiber;

          do {
            switch (workInProgress.tag) {
              case HostRoot:
              {
                const _errorInfo = value;
                workInProgress.flags |= ShouldCapture;
                const lane = pickArbitraryLane(rootRenderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

                const _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

                enqueueCapturedUpdate(workInProgress, _update);
                return;
              }

              case ClassComponent:
                // Capture and retry
                var errorInfo = value;
                var ctor = workInProgress.type;
                var instance = workInProgress.stateNode;

                if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress.flags |= ShouldCapture;

                  const _lane = pickArbitraryLane(rootRenderLanes);

                  workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

                  const _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

                  enqueueCapturedUpdate(workInProgress, _update2);
                  return;
                }

                break;
            }

            workInProgress = workInProgress.return;
          } while (workInProgress !== null);
        }

        let didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        const PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

        const callComponentWillUnmountWithTimer = function (current, instance) {
          instance.props = current.memoizedProps;
          instance.state = current.memoizedState;
          {
            instance.componentWillUnmount();
          }
        }; // Capture errors so they don't interrupt unmounting.

        function safelyCallComponentWillUnmount(current, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

            if (hasCaughtError()) {
              const unmountError = clearCaughtError();
              captureCommitPhaseError(current, unmountError);
            }
          }
        }

        function safelyDetachRef(current) {
          const { ref } = current;

          if (ref !== null) {
            if (typeof ref === 'function') {
              {
                invokeGuardedCallback(null, ref, null, null);

                if (hasCaughtError()) {
                  const refError = clearCaughtError();
                  captureCommitPhaseError(current, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }

        function safelyCallDestroy(current, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);

            if (hasCaughtError()) {
              const error = clearCaughtError();
              captureCommitPhaseError(current, error);
            }
          }
        }

        function commitBeforeMutationLifeCycles(current, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
            {
              return;
            }

            case ClassComponent:
            {
              if (finishedWork.flags & Snapshot) {
                if (current !== null) {
                  const prevProps = current.memoizedProps;
                  const prevState = current.memoizedState;
                  const instance = finishedWork.stateNode; // We could update instance props and state here,
                  // but instead we rely on them being set during last render.
                  // TODO: revisit this when we implement resuming.

                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                      }
                    }
                  }
                  const snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    const didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }

              return;
            }

            case HostRoot:
            {
              {
                if (finishedWork.flags & Snapshot) {
                  const root = finishedWork.stateNode;
                  clearContainer(root.containerInfo);
                }
              }
              return;
            }

            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              // Nothing to do for these component types
              return;
          }

          {
            {
              throw Error('This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
          }
        }

        function commitHookEffectListUnmount(tag, finishedWork) {
          const { updateQueue } = finishedWork;
          const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

          if (lastEffect !== null) {
            const firstEffect = lastEffect.next;
            let effect = firstEffect;

            do {
              if ((effect.tag & tag) === tag) {
                // Unmount
                const { destroy } = effect;
                effect.destroy = undefined;

                if (destroy !== undefined) {
                  destroy();
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }

        function commitHookEffectListMount(tag, finishedWork) {
          const { updateQueue } = finishedWork;
          const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

          if (lastEffect !== null) {
            const firstEffect = lastEffect.next;
            let effect = firstEffect;

            do {
              if ((effect.tag & tag) === tag) {
                // Mount
                const { create } = effect;
                effect.destroy = create();
                {
                  const { destroy } = effect;

                  if (destroy !== undefined && typeof destroy !== 'function') {
                    let addendum = void 0;

                    if (destroy === null) {
                      addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                    } else if (typeof destroy.then === 'function') {
                      addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                    } else {
                      addendum = ` You returned: ${destroy}`;
                    }

                    error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
                  }
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }

        function schedulePassiveEffects(finishedWork) {
          const { updateQueue } = finishedWork;
          const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

          if (lastEffect !== null) {
            const firstEffect = lastEffect.next;
            let effect = firstEffect;

            do {
              const _effect = effect;
              const { next } = _effect;
              const { tag } = _effect;

              if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                enqueuePendingPassiveHookEffectMount(finishedWork, effect);
              }

              effect = next;
            } while (effect !== firstEffect);
          }
        }

        function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
            {
            // At this point layout effects have already been destroyed (during mutation phase).
            // This is done to prevent sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              schedulePassiveEffects(finishedWork);
              return;
            }

            case ClassComponent:
            {
              const instance = finishedWork.stateNode;

              if (finishedWork.flags & Update) {
                if (current === null) {
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                } else {
                  const prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                  const prevState = current.memoizedState; // We could update instance props and state here,
                  // but instead we rely on them being set during last render.
                  // TODO: revisit this when we implement resuming.

                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              } // TODO: I think this is now always non-null by the time it reaches the
              // commit phase. Consider removing the type check.

              const { updateQueue } = finishedWork;

              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                    }
                  }
                } // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                commitUpdateQueue(finishedWork, updateQueue, instance);
              }

              return;
            }

            case HostRoot:
            {
            // TODO: I think this is now always non-null by the time it reaches the
            // commit phase. Consider removing the type check.
              const _updateQueue = finishedWork.updateQueue;

              if (_updateQueue !== null) {
                let _instance = null;

                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;

                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }

                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }

              return;
            }

            case HostComponent:
            {
              const _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
              // (eg DOM renderer may schedule auto-focus for inputs and form controls).
              // These effects should only be committed when components are first mounted,
              // aka when there is no current/alternate.

              if (current === null && finishedWork.flags & Update) {
                const { type } = finishedWork;
                const props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }

              return;
            }

            case HostText:
            {
            // We have no life-cycles associated with text.
              return;
            }

            case HostPortal:
            {
            // We have no life-cycles associated with portals.
              return;
            }

            case Profiler:
            {
              {
                const _finishedWork$memoize2 = finishedWork.memoizedProps;
                const { onCommit } = _finishedWork$memoize2;
                const { onRender } = _finishedWork$memoize2;
                const { effectDuration } = finishedWork.stateNode;
                const commitTime = getCommitTime();

                if (typeof onRender === 'function') {
                  {
                    onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }

            case SuspenseComponent:
            {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }

            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }

          {
            {
              throw Error('This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
          }
        }

        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            // We only have the top Fiber that was inserted but we need to recurse down its
            // children to find all the terminal nodes.
            let node = finishedWork;

            while (true) {
              if (node.tag === HostComponent) {
                const instance = node.stateNode;

                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                const _instance3 = node.stateNode;

                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }

              if (node === finishedWork) {
                return;
              }

              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }

                node = node.return;
              }

              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }

        function commitAttachRef(finishedWork) {
          const { ref } = finishedWork;

          if (ref !== null) {
            const instance = finishedWork.stateNode;
            let instanceToUse;

            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;

              default:
                instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag

            if (typeof ref === 'function') {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty('current')) {
                  error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }

        function commitDetachRef(current) {
          const currentRef = current.ref;

          if (currentRef !== null) {
            if (typeof currentRef === 'function') {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        } // User-originating errors (lifecycles and refs) should not interrupt
        // deletion, so don't let them throw. Host-originating errors should
        // interrupt deletion, so it's okay

        function commitUnmount(finishedRoot, current, renderPriorityLevel) {
          onCommitUnmount(current);

          switch (current.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
            {
              const { updateQueue } = current;

              if (updateQueue !== null) {
                const { lastEffect } = updateQueue;

                if (lastEffect !== null) {
                  const firstEffect = lastEffect.next;
                  let effect = firstEffect;

                  do {
                    const _effect2 = effect;
                    const { destroy } = _effect2;
                    const { tag } = _effect2;

                    if (destroy !== undefined) {
                      if ((tag & Passive$1) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(current, effect);
                      } else {
                        {
                          safelyCallDestroy(current, destroy);
                        }
                      }
                    }

                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }

              return;
            }

            case ClassComponent:
            {
              safelyDetachRef(current);
              const instance = current.stateNode;

              if (typeof instance.componentWillUnmount === 'function') {
                safelyCallComponentWillUnmount(current, instance);
              }

              return;
            }

            case HostComponent:
            {
              safelyDetachRef(current);
              return;
            }

            case HostPortal:
            {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
              {
                unmountHostComponents(finishedRoot, current);
              }
            }

            case FundamentalComponent:
            {

            }

            case DehydratedFragment:
            {

            }

            case ScopeComponent:
            {

            }
          }
        }

        function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
          // While we're inside a removed host node we don't want to call
          // removeChild on the inner nodes because they're removed by the top
          // call anyway. We also want to call componentWillUnmount on all
          // composites before this host node is removed from the tree. Therefore
          // we do an inner loop while we're still inside the host node.
          let node = root;

          while (true) {
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.

            if (node.child !== null // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === root) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === root) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }

        function detachFiberMutation(fiber) {
          // Cut off the return pointers to disconnect it from the tree. Ideally, we
          // should clear the child pointer of the parent alternate to let this
          // get GC:ed but we don't know which for sure which parent is the current
          // one so we'll settle for GC:ing the subtree of this child. This child
          // itself will be GC:ed when the parent updates the next time.
          // Note: we cannot null out sibling here, otherwise it can cause issues
          // with findDOMNode and how it requires the sibling field to carry out
          // traversal in a later effect. See PR #16820. We now clear the sibling
          // field after effects, see: detachFiberAfterEffects.
          //
          // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
          // It may be required if the current component is an error boundary,
          // and one of its descendants throws while unmounting a passive effect.
          fiber.alternate = null;
          fiber.child = null;
          fiber.dependencies = null;
          fiber.firstEffect = null;
          fiber.lastEffect = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.return = null;
          fiber.updateQueue = null;
          {
            fiber._debugOwner = null;
          }
        }

        function getHostParentFiber(fiber) {
          let parent = fiber.return;

          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }

            parent = parent.return;
          }

          {
            {
              throw Error('Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
            }
          }
        }

        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }

        function getHostSibling(fiber) {
          // We're going to search forward into the tree until we find a sibling host
          // node. Unfortunately, if multiple insertions are done in a row we have to
          // search past them. This leads to exponential search for the next sibling.
          // TODO: Find a more efficient way to do this.
          let node = fiber;

          siblings: while (true) {
            // If we didn't find anything, let's try the next sibling.
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;

            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              // If it is not host node and, we might have a host node inside it.
              // Try to search down until we find one.
              if (node.flags & Placement) {
                // If we don't have a child, try the siblings instead.
                continue siblings;
              } // If we don't have a child, try the siblings instead.
              // We also skip portals because they are not part of this host tree.

              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            } // Check if this host node is stable or about to be placed.

            if (!(node.flags & Placement)) {
              // Found it!
              return node.stateNode;
            }
          }
        }

        function commitPlacement(finishedWork) {
          const parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

          let parent;
          let isContainer;
          const parentStateNode = parentFiber.stateNode;

          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;

            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;

            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;

            case FundamentalComponent: // eslint-disable-next-line-no-fallthrough

            default:
            {
              {
                throw Error('Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
              }
            }
          }

          if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag

            parentFiber.flags &= ~ContentReset;
          }

          const before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
          // children to find all the terminal nodes.

          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }

        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          const { tag } = node;
          const isHost = tag === HostComponent || tag === HostText;

          if (isHost || enableFundamentalAPI) {
            const stateNode = isHost ? node.stateNode : node.stateNode.instance;

            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal) ;else {
            const { child } = node;

            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              let { sibling } = child;

              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }

        function insertOrAppendPlacementNode(node, before, parent) {
          const { tag } = node;
          const isHost = tag === HostComponent || tag === HostText;

          if (isHost || enableFundamentalAPI) {
            const stateNode = isHost ? node.stateNode : node.stateNode.instance;

            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal) ;else {
            const { child } = node;

            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              let { sibling } = child;

              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }

        function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
          // We only have the top Fiber that was deleted but we need to recurse down its
          // children to find all the terminal nodes.
          let node = current; // Each iteration, currentParent is populated with node's host parent if not
          // currentParentIsValid.

          let currentParentIsValid = false; // Note: these two variables *must* always be updated together.

          let currentParent;
          let currentParentIsContainer;

          while (true) {
            if (!currentParentIsValid) {
              let parent = node.return;

              findParent: while (true) {
                if (!(parent !== null)) {
                  {
                    throw Error('Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
                  }
                }

                const parentStateNode = parent.stateNode;

                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parentStateNode;
                    currentParentIsContainer = false;
                    break findParent;

                  case HostRoot:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;

                  case HostPortal:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }

                parent = parent.return;
              }

              currentParentIsValid = true;
            }

            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
              // node from the tree.

              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              } // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                // When we go into a portal, it becomes the parent to remove from.
                // We will reassign it back when we pop the portal on the way up.
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true; // Visit children because portals might contain host components.

                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }

            if (node === current) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === current) {
                return;
              }

              node = node.return;

              if (node.tag === HostPortal) {
                // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
              }
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }

        function commitDeletion(finishedRoot, current, renderPriorityLevel) {
          {
            // Recursively delete all host nodes from the parent.
            // Detach refs and call componentWillUnmount() on the whole subtree.
            unmountHostComponents(finishedRoot, current);
          }
          const { alternate } = current;
          detachFiberMutation(current);

          if (alternate !== null) {
            detachFiberMutation(alternate);
          }
        }

        function commitWork(current, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
            {
            // Layout effects are destroyed during the mutation phase so that all
            // destroy functions for all fibers are called before any create functions.
            // This prevents sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
              {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              }
              return;
            }

            case ClassComponent:
            {
              return;
            }

            case HostComponent:
            {
              const instance = finishedWork.stateNode;

              if (instance != null) {
              // Commit the work prepared earlier.
                const newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.

                const oldProps = current !== null ? current.memoizedProps : newProps;
                const { type } = finishedWork; // TODO: Type the updateQueue to be specific to host components.

                const updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;

                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }

              return;
            }

            case HostText:
            {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error('This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.');
                }
              }

              const textInstance = finishedWork.stateNode;
              const newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              const oldText = current !== null ? current.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }

            case HostRoot:
            {
              {
                const _root = finishedWork.stateNode;

                if (_root.hydrate) {
                // We've just hydrated. No need to hydrate again.
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }

            case Profiler:
            {
              return;
            }

            case SuspenseComponent:
            {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }

            case SuspenseListComponent:
            {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }

            case IncompleteClassComponent:
            {
              return;
            }

            case FundamentalComponent:
            {
              break;
            }

            case ScopeComponent:
            {
              break;
            }

            case OffscreenComponent:
            case LegacyHiddenComponent:
            {
              const newState = finishedWork.memoizedState;
              const isHidden = newState !== null;
              hideOrUnhideAllChildren(finishedWork, isHidden);
              return;
            }
          }

          {
            {
              throw Error('This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
          }
        }

        function commitSuspenseComponent(finishedWork) {
          const newState = finishedWork.memoizedState;

          if (newState !== null) {
            markCommitTimeOfFallback();
            {
              // Hide the Offscreen component that contains the primary children. TODO:
              // Ideally, this effect would have been scheduled on the Offscreen fiber
              // itself. That's how unhiding works: the Offscreen component schedules an
              // effect on itself. However, in this case, the component didn't complete,
              // so the fiber was never added to the effect list in the normal path. We
              // could have appended it to the effect list in the Suspense component's
              // second pass, but doing it this way is less complicated. This would be
              // simpler if we got rid of the effect list and traversed the tree, like
              // we're planning to do.
              const primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, true);
            }
          }
        }

        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          const newState = finishedWork.memoizedState;

          if (newState === null) {
            const current = finishedWork.alternate;

            if (current !== null) {
              const prevState = current.memoizedState;

              if (prevState !== null) {
                const suspenseInstance = prevState.dehydrated;

                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }

        function attachSuspenseRetryListeners(finishedWork) {
          // If this boundary just timed out, then it will have a set of wakeables.
          // For each wakeable, attach a listener so that when it resolves, React
          // attempts to re-render the boundary in the primary (pre-timeout) state.
          const wakeables = finishedWork.updateQueue;

          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            let retryCache = finishedWork.stateNode;

            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }

            wakeables.forEach(wakeable => {
              // Memoize using the boundary fiber to prevent redundant listeners.
              let retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

              if (!retryCache.has(wakeable)) {
                {
                  if (wakeable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(wakeable);
                wakeable.then(retry, retry);
              }
            });
          }
        } // This function detects when a Suspense boundary goes from visible to hidden.
        // It returns false if the boundary is already hidden.
        // TODO: Use an effect tag.

        function isSuspenseBoundaryBeingHidden(current, finishedWork) {
          if (current !== null) {
            const oldState = current.memoizedState;

            if (oldState === null || oldState.dehydrated !== null) {
              const newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }

          return false;
        }

        function commitResetTextContent(current) {
          resetTextContent(current.stateNode);
        }

        let COMPONENT_TYPE = 0;
        let HAS_PSEUDO_CLASS_TYPE = 1;
        let ROLE_TYPE = 2;
        let TEST_NAME_TYPE = 3;
        let TEXT_TYPE = 4;

        if (typeof Symbol === 'function' && Symbol.for) {
          const symbolFor$1 = Symbol.for;
          COMPONENT_TYPE = symbolFor$1('selector.component');
          HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
          ROLE_TYPE = symbolFor$1('selector.role');
          TEST_NAME_TYPE = symbolFor$1('selector.test_id');
          TEXT_TYPE = symbolFor$1('selector.text');
        }

        const commitHooks = [];

        function onCommitRoot$1() {
          {
            commitHooks.forEach(commitHook => commitHook());
          }
        }

        const { ceil } = Math;
        const ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher;
        const ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
        const { IsSomeRendererActing } = ReactSharedInternals;
        const NoContext =
    /*             */
    0;
        const BatchedContext =
    /*               */
    1;
        const EventContext =
    /*                 */
    2;
        const DiscreteEventContext =
    /*         */
    4;
        const LegacyUnbatchedContext =
    /*       */
    8;
        const RenderContext =
    /*                */
    16;
        const CommitContext =
    /*                */
    32;
        const RetryAfterError =
    /*       */
    64;
        const RootIncomplete = 0;
        const RootFatalErrored = 1;
        const RootErrored = 2;
        const RootSuspended = 3;
        const RootSuspendedWithDelay = 4;
        const RootCompleted = 5; // Describes where we are in the React execution stack

        let executionContext = NoContext; // The root we're working on

        let workInProgressRoot = null; // The fiber we're working on

        let workInProgress = null; // The lanes we're rendering

        let workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
        // This is a superset of the lanes we started working on at the root. The only
        // case where it's different from `workInProgressRootRenderLanes` is when we
        // enter a subtree that is hidden and needs to be unhidden: Suspense and
        // Offscreen component.
        //
        // Most things in the work loop should deal with workInProgressRootRenderLanes.
        // Most things in begin/complete phases should deal with subtreeRenderLanes.

        let subtreeRenderLanes = NoLanes;
        const subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

        let workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

        let workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
        // slightly different than `renderLanes` because `renderLanes` can change as you
        // enter and exit an Offscreen tree. This value is the combination of all render
        // lanes for the entire render phase.

        let workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
        // includes unprocessed updates, not work in bailed out children.

        let workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

        let workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

        let workInProgressRootPingedLanes = NoLanes;
        let mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
        // model where we don't commit new loading states in too quick succession.

        let globalMostRecentFallbackTime = 0;
        const FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
        // more and prefer CPU suspense heuristics instead.

        let workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
        // suspense heuristics and opt out of rendering more content.

        const RENDER_TIMEOUT_MS = 500;

        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }

        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }

        let nextEffect = null;
        let hasUncaughtError = false;
        let firstUncaughtError = null;
        let legacyErrorBoundariesThatAlreadyFailed = null;
        let rootDoesHavePassiveEffects = false;
        let rootWithPendingPassiveEffects = null;
        let pendingPassiveEffectsRenderPriority = NoPriority$1;
        let pendingPassiveEffectsLanes = NoLanes;
        let pendingPassiveHookEffectsMount = [];
        let pendingPassiveHookEffectsUnmount = [];
        let rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

        const NESTED_UPDATE_LIMIT = 50;
        let nestedUpdateCount = 0;
        let rootWithNestedUpdates = null;
        const NESTED_PASSIVE_UPDATE_LIMIT = 50;
        let nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
        // during the commit phase. This enables them to be traced across components
        // that spawn new work during render. E.g. hidden boundaries, suspended SSR
        // hydration or SuspenseList.
        // TODO: Can use a bitmask instead of an array

        let spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
        // event times as simultaneous, even if the actual clock time has advanced
        // between the first and second call.

        let currentEventTime = NoTimestamp;
        let currentEventWipLanes = NoLanes;
        let currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
        // We warn about state updates for unmounted components differently in this case.

        let isFlushingPassiveEffects = false;
        let focusedInstanceHandle = null;
        let shouldFireAfterActiveInstanceBlur = false;

        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }

        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            // We're inside React, so it's fine to read the actual time.
            return now();
          } // We're not inside React, so we may be in the middle of a browser event.

          if (currentEventTime !== NoTimestamp) {
            // Use the same start time for all updates until we enter React again.
            return currentEventTime;
          } // This is the first update since React yielded. Compute a new start time.

          currentEventTime = now();
          return currentEventTime;
        }

        function requestUpdateLane(fiber) {
          // Special cases
          const { mode } = fiber;

          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          } // The algorithm for assigning an update to a lane should be stable for all
          // updates at the same priority within the same event. To do this, the inputs
          // to the algorithm must be the same. For example, we use the `renderLanes`
          // to avoid choosing a lane that is already in the middle of rendering.
          //
          // However, the "included" lanes could be mutated in between updates in the
          // same event, like if you perform an update inside `flushSync`. Or any other
          // code path that might call `prepareFreshStack`.
          //
          // The trick we use is to cache the first of each of these inputs within an
          // event. Then reset the cached values once we can be sure the event is over.
          // Our heuristic for that is whenever we enter a concurrent work loop.
          //
          // We'll do the same for `currentEventPendingLanes` below.

          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }

          const isTransition = requestCurrentTransition() !== NoTransition;

          if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) {
              currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            }

            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          } // TODO: Remove this dependency on the Scheduler priority.
          // To do that, we're replacing it with an update lane priority.

          const schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
          // This couples React to the Scheduler internals, so we're replacing it
          // with the currentUpdateLanePriority above. As an example of how this
          // could be problematic, if we're not inside `Scheduler.runWithPriority`,
          // then we'll get the priority of the current running Scheduler task,
          // which is probably not what we want.

          let lane;

          if ( // TODO: Temporary. We're removing the concept of discrete updates.
            (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          } else {
            const schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }

          return lane;
        }

        function requestRetryLane(fiber) {
          // This is a fork of `requestUpdateLane` designed specifically for Suspense
          // "retries" — a special update that attempts to flip a Suspense boundary
          // from its placeholder state to its primary/resolved state.
          // Special cases
          const { mode } = fiber;

          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          } // See `requestUpdateLane` for explanation of `currentEventWipLanes`

          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }

          return findRetryLane(currentEventWipLanes);
        }

        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          const root = markUpdateLaneFromFiberToRoot(fiber, lane);

          if (root === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
          } // Mark that the root has a pending update.

          markRootUpdated(root, lane, eventTime);

          if (root === workInProgressRoot) {
            // Received an update to a tree that's in the middle of rendering. Mark
            // that there was an interleaved update work on this root. Unless the
            // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
            // phase update. In that case, we don't treat render phase updates as if
            // they were interleaved, for backwards compat reasons.
            {
              workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            }

            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              // The root already suspended with a delay, which means this render
              // definitely won't finish. Since we have a new update, let's mark it as
              // suspended now, right before marking the incoming update. This has the
              // effect of interrupting the current render and switching to the update.
              // TODO: Make sure this doesn't override pings that happen while we've
              // already started rendering.
              markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
          } // TODO: requestUpdateLanePriority also reads the priority. Pass the
          // priority as an argument to that function and this one.

          const priorityLevel = getCurrentPriorityLevel();

          if (lane === SyncLane) {
            if ( // Check if we're inside unbatchedUpdates
              (executionContext & LegacyUnbatchedContext) !== NoContext // Check if we're not already rendering
        && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              // Register pending interactions on the root to avoid losing traced interaction data.
              schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
              // root inside of batchedUpdates should be synchronous, but layout updates
              // should be deferred until the end of the batch.

              performSyncWorkOnRoot(root);
            } else {
              ensureRootIsScheduled(root, eventTime);
              schedulePendingInteractions(root, lane);

              if (executionContext === NoContext) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
            // discrete, even inside a discrete event.
              priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
              // This is the result of a discrete event. Track the lowest priority
              // discrete update per root so we can flush them early, if needed.
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = new Set([root]);
              } else {
                rootsWithPendingDiscreteUpdates.add(root);
              }
            } // Schedule other updates after in case the callback is sync.

            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, lane);
          } // We use this when assigning a lane for a transition inside
          // `requestUpdateLane`. We assume it's the same as the root being updated,
          // since in the common case of a single root app it probably is. If it's not
          // the same root, then it's not a huge deal, we just might batch more stuff
          // together more than necessary.

          mostRecentlyUpdatedRoot = root;
        } // This is split into a separate function so we can mark a fiber with pending
        // work without treating it as a typical update that originates from an event;
        // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
        // on a fiber.

        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          // Update the source fiber's lanes
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          let { alternate } = sourceFiber;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }

          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          } // Walk the parent path to the root and update the child expiration time.

          let node = sourceFiber;
          let parent = sourceFiber.return;

          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;

            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }

            node = parent;
            parent = parent.return;
          }

          if (node.tag === HostRoot) {
            const root = node.stateNode;
            return root;
          }
          return null;
        } // Use this function to schedule a task for a root. There's only one task per
        // root; if a task was already scheduled, we'll check to make sure the priority
        // of the existing task is the same as the priority of the next level that the
        // root has work on. This function is called on every update, and right before
        // exiting a task.

        function ensureRootIsScheduled(root, currentTime) {
          const existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
          // expired so we know to work on those next.

          markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

          const nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

          const newCallbackPriority = returnNextLanesPriority();

          if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
              root.callbackNode = null;
              root.callbackPriority = NoLanePriority;
            }

            return;
          } // Check if there's an existing task. We may be able to reuse it.

          if (existingCallbackNode !== null) {
            const existingCallbackPriority = root.callbackPriority;

            if (existingCallbackPriority === newCallbackPriority) {
              // The priority hasn't changed. We can reuse the existing task. Exit.
              return;
            } // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.

            cancelCallback(existingCallbackNode);
          } // Schedule a new callback.

          let newCallbackNode;

          if (newCallbackPriority === SyncLanePriority) {
            // Special case: Sync React callbacks are scheduled on a special
            // internal queue
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
          } else if (newCallbackPriority === SyncBatchedLanePriority) {
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
          } else {
            const schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
          }

          root.callbackPriority = newCallbackPriority;
          root.callbackNode = newCallbackNode;
        } // This is the entry point for every concurrent task, i.e. anything that
        // goes through Scheduler.

        function performConcurrentWorkOnRoot(root) {
          // Since we know we're in a React event, we can clear the current
          // event time. The next update will compute a new event time.
          currentEventTime = NoTimestamp;
          currentEventWipLanes = NoLanes;
          currentEventPendingLanes = NoLanes;

          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error('Should not already be working.');
            }
          } // Flush any pending passive effects before deciding which lanes to work on,
          // in case they schedule additional work.

          const originalCallbackNode = root.callbackNode;
          const didFlushPassiveEffects = flushPassiveEffects();

          if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) {
              // The current task was canceled. Exit. We don't need to call
              // `ensureRootIsScheduled` because the check above implies either that
              // there's a new task, or that there's no remaining work on this root.
              return null;
            }
          } // Determine the next expiration time to work on, using the fields stored
          // on the root.

          let lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

          if (lanes === NoLanes) {
            // Defensive coding. This is never expected to happen.
            return null;
          }

          let exitStatus = renderRootConcurrent(root, lanes);

          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            // The render included lanes that were updated during the render phase.
            // For example, when unhiding a hidden tree, we include all the lanes
            // that were previously skipped when the tree was hidden. That set of
            // lanes is a superset of the lanes we started rendering with.
            //
            // So we'll throw out the current work and restart.
            prepareFreshStack(root, NoLanes);
          } else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
              executionContext |= RetryAfterError; // If an error occurred during hydration,
              // discard server response and fall back to client side render.

              if (root.hydrate) {
                root.hydrate = false;
                clearContainer(root.containerInfo);
              } // If something threw an error, try rendering one more time. We'll render
              // synchronously to block concurrent data mutations, and we'll includes
              // all pending updates are included. If it still fails after the second
              // attempt, we'll give up and commit the resulting tree.

              lanes = getLanesToRetrySynchronouslyOnError(root);

              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root, lanes);
              }
            }

            if (exitStatus === RootFatalErrored) {
              const fatalError = workInProgressRootFatalError;
              prepareFreshStack(root, NoLanes);
              markRootSuspended$1(root, lanes);
              ensureRootIsScheduled(root, now());
              throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.

            const finishedWork = root.current.alternate;
            root.finishedWork = finishedWork;
            root.finishedLanes = lanes;
            finishConcurrentRender(root, exitStatus, lanes);
          }

          ensureRootIsScheduled(root, now());

          if (root.callbackNode === originalCallbackNode) {
            // The task node scheduled for this root is the same one that's
            // currently executed. Need to return a continuation.
            return performConcurrentWorkOnRoot.bind(null, root);
          }

          return null;
        }

        function finishConcurrentRender(root, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored:
            {
              {
                {
                  throw Error('Root did not complete. This is a bug in React.');
                }
              }
            }
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough

            case RootErrored:
            {
            // We should have already attempted to retry this tree. If we reached
            // this point, it errored again. Commit it.
              commitRoot(root);
              break;
            }

            case RootSuspended:
            {
              markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
              // should immediately commit it or wait a bit.

              if (includesOnlyRetries(lanes) // do not delay if we're inside an act() scope
            && !shouldForceFlushFallbacksInDEV()) {
              // This render only included retries, no updates. Throttle committing
              // retries so that we don't show too many loading states too quickly.
                const msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

                if (msUntilTimeout > 10) {
                  const nextLanes = getNextLanes(root, NoLanes);

                  if (nextLanes !== NoLanes) {
                  // There's additional work on this root.
                    break;
                  }

                  const { suspendedLanes } = root;

                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  // We should prefer to render the fallback of at the last
                  // suspended level. Ping the last suspended level to try
                  // rendering it again.
                  // FIXME: What if the suspended lanes are Idle? Should not restart.
                    const eventTime = requestEventTime();
                    markRootPinged(root, suspendedLanes);
                    break;
                  } // The render is suspended, it hasn't timed out, and there's no
                  // lower priority work to do. Instead of committing the fallback
                  // immediately, wait for more data to arrive.

                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                  break;
                }
              } // The work expired. Commit immediately.

              commitRoot(root);
              break;
            }

            case RootSuspendedWithDelay:
            {
              markRootSuspended$1(root, lanes);

              if (includesOnlyTransitions(lanes)) {
              // This is a transition, so we should exit without committing a
              // placeholder and without scheduling a timeout. Delay indefinitely
              // until we receive more data.
                break;
              }

              if (!shouldForceFlushFallbacksInDEV()) {
              // This is not a transition, but we did trigger an avoided state.
              // Schedule a placeholder to display after a short delay, using the Just
              // Noticeable Difference.
              // TODO: Is the JND optimization worth the added complexity? If this is
              // the only reason we track the event time, then probably not.
              // Consider removing.
                const mostRecentEventTime = getMostRecentEventTime(root, lanes);
                const eventTimeMs = mostRecentEventTime;
                const timeElapsedMs = now() - eventTimeMs;

                const _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.

                if (_msUntilTimeout > 10) {
                // Instead of committing the fallback immediately, wait for more data
                // to arrive.
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                  break;
                }
              } // Commit the placeholder.

              commitRoot(root);
              break;
            }

            case RootCompleted:
            {
            // The work completed. Ready to commit.
              commitRoot(root);
              break;
            }

            default:
            {
              {
                {
                  throw Error('Unknown root exit status.');
                }
              }
            }
          }
        }

        function markRootSuspended$1(root, suspendedLanes) {
          // When suspending, we should always exclude lanes that were pinged or (more
          // rarely, since we try to avoid it) updated during the render phase.
          // TODO: Lol maybe there's a better way to factor this besides this
          // obnoxiously named function :)
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
          markRootSuspended(root, suspendedLanes);
        } // This is the entry point for synchronous tasks that don't go
        // through Scheduler

        function performSyncWorkOnRoot(root) {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error('Should not already be working.');
            }
          }

          flushPassiveEffects();
          let lanes;
          let exitStatus;

          if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root, lanes);

            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              // The render included lanes that were updated during the render phase.
              // For example, when unhiding a hidden tree, we include all the lanes
              // that were previously skipped when the tree was hidden. That set of
              // lanes is a superset of the lanes we started rendering with.
              //
              // Note that this only happens when part of the tree is rendered
              // concurrently. If the whole tree is rendered synchronously, then there
              // are no interleaved events.
              lanes = getNextLanes(root, lanes);
              exitStatus = renderRootSync(root, lanes);
            }
          } else {
            lanes = getNextLanes(root, NoLanes);
            exitStatus = renderRootSync(root, lanes);
          }

          if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.

            if (root.hydrate) {
              root.hydrate = false;
              clearContainer(root.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.

            lanes = getLanesToRetrySynchronouslyOnError(root);

            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root, lanes);
            }
          }

          if (exitStatus === RootFatalErrored) {
            const fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
          } // We now have a consistent tree. Because this is a sync render, we
          // will commit it even if something suspended.

          const finishedWork = root.current.alternate;
          root.finishedWork = finishedWork;
          root.finishedLanes = lanes;
          commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
          // pending level.

          ensureRootIsScheduled(root, now());
          return null;
        }

        function flushDiscreteUpdates() {
          // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
          // However, `act` uses `batchedUpdates`, so there's no way to distinguish
          // those two cases. Need to fix this before exposing flushDiscreteUpdates
          // as a public API.
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
              }
            } // We're already rendering, so we can't synchronously flush pending work.
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.

            return;
          }

          flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
          // they fire before the next serial event.

          flushPassiveEffects();
        }

        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            const roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(root => {
              markDiscreteUpdatesExpired(root);
              ensureRootIsScheduled(root, now());
            });
          } // Now flush the immediate queue.

          flushSyncCallbackQueue();
        }

        function batchedUpdates$1(fn, a) {
          const prevExecutionContext = executionContext;
          executionContext |= BatchedContext;

          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;

            if (executionContext === NoContext) {
              // Flush the immediate callbacks that were scheduled during this batch
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }

        function batchedEventUpdates$1(fn, a) {
          const prevExecutionContext = executionContext;
          executionContext |= EventContext;

          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;

            if (executionContext === NoContext) {
              // Flush the immediate callbacks that were scheduled during this batch
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }

        function discreteUpdates$1(fn, a, b, c, d) {
          const prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          {
            try {
              return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
            } finally {
              executionContext = prevExecutionContext;

              if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }

        function unbatchedUpdates(fn, a) {
          const prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;

          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;

            if (executionContext === NoContext) {
              // Flush the immediate callbacks that were scheduled during this batch
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }

        function flushSync(fn, a) {
          const prevExecutionContext = executionContext;

          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
            }
            return fn(a);
          }

          executionContext |= BatchedContext;
          {
            try {
              if (fn) {
                return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
              }
              return undefined;
            } finally {
              executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
              // Note that this will happen even if batchedUpdates is higher up
              // the stack.

              flushSyncCallbackQueue();
            }
          }
        }

        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }

        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }

        function prepareFreshStack(root, lanes) {
          root.finishedWork = null;
          root.finishedLanes = NoLanes;
          const { timeoutHandle } = root;

          if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(timeoutHandle);
          }

          if (workInProgress !== null) {
            let interruptedWork = workInProgress.return;

            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }

          workInProgressRoot = root;
          workInProgress = createWorkInProgress(root.current, null);
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }

        function handleError(root, thrownValue) {
          do {
            let erroredWork = workInProgress;

            try {
              // Reset module-level state that was set during the render phase.
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
              // separate issue. Write a regression test using string refs.

              ReactCurrentOwner$2.current = null;

              if (erroredWork === null || erroredWork.return === null) {
                // Expected to be working on a non-root fiber. This is a fatal error
                // because there's no ancestor that can handle it; the root is
                // supposed to capture all errors that weren't caught by an error
                // boundary.
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                // sibling, or the parent if there are no siblings. But since the root
                // has no siblings nor a parent, we set it to null. Usually this is
                // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                // intentionally not calling those, we need set it here.
                // TODO: Consider calling `unwindWork` to pop the contexts.

                workInProgress = null;
                return;
              }

              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }

              throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              // Something in the return path also threw.
              thrownValue = yetAnotherThrownValue;

              if (workInProgress === erroredWork && erroredWork !== null) {
                // If this boundary has already errored, then we had trouble processing
                // the error. Bubble it to the next boundary.
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }

              continue;
            } // Return to the normal work loop.

            return;
          } while (true);
        }

        function pushDispatcher() {
          const prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

          if (prevDispatcher === null) {
            // The React isomorphic package does not include a default dispatcher.
            // Instead the first renderer will lazily attach one, in order to give
            // nicer error messages.
            return ContextOnlyDispatcher;
          }
          return prevDispatcher;
        }

        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }

        function pushInteractions(root) {
          {
            const prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root.memoizedInteractions;
            return prevInteractions;
          }
        }

        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }

        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }

        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }

        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }

        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          } // Check if there are updates that we skipped tree that might have unblocked
          // this render.

          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
            // Mark the current render as suspended so that we switch to working on
            // the updates that were skipped. Usually we only suspend at the end of
            // the render phase.
            // TODO: We should probably always mark the root as suspended immediately
            // (inside this function), since by suspending at the end of the render
            // phase introduces a potential mistake where we suspend lanes that were
            // pinged or updated while we were rendering.
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }

        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        } // Called during render to determine if anything has suspended.
        // Returns false if we're not sure.

        function renderHasNotSuspendedYet() {
          // If something errored or completed, we can't really be sure,
          // so those are false.
          return workInProgressRootExitStatus === RootIncomplete;
        }

        function renderRootSync(root, lanes) {
          const prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          const prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
          // and prepare a fresh one. Otherwise we'll continue where we left off.

          if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
          }

          const prevInteractions = pushInteractions(root);

          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root, thrownValue);
            }
          } while (true);

          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);

          if (workInProgress !== null) {
            // This is a sync render, so we should have finished the whole tree.
            {
              {
                throw Error('Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.');
              }
            }
          }

          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        } // The work loop is an extremely hot path. Tell Closure not to inline it.

        /** @noinline */

        function workLoopSync() {
          // Already timed out, so perform work without checking if we need to yield.
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }

        function renderRootConcurrent(root, lanes) {
          const prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          const prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
          // and prepare a fresh one. Otherwise we'll continue where we left off.

          if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
          }

          const prevInteractions = pushInteractions(root);

          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root, thrownValue);
            }
          } while (true);

          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;

          if (workInProgress !== null) {
            return RootIncomplete;
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

          return workInProgressRootExitStatus;
        }
        /** @noinline */

        function workLoopConcurrent() {
          // Perform work until Scheduler asks us to yield
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }

        function performUnitOfWork(unitOfWork) {
          // The current, flushed, state of this fiber is the alternate. Ideally
          // nothing should rely on this, but relying on it here means that we don't
          // need an additional field on the work in progress.
          const current = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          let next;

          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
          }

          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;

          if (next === null) {
            // If this doesn't spawn new work, complete the current work.
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }

          ReactCurrentOwner$2.current = null;
        }

        function completeUnitOfWork(unitOfWork) {
          // Attempt to complete the current unit of work, then move to the next
          // sibling. If there are no more siblings, return to the parent fiber.
          let completedWork = unitOfWork;

          do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            const current = completedWork.alternate;
            const returnFiber = completedWork.return; // Check if the work completed or if something threw.

            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              let next = void 0;

              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }

              resetCurrentFiber();

              if (next !== null) {
                // Completing this fiber spawned new work. Work on that next.
                workInProgress = next;
                return;
              }

              resetChildLanes(completedWork);

              if (returnFiber !== null // Do not append effects to parents if a sibling failed to complete
          && (returnFiber.flags & Incomplete) === NoFlags) {
                // Append all the effects of the subtree and this fiber onto the effect
                // list of the parent. The completion order of the children affects the
                // side-effect order.
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = completedWork.firstEffect;
                }

                if (completedWork.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                  }

                  returnFiber.lastEffect = completedWork.lastEffect;
                } // If this fiber had side-effects, we append it AFTER the children's
                // side-effects. We can perform certain side-effects earlier if needed,
                // by doing multiple passes over the effect list. We don't want to
                // schedule our own side-effect on our own list because if end up
                // reusing children we'll schedule this effect onto itself since we're
                // at the end.

                const { flags } = completedWork; // Skip both NoWork and PerformedWork tags when creating the effect
                // list. PerformedWork effect is read by React DevTools but shouldn't be
                // committed.

                if (flags > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork;
                  } else {
                    returnFiber.firstEffect = completedWork;
                  }

                  returnFiber.lastEffect = completedWork;
                }
              }
            } else {
              // This fiber did not complete because something threw. Pop values off
              // the stack without entering the complete phase. If this is a boundary,
              // capture values if possible.
              const _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.

              if (_next !== null) {
                // If completing this work spawned new work, do that next. We'll come
                // back here again.
                // Since we're restarting, remove anything that is not a host effect
                // from the effect tag.
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }

              if ((completedWork.mode & ProfileMode) !== NoMode) {
                // Record the render duration for the fiber that errored.
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

                let { actualDuration } = completedWork;
                let { child } = completedWork;

                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }

                completedWork.actualDuration = actualDuration;
              }

              if (returnFiber !== null) {
                // Mark the parent fiber as incomplete and clear its effect list.
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.flags |= Incomplete;
              }
            }

            const siblingFiber = completedWork.sibling;

            if (siblingFiber !== null) {
              // If there is more work to do in this returnFiber, do that next.
              workInProgress = siblingFiber;
              return;
            } // Otherwise, return to the parent

            completedWork = returnFiber; // Update the next thing we're working on in case something throws.

            workInProgress = completedWork;
          } while (completedWork !== null); // We've reached the root.

          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }

        function resetChildLanes(completedWork) {
          if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
          // to switch statement in `completeWork`.
            (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
            // The children of this component are hidden. Don't bubble their
            // expiration times.
            return;
          }

          let newChildLanes = NoLanes; // Bubble up the earliest expiration time.

          if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            let { actualDuration } = completedWork;
            let treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.

            const shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            let { child } = completedWork;

            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }

              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }

            const isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

            if (isTimedOutSuspense) {
              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
              const primaryChildFragment = completedWork.child;

              if (primaryChildFragment !== null) {
                treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }

            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            let _child = completedWork.child;

            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              _child = _child.sibling;
            }
          }

          completedWork.childLanes = newChildLanes;
        }

        function commitRoot(root) {
          const renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
          return null;
        }

        function commitRootImpl(root, renderPriorityLevel) {
          do {
            // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
            // means `flushPassiveEffects` will sometimes result in additional
            // passive effects. So we need to keep flushing in a loop until there are
            // no more pending effects.
            // TODO: Might be better if `flushPassiveEffects` did not automatically
            // flush synchronous work at the end, to avoid factoring hazards like this.
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);

          flushRenderPhaseStrictModeWarningsInDEV();

          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error('Should not already be working.');
            }
          }

          const { finishedWork } = root;
          const lanes = root.finishedLanes;

          if (finishedWork === null) {
            return null;
          }

          root.finishedWork = null;
          root.finishedLanes = NoLanes;

          if (!(finishedWork !== root.current)) {
            {
              throw Error('Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.');
            }
          } // commitRoot never returns a continuation; it always finishes synchronously.
          // So we can clear these now to allow a new callback to be scheduled.

          root.callbackNode = null; // Update the first and last pending times on this root. The new first
          // pending time is whatever is left on the root fiber.

          let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
          // `flushDiscreteUpdates` starts a useless render pass which may cancels
          // a scheduled timeout.

          if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
              rootsWithPendingDiscreteUpdates.delete(root);
            }
          }

          if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          } // Get the list of effects.

          let firstEffect;

          if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            // There is no effect on the root.
            firstEffect = finishedWork.firstEffect;
          }

          if (firstEffect !== null) {
            const prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            const prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.

            focusedInstanceHandle = prepareForCommit(root.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;

            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);

                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error('Should be working on an effect.');
                    }
                  }

                  const error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null); // We no longer need to track the active instance fiber

            focusedInstanceHandle = null;
            {
              // Mark the current commit time to be shared by all Profilers in this
              // batch. This enables them to be grouped later.
              recordCommitTime();
            } // The next phase is the mutation phase, where we mutate the host tree.

            nextEffect = firstEffect;

            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error('Should be working on an effect.');
                    }
                  }

                  const _error = clearCaughtError();

                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);

            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.

            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.

            nextEffect = firstEffect;

            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error('Should be working on an effect.');
                    }
                  }

                  const _error2 = clearCaughtError();

                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);

            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.

            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            // no effects.
            // TODO: Maybe there's a better way to report this.

            {
              recordCommitTime();
            }
          }

          const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

          if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;

            while (nextEffect !== null) {
              const nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;

              if (nextEffect.flags & Deletion) {
                detachFiberAfterEffects(nextEffect);
              }

              nextEffect = nextNextEffect;
            }
          } // Read this again, since an effect might have updated it

          remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

          if (remainingLanes !== NoLanes) {
            {
              if (spawnedWorkDuringRender !== null) {
                const expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;

                for (let i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
                }
              }

              schedulePendingInteractions(root, remainingLanes);
            }
          } else {
            // If there's no remaining work, we can clear the set of already failed
            // error boundaries.
            legacyErrorBoundariesThatAlreadyFailed = null;
          }

          {
            if (!rootDidHavePassiveEffects) {
              // If there are no passive effects, then we can complete the pending interactions.
              // Otherwise, we'll wait until after the passive effects are flushed.
              // Wait to do this until after remaining work has been scheduled,
              // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
              finishPendingInteractions(root, lanes);
            }
          }

          if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root;
            }
          } else {
            nestedUpdateCount = 0;
          }

          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            onCommitRoot$1();
          } // Always call this before exiting `commitRoot`, to ensure that any
          // additional work on this root is scheduled.

          ensureRootIsScheduled(root, now());

          if (hasUncaughtError) {
            hasUncaughtError = false;
            const _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }

          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
            // synchronously, but layout updates should be deferred until the end
            // of the batch.
            return null;
          } // If layout work was scheduled, flush it now.

          flushSyncCallbackQueue();
          return null;
        }

        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            const current = nextEffect.alternate;

            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
              if ((nextEffect.flags & Deletion) !== NoFlags) {
                if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              } else {
                // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              }
            }

            const { flags } = nextEffect;

            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(nextEffect);
              commitBeforeMutationLifeCycles(current, nextEffect);
              resetCurrentFiber();
            }

            if ((flags & Passive) !== NoFlags) {
              // If there are passive effects, schedule a callback to flush at
              // the earliest opportunity.
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, () => {
                  flushPassiveEffects();
                  return null;
                });
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        }

        function commitMutationEffects(root, renderPriorityLevel) {
          // TODO: Should probably move the bulk of this function to commitWork.
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            const { flags } = nextEffect;

            if (flags & ContentReset) {
              commitResetTextContent(nextEffect);
            }

            if (flags & Ref) {
              const current = nextEffect.alternate;

              if (current !== null) {
                commitDetachRef(current);
              }
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.

            const primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

            switch (primaryFlags) {
              case Placement:
              {
                commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                // inserted, before any life-cycles like componentDidMount gets called.
                // TODO: findDOMNode doesn't rely on this any more but isMounted does
                // and isMounted is deprecated anyway so we should be able to kill this.

                nextEffect.flags &= ~Placement;
                break;
              }

              case PlacementAndUpdate:
              {
              // Placement
                commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                // inserted, before any life-cycles like componentDidMount gets called.

                nextEffect.flags &= ~Placement; // Update

                const _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }

              case Hydrating:
              {
                nextEffect.flags &= ~Hydrating;
                break;
              }

              case HydratingAndUpdate:
              {
                nextEffect.flags &= ~Hydrating; // Update

                const _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }

              case Update:
              {
                const _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }

              case Deletion:
              {
                commitDeletion(root, nextEffect);
                break;
              }
            }

            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }

        function commitLayoutEffects(root, committedLanes) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            const { flags } = nextEffect;

            if (flags & (Update | Callback)) {
              const current = nextEffect.alternate;
              commitLifeCycles(root, current, nextEffect);
            }

            {
              if (flags & Ref) {
                commitAttachRef(nextEffect);
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }

        function flushPassiveEffects() {
          // Returns whether passive effects were flushed.
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            const priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            {
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }

          return false;
        }

        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
          pendingPassiveHookEffectsMount.push(effect, fiber);

          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, () => {
              flushPassiveEffects();
              return null;
            });
          }
        }

        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
          pendingPassiveHookEffectsUnmount.push(effect, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            const { alternate } = fiber;

            if (alternate !== null) {
              alternate.flags |= PassiveUnmountPendingDev;
            }
          }

          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, () => {
              flushPassiveEffects();
              return null;
            });
          }
        }

        function invokePassiveEffectCreate(effect) {
          const { create } = effect;
          effect.destroy = create();
        }

        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }

          const root = rootWithPendingPassiveEffects;
          const lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;

          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error('Cannot flush passive effects while already rendering.');
            }
          }

          {
            isFlushingPassiveEffects = true;
          }
          const prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          const prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
          // before ANY passive effect create functions are called.
          // Otherwise effects in sibling components might interfere with each other.
          // e.g. a destroy function in one component may unintentionally override a ref
          // value set by a create function in another component.
          // Layout effects have the same constraint.
          // First pass: Destroy stale passive effects.

          const unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];

          for (let i = 0; i < unmountEffects.length; i += 2) {
            const _effect = unmountEffects[i];
            const fiber = unmountEffects[i + 1];
            const { destroy } = _effect;
            _effect.destroy = undefined;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              const { alternate } = fiber;

              if (alternate !== null) {
                alternate.flags &= ~PassiveUnmountPendingDev;
              }
            }

            if (typeof destroy === 'function') {
              {
                setCurrentFiber(fiber);
                {
                  invokeGuardedCallback(null, destroy, null);
                }

                if (hasCaughtError()) {
                  if (!(fiber !== null)) {
                    {
                      throw Error('Should be working on an effect.');
                    }
                  }

                  const error = clearCaughtError();
                  captureCommitPhaseError(fiber, error);
                }

                resetCurrentFiber();
              }
            }
          } // Second pass: Create new passive effects.

          const mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];

          for (let _i = 0; _i < mountEffects.length; _i += 2) {
            const _effect2 = mountEffects[_i];
            const _fiber = mountEffects[_i + 1];
            {
              setCurrentFiber(_fiber);
              {
                invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
              }

              if (hasCaughtError()) {
                if (!(_fiber !== null)) {
                  {
                    throw Error('Should be working on an effect.');
                  }
                }

                const _error4 = clearCaughtError();

                captureCommitPhaseError(_fiber, _error4);
              }

              resetCurrentFiber();
            }
          } // Note: This currently assumes there are no passive effects on the root fiber
          // because the root is not part of its own effect list.
          // This could change in the future.

          let effect = root.current.firstEffect;

          while (effect !== null) {
            const nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

            effect.nextEffect = null;

            if (effect.flags & Deletion) {
              detachFiberAfterEffects(effect);
            }

            effect = nextNextEffect;
          }

          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root, lanes);
          }
          {
            isFlushingPassiveEffects = false;
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
          // exceeds the limit, we'll fire a warning.

          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }

        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }

        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }

        function prepareToThrowUncaughtError(error) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
          }
        }

        var onUncaughtError = prepareToThrowUncaughtError;

        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
          const errorInfo = createCapturedValue(error, sourceFiber);
          const update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          const eventTime = requestEventTime();
          const root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

          if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, SyncLane);
          }
        }

        function captureCommitPhaseError(sourceFiber, error) {
          if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
            return;
          }

          let fiber = sourceFiber.return;

          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
              return;
            } if (fiber.tag === ClassComponent) {
              const ctor = fiber.type;
              const instance = fiber.stateNode;

              if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                const errorInfo = createCapturedValue(error, sourceFiber);
                const update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                const eventTime = requestEventTime();
                const root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

                if (root !== null) {
                  markRootUpdated(root, SyncLane, eventTime);
                  ensureRootIsScheduled(root, eventTime);
                  schedulePendingInteractions(root, SyncLane);
                } else {
                  // This component has already been unmounted.
                  // We can't schedule any follow up work for the root because the fiber is already unmounted,
                  // but we can still call the log-only boundary so the error isn't swallowed.
                  //
                  // TODO This is only a temporary bandaid for the old reconciler fork.
                  // We can delete this special case once the new fork is merged.
                  if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    try {
                      instance.componentDidCatch(error, errorInfo);
                    } catch (errorToIgnore) { // TODO Ignore this error? Rethrow it?
                      // This is kind of an edge case.
                    }
                  }
                }

                return;
              }
            }

            fiber = fiber.return;
          }
        }

        function pingSuspendedRoot(root, wakeable, pingedLanes) {
          const { pingCache } = root;

          if (pingCache !== null) {
            // The wakeable resolved, so we no longer need to memoize, because it will
            // never be thrown again.
            pingCache.delete(wakeable);
          }

          const eventTime = requestEventTime();
          markRootPinged(root, pingedLanes);

          if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              // Restart from the root.
              prepareFreshStack(root, NoLanes);
            } else {
              // Even though we can't restart right now, we might get an
              // opportunity later. So we mark this render as having a ping.
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }

          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, pingedLanes);
        }

        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          // The boundary fiber (a Suspense component or SuspenseList component)
          // previously was rendered in its fallback state. One of the promises that
          // suspended it has resolved, which means at least part of the tree was
          // likely unblocked. Try rendering again, at a new expiration time.
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          } // TODO: Special case idle priority?

          const eventTime = requestEventTime();
          const root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

          if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, retryLane);
          }
        }

        function resolveRetryWakeable(boundaryFiber, wakeable) {
          const retryLane = NoLane; // Default

          let retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }

          if (retryCache !== null) {
            // The wakeable resolved, so we no longer need to memoize, because it will
            // never be thrown again.
            retryCache.delete(wakeable);
          }

          retryTimedOutBoundary(boundaryFiber, retryLane);
        } // Computes the next Just Noticeable Difference (JND) boundary.
        // The theory is that a person can't tell the difference between small differences in time.
        // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
        // difference in the experience. However, waiting for longer might mean that we can avoid
        // showing an intermediate loading state. The longer we have already waited, the harder it
        // is to tell small differences in time. Therefore, the longer we've already waited,
        // the longer we can wait additionally. At some point we have to give up though.
        // We pick a train model where the next boundary commits at a consistent schedule.
        // These particular numbers are vague estimates. We expect to adjust them based on research.

        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }

        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error('Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
              }
            }
          }

          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
            }
          }
        }

        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }

        let didWarnStateUpdateForNotYetMountedComponent = null;

        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              // We let the other warning about render phase updates deal with this one.
              return;
            }

            if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
              return;
            }

            const { tag } = fiber;

            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              // Only warn for user-defined components, not internal ones like Suspense.
              return;
            } // We show the whole stack but dedupe on the top component's name because
            // the problematic code almost always lies inside that component.

            const componentName = getComponentName(fiber.type) || 'ReactComponent';

            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }

              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            }

            const previousFiber = current;

            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }

        let didWarnStateUpdateForUnmountedComponent = null;

        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            const { tag } = fiber;

            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              // Only warn for user-defined components, not internal ones like Suspense.
              return;
            } // If there are pending passive effects unmounts for this Fiber,
            // we can assume that they would have prevented this update.

            if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
              return;
            } // We show the whole stack but dedupe on the top component's name because
            // the problematic code almost always lies inside that component.

            const componentName = getComponentName(fiber.type) || 'ReactComponent';

            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }

              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }

            if (isFlushingPassiveEffects) ;else {
              const previousFiber = current;

              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }

        let beginWork$1;
        {
          const dummyFiber = null;

          beginWork$1 = function (current, unitOfWork, lanes) {
            // If a component throws an error, we replay it again in a synchronously
            // dispatched event, so that the debugger will treat it as an uncaught
            // error See ReactErrorUtils for more information.
            // Before entering the begin phase, copy the work-in-progress onto a dummy
            // fiber. If beginWork throws, we'll use this to reset the state.
            const originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

            try {
              return beginWork(current, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
                // Don't replay promises. Treat everything else like an error.
                throw originalError;
              } // Keep this code in sync with handleError; any changes here must have
              // corresponding changes there.

              resetContextDependencies();
              resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
              // same fiber again.
              // Unwind the failed stack frame

              unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

              if (unitOfWork.mode & ProfileMode) {
                // Reset the profiler timer.
                startProfilerTimer(unitOfWork);
              } // Run beginWork again.

              invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

              if (hasCaughtError()) {
                const replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.

                throw replayError;
              } else {
                // This branch is reachable if the render phase is impure.
                throw originalError;
              }
            }
          };
        }
        let didWarnAboutUpdateInRender = false;
        let didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }

        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                {
                  const renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

                  const dedupeKey = renderingComponentName;

                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    const setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
                  }

                  break;
                }

                case ClassComponent:
                {
                  if (!didWarnAboutUpdateInRender) {
                    error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');
                    didWarnAboutUpdateInRender = true;
                  }

                  break;
                }
              }
            }
          }
        } // a 'shared' variable that changes when act() opens/closes in tests.

        const IsThisRendererActing = {
          current: false,
        };

        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              const previousFiber = current;

              try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' // Break up imports to avoid accidentally parsing them as dependencies.
            + 'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' // Break up imports to avoid accidentally parsing them as dependencies.
            + 'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }

        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
            }
          }
        }

        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              const previousFiber = current;

              try {
                setCurrentFiber(fiber);
                error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }

        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

        let didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
        // scheduler is the actual recommendation. The alternative could be a testing build,
        // a new lib, or whatever; we dunno just yet. This message is for early adopters
        // to get their tests right.

        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' // Break up requires to avoid accidentally parsing them as dependencies.
            + "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
              }
            }
          }
        }

        function computeThreadID(root, lane) {
          // Interaction threads are unique per root and expiration time.
          // NOTE: Intentionally unsound cast. All that matters is that it's a number
          // and it represents a batch of work. Could make a helper function instead,
          // but meh this is fine for now.
          return lane * 1000 + root.interactionThreadID;
        }

        function markSpawnedWork(lane) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [lane];
          } else {
            spawnedWorkDuringRender.push(lane);
          }
        }

        function scheduleInteractions(root, lane, interactions) {
          if (interactions.size > 0) {
            const { pendingInteractionMap } = root;
            const pendingInteractions = pendingInteractionMap.get(lane);

            if (pendingInteractions != null) {
              interactions.forEach(interaction => {
                if (!pendingInteractions.has(interaction)) {
                  // Update the pending async work count for previously unscheduled interaction.
                  interaction.__count++;
                }

                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

              interactions.forEach(interaction => {
                interaction.__count++;
              });
            }

            const subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              const threadID = computeThreadID(root, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }

        function schedulePendingInteractions(root, lane) {
          scheduleInteractions(root, lane, tracing.__interactionsRef.current);
        }

        function startWorkOnPendingInteractions(root, lanes) {
          // we can accurately attribute time spent working on it, And so that cascading
          // work triggered during the render phase will be associated with it.
          const interactions = new Set();
          root.pendingInteractionMap.forEach((scheduledInteractions, scheduledLane) => {
            if (includesSomeLane(lanes, scheduledLane)) {
              scheduledInteractions.forEach(interaction => interactions.add(interaction));
            }
          }); // Store the current set of interactions on the FiberRoot for a few reasons:
          // We can re-use it in hot functions like performConcurrentWorkOnRoot()
          // without having to recalculate it. We will also use it in commitWork() to
          // pass to any Profiler onRender() hooks. This also provides DevTools with a
          // way to access it when the onCommitRoot() hook is called.

          root.memoizedInteractions = interactions;

          if (interactions.size > 0) {
            const subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              const threadID = computeThreadID(root, lanes);

              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                // If the subscriber throws, rethrow it in a separate task
                scheduleCallback(ImmediatePriority$1, () => {
                  throw error;
                });
              }
            }
          }
        }

        function finishPendingInteractions(root, committedLanes) {
          const remainingLanesAfterCommit = root.pendingLanes;
          let subscriber;

          try {
            subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null && root.memoizedInteractions.size > 0) {
              // FIXME: More than one lane can finish in a single commit.
              const threadID = computeThreadID(root, committedLanes);
              subscriber.onWorkStopped(root.memoizedInteractions, threadID);
            }
          } catch (error) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, () => {
              throw error;
            });
          } finally {
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            const { pendingInteractionMap } = root;
            pendingInteractionMap.forEach((scheduledInteractions, lane) => {
              // Only decrement the pending interaction count if we're done.
              // If there's still work at the current priority,
              // That indicates that we are waiting for suspense data.
              if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                pendingInteractionMap.delete(lane);
                scheduledInteractions.forEach(interaction => {
                  interaction.__count--;

                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error) {
                      // If the subscriber throws, rethrow it in a separate task
                      scheduleCallback(ImmediatePriority$1, () => {
                        throw error;
                      });
                    }
                  }
                });
              }
            });
          }
        } // `act` testing API

        function shouldForceFlushFallbacksInDEV() {
          // Never force flush in production. This function should get stripped out.
          return actingUpdatesScopeDepth > 0;
        } // so we can tell if any async act() calls try to run in parallel.

        var actingUpdatesScopeDepth = 0;

        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null;
          fiber.stateNode = null;
        }

        let resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

        let failedBoundaries = null;

        const setRefreshHandler = function (handler) {
          {
            resolveFamily = handler;
          }
        };

        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return type;
            }

            const family = resolveFamily(type);

            if (family === undefined) {
              return type;
            } // Use the latest known implementation.

            return family.current;
          }
        }

        function resolveClassForHotReloading(type) {
          // No implementation differences.
          return resolveFunctionForHotReloading(type);
        }

        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return type;
            }

            const family = resolveFamily(type);

            if (family === undefined) {
              // Check if we're dealing with a real forwardRef. Don't want to crash early.
              if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                const currentRender = resolveFunctionForHotReloading(type.render);

                if (type.render !== currentRender) {
                  const syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender,
                  };

                  if (type.displayName !== undefined) {
                    syntheticType.displayName = type.displayName;
                  }

                  return syntheticType;
                }
              }

              return type;
            } // Use the latest known implementation.

            return family.current;
          }
        }

        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return false;
            }

            const prevType = fiber.elementType;
            const nextType = element.type; // If we got here, we know types aren't === equal.

            let needsCompareFamilies = false;
            const $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

            switch (fiber.tag) {
              case ClassComponent:
              {
                if (typeof nextType === 'function') {
                  needsCompareFamilies = true;
                }

                break;
              }

              case FunctionComponent:
              {
                if (typeof nextType === 'function') {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                  needsCompareFamilies = true;
                }

                break;
              }

              case ForwardRef:
              {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

              case MemoComponent:
              case SimpleMemoComponent:
              {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

              default:
                return false;
            } // Check if both types have a family and it's the same one.

            if (needsCompareFamilies) {
              // Note: memo() and forwardRef() we'll compare outer rather than inner type.
              // This means both of them need to be registered to preserve state.
              // If we unwrapped and compared the inner types for wrappers instead,
              // then we would risk falsely saying two separate memo(Foo)
              // calls are equivalent because they wrap the same Foo function.
              const prevFamily = resolveFamily(prevType);

              if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }

            return false;
          }
        }

        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return;
            }

            if (typeof WeakSet !== 'function') {
              return;
            }

            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }

            failedBoundaries.add(fiber);
          }
        }

        const scheduleRefresh = function (root, update) {
          {
            if (resolveFamily === null) {
              // Hot reloading is disabled.
              return;
            }

            const { staleFamilies } = update;
            const { updatedFamilies } = update;
            flushPassiveEffects();
            flushSync(() => {
              scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
            });
          }
        };

        const scheduleRoot = function (root, element) {
          {
            if (root.context !== emptyContextObject) {
              // Super edge case: root has a legacy _renderSubtree context
              // but we don't know the parentComponent so we can't pass it.
              // Just ignore. We'll delete this with _renderSubtree code path later.
              return;
            }

            flushPassiveEffects();
            flushSync(() => {
              updateContainer(element, root, null, null);
            });
          }
        };

        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            const { alternate } = fiber;
            const { child } = fiber;
            const { sibling } = fiber;
            const { tag } = fiber;
            const { type } = fiber;
            let candidateType = null;

            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;

              case ForwardRef:
                candidateType = type.render;
                break;
            }

            if (resolveFamily === null) {
              throw new Error('Expected resolveFamily to be set during hot reload.');
            }

            let needsRender = false;
            let needsRemount = false;

            if (candidateType !== null) {
              const family = resolveFamily(candidateType);

              if (family !== undefined) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }

            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }

            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }

            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }

            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }

            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }

        const findHostInstancesForRefresh = function (root, families) {
          {
            const hostInstances = new Set();
            const types = new Set(families.map(family => family.current));
            findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
            return hostInstances;
          }
        };

        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            const { child } = fiber;
            const { sibling } = fiber;
            const { tag } = fiber;
            const { type } = fiber;
            let candidateType = null;

            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;

              case ForwardRef:
                candidateType = type.render;
                break;
            }

            let didMatch = false;

            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }

            if (didMatch) {
              // We have a match. This only drills down to the closest host components.
              // There's no need to search deeper because for the purpose of giving
              // visual feedback, "flashing" outermost parent rectangles is sufficient.
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              // If there's no match, maybe there will be one further down in the child tree.
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }

            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }

        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            const foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

            if (foundHostInstances) {
              return;
            } // If we didn't find any host children, fallback to closest host parent.

            let node = fiber;

            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;

                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;

                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }

              if (node.return === null) {
                throw new Error('Expected to reach root first.');
              }

              node = node.return;
            }
          }
        }

        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            let node = fiber;
            let foundHostInstances = false;

            while (true) {
              if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }

              if (node === fiber) {
                return foundHostInstances;
              }

              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }

                node = node.return;
              }

              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }

        let hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;

          try {
            const nonExtensibleObject = Object.preventExtensions({});
            /* eslint-disable no-new */

            new Map([[nonExtensibleObject, null]]);
            new Set([nonExtensibleObject]);
            /* eslint-enable no-new */
          } catch (e) {
            // TODO: Consider warning about bad polyfills
            hasBadMapPolyfill = true;
          }
        }
        let debugCounter = 1;

        function FiberNode(tag, pendingProps, key, mode) {
          // Instance
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null; // Fiber

          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode; // Effects

          this.flags = NoFlags;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            // Note: The following is done to avoid a v8 performance cliff.
            //
            // Initializing the fields below to smis and later updating them with
            // double values will cause Fibers to end up having separate shapes.
            // This behavior/bug has something to do with Object.preventExtension().
            // Fortunately this only impacts DEV builds.
            // Unfortunately it makes React unusably slow for some applications.
            // To work around this, initialize the fields below with doubles.
            //
            // Learn more about this here:
            // https://github.com/facebook/react/issues/14365
            // https://bugs.chromium.org/p/v8/issues/detail?id=8538
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
            // This won't trigger the performance cliff mentioned above,
            // and it simplifies other profiler code (including DevTools).

            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            // This isn't directly used but is handy for debugging internals:
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;

            if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
              Object.preventExtensions(this);
            }
          }
        } // This is a constructor function, rather than a POJO constructor, still
        // please ensure we do the following:
        // 1) Nobody should add any instance methods on this. Instance methods can be
        //    more difficult to predict when they get optimized and they are almost
        //    never inlined properly in static compilers.
        // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
        //    always know when it is a fiber.
        // 3) We might want to experiment with using numeric keys since they are easier
        //    to optimize in a non-JIT environment.
        // 4) We can easily go from a constructor to a createFiber object literal if that
        //    is faster.
        // 5) It should be easy to port this to a C struct and keep a C implementation
        //    compatible.

        const createFiber = function (tag, pendingProps, key, mode) {
          // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
          return new FiberNode(tag, pendingProps, key, mode);
        };

        function shouldConstruct$1(Component) {
          const { prototype } = Component;
          return !!(prototype && prototype.isReactComponent);
        }

        function isSimpleFunctionComponent(type) {
          return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
        }

        function resolveLazyComponentTag(Component) {
          if (typeof Component === 'function') {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } if (Component !== undefined && Component !== null) {
            const { $$typeof } = Component;

            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }

            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }

          return IndeterminateComponent;
        } // This is used to create an alternate fiber to do work on.

        function createWorkInProgress(current, pendingProps) {
          let workInProgress = current.alternate;

          if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            {
              // DEV-only fields
              workInProgress._debugID = current._debugID;
              workInProgress._debugSource = current._debugSource;
              workInProgress._debugOwner = current._debugOwner;
              workInProgress._debugHookTypes = current._debugHookTypes;
            }
            workInProgress.alternate = current;
            current.alternate = workInProgress;
          } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.

            workInProgress.flags = NoFlags; // The effect list is no longer valid.

            workInProgress.nextEffect = null;
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
            {
              // We intentionally reset, rather than copy, actualDuration & actualStartTime.
              // This prevents time from endlessly accumulating in new commits.
              // This has the downside of resetting values for different priority renders,
              // But works for yielding (the common case) and should support resuming.
              workInProgress.actualDuration = 0;
              workInProgress.actualStartTime = -1;
            }
          }

          workInProgress.childLanes = current.childLanes;
          workInProgress.lanes = current.lanes;
          workInProgress.child = current.child;
          workInProgress.memoizedProps = current.memoizedProps;
          workInProgress.memoizedState = current.memoizedState;
          workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
          // it cannot be shared with the current fiber.

          const currentDependencies = current.dependencies;
          workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext,
          }; // These will be overridden during the parent's reconciliation

          workInProgress.sibling = current.sibling;
          workInProgress.index = current.index;
          workInProgress.ref = current.ref;
          {
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
          }
          {
            workInProgress._debugNeedsRemount = current._debugNeedsRemount;

            switch (workInProgress.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;

              case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;

              case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
            }
          }
          return workInProgress;
        } // Used to reuse a Fiber for a second pass.

        function resetWorkInProgress(workInProgress, renderLanes) {
          // This resets the Fiber to what createFiber or createWorkInProgress would
          // have set the values to before during the first pass. Ideally this wouldn't
          // be necessary but unfortunately many code paths reads from the workInProgress
          // when they should be reading from current and writing to workInProgress.
          // We assume pendingProps, index, key, ref, return are still untouched to
          // avoid doing another reconciliation.
          // Reset the effect tag but keep any Placement tags, since that's something
          // that child fiber is setting, not the reconciliation.
          workInProgress.flags &= Placement; // The effect list is no longer valid.

          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          const current = workInProgress.alternate;

          if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            {
              // Note: We don't reset the actualTime counts. It's useful to accumulate
              // actual time across multiple render passes.
              workInProgress.selfBaseDuration = 0;
              workInProgress.treeBaseDuration = 0;
            }
          } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.

            const currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext,
            };
            {
              // Note: We don't reset the actualTime counts. It's useful to accumulate
              // actual time across multiple render passes.
              workInProgress.selfBaseDuration = current.selfBaseDuration;
              workInProgress.treeBaseDuration = current.treeBaseDuration;
            }
          }

          return workInProgress;
        }

        function createHostRootFiber(tag) {
          let mode;

          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }

          if (isDevToolsPresent) {
            // Always collect profile timings when DevTools are present.
            // This enables DevTools to start capturing timing at any point–
            // Without some nodes in the tree having empty base times.
            mode |= ProfileMode;
          }

          return createFiber(HostRoot, null, null, mode);
        }

        function createFiberFromTypeAndProps(type, // React$ElementType
          key, pendingProps, owner, mode, lanes) {
          let fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

          let resolvedType = type;

          if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === 'string') {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);

              case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;

              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;

              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);

              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);

              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);

              case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

              case REACT_SCOPE_TYPE: // eslint-disable-next-line no-fallthrough

              default:
              {
                if (typeof type === 'object' && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;

                    case REACT_CONTEXT_TYPE:
                    // This is a consumer
                      fiberTag = ContextConsumer;
                      break getTag;

                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;

                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;

                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;

                    case REACT_BLOCK_TYPE:
                      fiberTag = Block;
                      break getTag;
                  }
                }

                let info = '';
                {
                  if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                    info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                  }

                  const ownerName = owner ? getComponentName(owner.type) : null;

                  if (ownerName) {
                    info += `\n\nCheck the render method of \`${ownerName}\`.`;
                  }
                }
                {
                  {
                    throw Error(`Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: ${type == null ? type : typeof type}.${info}`);
                  }
                }
              }
            }
          }

          const fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }

        function createFiberFromElement(element, mode, lanes) {
          let owner = null;
          {
            owner = element._owner;
          }
          const { type } = element;
          const { key } = element;
          const pendingProps = element.props;
          const fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }

        function createFiberFromFragment(elements, mode, lanes, key) {
          const fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== 'string') {
              error('Profiler must specify an "id" as a prop');
            }
          }
          const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0,
            };
          }
          return fiber;
        }

        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          const fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
          // This needs to be fixed in getComponentName so that it relies on the tag
          // instead.

          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
            // This needs to be fixed in getComponentName so that it relies on the tag
            // instead.
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          const fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
          // This needs to be fixed in getComponentName so that it relies on the tag
          // instead.

          {
            fiber.type = REACT_OFFSCREEN_TYPE;
          }
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
          const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
          // This needs to be fixed in getComponentName so that it relies on the tag
          // instead.

          {
            fiber.type = REACT_LEGACY_HIDDEN_TYPE;
          }
          fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromText(content, mode, lanes) {
          const fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }

        function createFiberFromHostInstanceForDeletion() {
          const fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

          fiber.elementType = 'DELETED';
          fiber.type = 'DELETED';
          return fiber;
        }

        function createFiberFromPortal(portal, mode, lanes) {
          const pendingProps = portal.children !== null ? portal.children : [];
          const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation,
          };
          return fiber;
        } // Used for stashing WIP properties to replay failed work in DEV.

        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            // This Fiber's initial properties will always be overwritten.
            // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          } // This is intentionally written as a list of all properties.
          // We tried to use Object.assign() instead but this is called in
          // the hottest path, and Object.assign() was too slow:
          // https://github.com/facebook/react/issues/12502
          // This code is DEV-only so size is not a concern.

          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }

        function FiberRootNode(containerInfo, tag, hydrate) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate;
          this.callbackNode = null;
          this.callbackPriority = NoLanePriority;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
          {
            switch (tag) {
              case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;

              case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;

              case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
            }
          }
        }

        function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
          const root = new FiberRootNode(containerInfo, tag, hydrate); // stateNode is any.

          const uninitializedFiber = createHostRootFiber(tag);
          root.current = uninitializedFiber;
          uninitializedFiber.stateNode = root;
          initializeUpdateQueue(uninitializedFiber);
          return root;
        } // This ensures that the version used for server rendering matches the one
        // that is eventually read during hydration.
        // If they don't match there's a potential tear and a full deopt render is required.

        function registerMutableSourceForHydration(root, mutableSource) {
          const getVersion = mutableSource._getVersion;
          const version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
          // Retaining it forever may interfere with GC.

          if (root.mutableSourceEagerHydrationData == null) {
            root.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }

        function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
          implementation) {
          const key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : `${key}`,
            children,
            containerInfo,
            implementation,
          };
        }

        let didWarnAboutNestedUpdates;
        let didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }

        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }

          const fiber = get(parentComponent);
          const parentContext = findCurrentUnmaskedContext(fiber);

          if (fiber.tag === ClassComponent) {
            const Component = fiber.type;

            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }

          return parentContext;
        }

        function findHostInstanceWithWarning(component, methodName) {
          {
            const fiber = get(component);

            if (fiber === undefined) {
              if (typeof component.render === 'function') {
                {
                  {
                    throw Error('Unable to find node on an unmounted component.');
                  }
                }
              } else {
                {
                  {
                    throw Error(`Argument appears to not be a ReactComponent. Keys: ${Object.keys(component)}`);
                  }
                }
              }
            }

            const hostFiber = findCurrentHostFiber(fiber);

            if (hostFiber === null) {
              return null;
            }

            if (hostFiber.mode & StrictMode) {
              const componentName = getComponentName(fiber.type) || 'Component';

              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                const previousFiber = current;

                try {
                  setCurrentFiber(hostFiber);

                  if (fiber.mode & StrictMode) {
                    error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                  } else {
                    error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                  }
                } finally {
                  // Ideally this should reset to previous but this shouldn't be called in
                  // render and there's another warning for that anyway.
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }

            return hostFiber.stateNode;
          }
        }

        function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate);
        }

        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          const current$1 = container.current;
          const eventTime = requestEventTime();
          {
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if (typeof jest !== 'undefined') {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          const lane = requestUpdateLane(current$1);
          const context = getContextForSubtree(parentComponent);

          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
            }
          }
          const update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
          // being called "element".

          update.payload = {
            element,
          };
          callback = callback === undefined ? null : callback;

          if (callback !== null) {
            {
              if (typeof callback !== 'function') {
                error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
              }
            }
            update.callback = callback;
          }

          enqueueUpdate(current$1, update);
          scheduleUpdateOnFiber(current$1, lane, eventTime);
          return lane;
        }

        function getPublicRootInstance(container) {
          const containerFiber = container.current;

          if (!containerFiber.child) {
            return null;
          }

          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);

            default:
              return containerFiber.child.stateNode;
          }
        }

        function markRetryLaneImpl(fiber, retryLane) {
          const suspenseState = fiber.memoizedState;

          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        } // Increases the priority of thennables when they resolve within this boundary.

        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          const { alternate } = fiber;

          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }

        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            // We ignore HostRoots here because we can't increase
            // their priority and they should not suspend on I/O,
            // since you have to wrap anything that might suspend in
            // Suspense.
            return;
          }

          const eventTime = requestEventTime();
          const lane = InputDiscreteHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }

        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            // We ignore HostRoots here because we can't increase
            // their priority and they should not suspend on I/O,
            // since you have to wrap anything that might suspend in
            // Suspense.
            return;
          }

          const eventTime = requestEventTime();
          const lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }

        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            // We ignore HostRoots here because we can't increase
            // their priority other than synchronously flush it.
            return;
          }

          const eventTime = requestEventTime();
          const lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }

        function runWithPriority$2(priority, fn) {
          try {
            setCurrentUpdateLanePriority(priority);
            return fn();
          } finally {}
        }

        function findHostInstanceWithNoPortals(fiber) {
          const hostFiber = findCurrentHostFiberWithNoPortals(fiber);

          if (hostFiber === null) {
            return null;
          }

          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }

          return hostFiber.stateNode;
        }

        let shouldSuspendImpl = function (fiber) {
          return false;
        };

        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }

        let overrideHookState = null;
        let overrideHookStateDeletePath = null;
        let overrideHookStateRenamePath = null;
        let overrideProps = null;
        let overridePropsDeletePath = null;
        let overridePropsRenamePath = null;
        let scheduleUpdate = null;
        let setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function (obj, path, index) {
            const key = path[index];
            const updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

            if (index + 1 === path.length) {
              if (Array.isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }

              return updated;
            } // $FlowFixMe number or string is fine here

            updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
            return updated;
          };

          const copyWithDelete = function (obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };

          var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
            const oldKey = oldPath[index];
            const updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

            if (index + 1 === oldPath.length) {
              const newKey = newPath[index]; // $FlowFixMe number or string is fine here

              updated[newKey] = updated[oldKey];

              if (Array.isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              // $FlowFixMe number or string is fine here
              updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
                obj[oldKey], oldPath, newPath, index + 1,
              );
            }

            return updated;
          };

          const copyWithRename = function (obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn('copyWithRename() expects paths of the same length');
              return;
            }
            for (let i = 0; i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
              }
            }

            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };

          var copyWithSetImpl = function (obj, path, index, value) {
            if (index >= path.length) {
              return value;
            }

            const key = path[index];
            const updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

            updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
            return updated;
          };

          const copyWithSet = function (obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };

          const findHook = function (fiber, id) {
            // For now, the "id" of stateful hooks is just the stateful hook index.
            // This may change in the future with e.g. nested hooks.
            let currentHook = fiber.memoizedState;

            while (currentHook !== null && id > 0) {
              currentHook = currentHook.next;
              id--;
            }

            return currentHook;
          }; // Support DevTools editable values for useState and useReducer.

          overrideHookState = function (fiber, id, path, value) {
            const hook = findHook(fiber, id);

            if (hook !== null) {
              const newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.

              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };

          overrideHookStateDeletePath = function (fiber, id, path) {
            const hook = findHook(fiber, id);

            if (hook !== null) {
              const newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.

              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };

          overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
            const hook = findHook(fiber, id);

            if (hook !== null) {
              const newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.

              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          }; // Support DevTools props for function components, forwardRef, memo, host components, etc.

          overrideProps = function (fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }

            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };

          overridePropsDeletePath = function (fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }

            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };

          overridePropsRenamePath = function (fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }

            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };

          scheduleUpdate = function (fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };

          setSuspenseHandler = function (newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }

        function findHostInstanceByFiber(fiber) {
          const hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        }

        function emptyFindFiberByHostInstance(instance) {
          return null;
        }

        function getCurrentFiberForDevTools() {
          return current;
        }

        function injectIntoDevTools(devToolsConfig) {
          const { findFiberByHostInstance } = devToolsConfig;
          const { ReactCurrentDispatcher } = ReactSharedInternals;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
          });
        }

        function ReactDOMRoot(container, options) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
        }

        function ReactDOMBlockingRoot(container, tag, options) {
          this._internalRoot = createRootImpl(container, tag, options);
        }

        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
          const root = this._internalRoot;
          {
            if (typeof arguments[1] === 'function') {
              error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
            }

            const container = root.containerInfo;

            if (container.nodeType !== COMMENT_NODE) {
              const hostInstance = findHostInstanceWithNoPortals(root.current);

              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root, null, null);
        };

        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
          {
            if (typeof arguments[0] === 'function') {
              error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
            }
          }
          const root = this._internalRoot;
          const container = root.containerInfo;
          updateContainer(null, root, null, () => {
            unmarkContainerAsRoot(container);
          });
        };

        function createRootImpl(container, tag, options) {
          // Tag is either LegacyRoot or Concurrent Root
          const hydrate = options != null && options.hydrate === true;
          const hydrationCallbacks = options != null && options.hydrationOptions || null;
          const mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
          const root = createContainer(container, tag, hydrate);
          markContainerAsRoot(root.current, container);
          const containerNodeType = container.nodeType;
          {
            const rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
          }

          if (mutableSources) {
            for (let i = 0; i < mutableSources.length; i++) {
              const mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root, mutableSource);
            }
          }

          return root;
        }

        function createLegacyRoot(container, options) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options);
        }

        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
        }

        const ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        let topLevelUpdateWarnings;
        let warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function (container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              const hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
                }
              }
            }

            const isRootRenderedBySomeReact = !!container._reactRootContainer;
            const rootEl = getReactRootElementInContainer(container);
            const hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
            }

            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
              error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
            }
          };
        }

        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }

          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          }
          return container.firstChild;
        }

        function shouldHydrateDueToLegacyHeuristic(container) {
          const rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }

        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          const shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

          if (!shouldHydrate) {
            let warned = false;
            let rootSibling;

            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
                }
              }
              container.removeChild(rootSibling);
            }
          }

          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true,
          } : undefined);
        }

        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== 'function') {
              error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
            }
          }
        }

        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
          } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
          // member of intersection type." Whyyyyyy.

          let root = container._reactRootContainer;
          let fiberRoot;

          if (!root) {
            // Initial mount
            root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root._internalRoot;

            if (typeof callback === 'function') {
              const originalCallback = callback;

              callback = function () {
                const instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            } // Initial mount should not be batched.

            unbatchedUpdates(() => {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root._internalRoot;

            if (typeof callback === 'function') {
              const _originalCallback = callback;

              callback = function () {
                const instance = getPublicRootInstance(fiberRoot);

                _originalCallback.call(instance);
              };
            } // Update

            updateContainer(children, fiberRoot, parentComponent, callback);
          }

          return getPublicRootInstance(fiberRoot);
        }

        function findDOMNode(componentOrElement) {
          {
            const owner = ReactCurrentOwner$3.current;

            if (owner !== null && owner.stateNode !== null) {
              const warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

              if (!warnedAboutRefsInRender) {
                error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
              }

              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }

          if (componentOrElement == null) {
            return null;
          }

          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }

          {
            return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
          }
        }

        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error('Target container is not a DOM element.');
            }
          }

          {
            const isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

            if (isModernRoot) {
              error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
            }
          } // TODO: throw or warn if we couldn't hydrate?

          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }

        function render(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error('Target container is not a DOM element.');
            }
          }

          {
            const isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

            if (isModernRoot) {
              error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }

        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error('Target container is not a DOM element.');
            }
          }

          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error('parentComponent must be a valid React Component');
            }
          }

          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }

        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error('unmountComponentAtNode(...): Target container is not a DOM element.');
            }
          }

          {
            const isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

            if (isModernRoot) {
              error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
            }
          }

          if (container._reactRootContainer) {
            {
              const rootEl = getReactRootElementInContainer(container);
              const renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
              }
            } // Unmount should not be batched.

            unbatchedUpdates(() => {
              legacyRenderSubtreeIntoContainer(null, null, container, false, () => {
                // $FlowFixMe This should probably use `delete container._reactRootContainer`
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?

            return true;
          }
          {
            const _rootEl = getReactRootElementInContainer(container);

            const hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

            const isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
            }
          }
          return false;
        }

        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setAttemptHydrationAtPriority(runWithPriority$2);
        let didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== 'function' // $FlowIssue Flow incorrectly thinks Map has no prototype
      || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' // $FlowIssue Flow incorrectly thinks Set has no prototype
      || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
            error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

        function createPortal$1(children, container) {
          const key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

          if (!isValidContainer(container)) {
            {
              throw Error('Target container is not a DOM element.');
            }
          } // TODO: pass ReactDOM portal implementation as third argument
          // $FlowFixMe The Flow type is opaque but there's no way to actually create it.

          return createPortal(children, container, null, key);
        }

        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }

        function unstable_createPortal(children, container) {
          const key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }

        const Internals = {
          // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
            IsThisRendererActing],
        };
        const foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: 'react-dom',
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            // If we're in Chrome or Firefox, provide a download link if not installed.
            if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
              const { protocol } = window.location; // Don't warn in exotic cases like chrome-extension://.

              if (/^(https?|file):$/.test(protocol)) {
                // eslint-disable-next-line react-internal/no-production-logging
                console.info(`${'%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools'}${protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''}`, 'font-weight:bold');
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      }());
    }
    /***/ }),

  /***/ './node_modules/react-dom/index.js':
  /*! *****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \**************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    function checkDCE() {
      /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
        return;
      }

      if (true) {
        // This branch is unreachable because this function is only called
        // in production, but the condition is true only in development.
        // Therefore if the branch is still here, dead code elimination wasn't
        // properly applied.
        // Don't change the message. React DevTools relies on it. Also make sure
        // this message doesn't occur elsewhere in this function, or it will cause
        // a false positive.
        throw new Error('^_^');
      }

      try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
      }
    }

    if (false) {} else {
      module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ './node_modules/react-dom/cjs/react-dom.development.js');
    }
    /***/ }),

  /***/ './node_modules/react-error-overlay/lib/index.js':
  /*! *******************************************************!*\
  !*** ./node_modules/react-error-overlay/lib/index.js ***!
  \****************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function (process) {
      !(function (e, t) {
        true ? module.exports = t() : undefined;
      }(window, () => (function (e) {
        const t = {};

        function n(r) {
          if (t[r]) return t[r].exports;
          const u = t[r] = {
            i: r,
            l: !1,
            exports: {},
          };
          return e[r].call(u.exports, u, u.exports, n), u.l = !0, u.exports;
        }

        return n.m = e, n.c = t, n.d = function (e, t, r) {
          n.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: r,
          });
        }, n.r = function (e) {
          typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: 'Module',
          }), Object.defineProperty(e, '__esModule', {
            value: !0,
          });
        }, n.t = function (e, t) {
          if (1 & t && (e = n(e)), 8 & t) return e;
          if (4 & t && typeof e === 'object' && e && e.__esModule) return e;
          const r = Object.create(null);
          if (n.r(r), Object.defineProperty(r, 'default', {
            enumerable: !0,
            value: e,
          }), 2 & t && typeof e !== 'string') {
            for (const u in e) {
              n.d(r, u, (t => e[t]).bind(null, u));
            }
          }
          return r;
        }, n.n = function (e) {
          const t = e && e.__esModule ? function () {
            return e.default;
          } : function () {
            return e;
          };
          return n.d(t, 'a', t), t;
        }, n.o = function (e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        }, n.p = '', n(n.s = 16);
      }([function (e, t, n) {
        e.exports = n(9);
      }, function (e, t) {
        t.getArg = function (e, t, n) {
          if (t in e) return e[t];
          if (arguments.length === 3) return n;
          throw new Error(`"${t}" is a required argument.`);
        };

        const n = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
        const r = /^data:.+\,.+$/;

        function u(e) {
          const t = e.match(n);
          return t ? {
            scheme: t[1],
            auth: t[2],
            host: t[3],
            port: t[4],
            path: t[5],
          } : null;
        }

        function o(e) {
          let t = '';
          return e.scheme && (t += `${e.scheme}:`), t += '//', e.auth && (t += `${e.auth}@`), e.host && (t += e.host), e.port && (t += `:${e.port}`), e.path && (t += e.path), t;
        }

        function i(e) {
          let n = e;
          const r = u(e);

          if (r) {
            if (!r.path) return e;
            n = r.path;
          }

          for (var i, a = t.isAbsolute(n), l = n.split(/\/+/), c = 0, s = l.length - 1; s >= 0; s--) (i = l[s]) === '.' ? l.splice(s, 1) : i === '..' ? c++ : c > 0 && (i === '' ? (l.splice(s + 1, c), c = 0) : (l.splice(s, 2), c--));

          return (n = l.join('/')) === '' && (n = a ? '/' : '.'), r ? (r.path = n, o(r)) : n;
        }

        t.urlParse = u, t.urlGenerate = o, t.normalize = i, t.join = function (e, t) {
          e === '' && (e = '.'), t === '' && (t = '.');
          const n = u(t);
          const a = u(e);
          if (a && (e = a.path || '/'), n && !n.scheme) return a && (n.scheme = a.scheme), o(n);
          if (n || t.match(r)) return t;
          if (a && !a.host && !a.path) return a.host = t, o(a);
          const l = t.charAt(0) === '/' ? t : i(`${e.replace(/\/+$/, '')}/${t}`);
          return a ? (a.path = l, o(a)) : l;
        }, t.isAbsolute = function (e) {
          return e.charAt(0) === '/' || !!e.match(n);
        }, t.relative = function (e, t) {
          e === '' && (e = '.'), e = e.replace(/\/$/, '');

          for (var n = 0; t.indexOf(`${e}/`) !== 0;) {
            const r = e.lastIndexOf('/');
            if (r < 0) return t;
            if ((e = e.slice(0, r)).match(/^([^\/]+:\/)?\/*$/)) return t;
            ++n;
          }

          return Array(n + 1).join('../') + t.substr(e.length + 1);
        };
        const a = !('__proto__' in Object.create(null));

        function l(e) {
          return e;
        }

        function c(e) {
          if (!e) return !1;
          const t = e.length;
          if (t < 9) return !1;
          if (e.charCodeAt(t - 1) !== 95 || e.charCodeAt(t - 2) !== 95 || e.charCodeAt(t - 3) !== 111 || e.charCodeAt(t - 4) !== 116 || e.charCodeAt(t - 5) !== 111 || e.charCodeAt(t - 6) !== 114 || e.charCodeAt(t - 7) !== 112 || e.charCodeAt(t - 8) !== 95 || e.charCodeAt(t - 9) !== 95) return !1;

          for (let n = t - 10; n >= 0; n--) if (e.charCodeAt(n) !== 36) return !1;

          return !0;
        }

        function s(e, t) {
          return e === t ? 0 : e > t ? 1 : -1;
        }

        t.toSetString = a ? l : function (e) {
          return c(e) ? `$${e}` : e;
        }, t.fromSetString = a ? l : function (e) {
          return c(e) ? e.slice(1) : e;
        }, t.compareByOriginalPositions = function (e, t, n) {
          let r = e.source - t.source;
          return r !== 0 ? r : (r = e.originalLine - t.originalLine) !== 0 ? r : (r = e.originalColumn - t.originalColumn) !== 0 || n ? r : (r = e.generatedColumn - t.generatedColumn) !== 0 ? r : (r = e.generatedLine - t.generatedLine) !== 0 ? r : e.name - t.name;
        }, t.compareByGeneratedPositionsDeflated = function (e, t, n) {
          let r = e.generatedLine - t.generatedLine;
          return r !== 0 ? r : (r = e.generatedColumn - t.generatedColumn) !== 0 || n ? r : (r = e.source - t.source) !== 0 ? r : (r = e.originalLine - t.originalLine) !== 0 ? r : (r = e.originalColumn - t.originalColumn) !== 0 ? r : e.name - t.name;
        }, t.compareByGeneratedPositionsInflated = function (e, t) {
          let n = e.generatedLine - t.generatedLine;
          return n !== 0 ? n : (n = e.generatedColumn - t.generatedColumn) !== 0 ? n : (n = s(e.source, t.source)) !== 0 ? n : (n = e.originalLine - t.originalLine) !== 0 ? n : (n = e.originalColumn - t.originalColumn) !== 0 ? n : s(e.name, t.name);
        };
      }, function (e, t) {
        function n(e, t) {
          for (var n = 0, r = e.length - 1; r >= 0; r--) {
            const u = e[r];
            u === '.' ? e.splice(r, 1) : u === '..' ? (e.splice(r, 1), n++) : n && (e.splice(r, 1), n--);
          }

          if (t) for (; n--; n) e.unshift('..');
          return e;
        }

        function r(e, t) {
          if (e.filter) return e.filter(t);

          for (var n = [], r = 0; r < e.length; r++) t(e[r], r, e) && n.push(e[r]);

          return n;
        }

        t.resolve = function () {
          for (var e = '', t = !1, u = arguments.length - 1; u >= -1 && !t; u--) {
            const o = u >= 0 ? arguments[u] : process.cwd();
            if (typeof o !== 'string') throw new TypeError('Arguments to path.resolve must be strings');
            o && (e = `${o}/${e}`, t = o.charAt(0) === '/');
          }

          return (t ? '/' : '') + (e = n(r(e.split('/'), e => !!e), !t).join('/')) || '.';
        }, t.normalize = function (e) {
          const o = t.isAbsolute(e);
          const i = u(e, -1) === '/';
          return (e = n(r(e.split('/'), e => !!e), !o).join('/')) || o || (e = '.'), e && i && (e += '/'), (o ? '/' : '') + e;
        }, t.isAbsolute = function (e) {
          return e.charAt(0) === '/';
        }, t.join = function () {
          const e = Array.prototype.slice.call(arguments, 0);
          return t.normalize(r(e, (e, t) => {
            if (typeof e !== 'string') throw new TypeError('Arguments to path.join must be strings');
            return e;
          }).join('/'));
        }, t.relative = function (e, n) {
          function r(e) {
            for (var t = 0; t < e.length && e[t] === ''; t++);

            for (var n = e.length - 1; n >= 0 && e[n] === ''; n--);

            return t > n ? [] : e.slice(t, n - t + 1);
          }

          e = t.resolve(e).substr(1), n = t.resolve(n).substr(1);

          for (var u = r(e.split('/')), o = r(n.split('/')), i = Math.min(u.length, o.length), a = i, l = 0; l < i; l++) {
            if (u[l] !== o[l]) {
              a = l;
              break;
            }
          }

          let c = [];

          for (l = a; l < u.length; l++) c.push('..');

          return (c = c.concat(o.slice(a))).join('/');
        }, t.sep = '/', t.delimiter = ':', t.dirname = function (e) {
          if (typeof e !== 'string' && (e += ''), e.length === 0) return '.';

          for (var t = e.charCodeAt(0), n = t === 47, r = -1, u = !0, o = e.length - 1; o >= 1; --o) {
            if ((t = e.charCodeAt(o)) === 47) {
              if (!u) {
                r = o;
                break;
              }
            } else u = !1;
          }

          return r === -1 ? n ? '/' : '.' : n && r === 1 ? '/' : e.slice(0, r);
        }, t.basename = function (e, t) {
          let n = (function (e) {
            typeof e !== 'string' && (e += '');
            let t;
            let n = 0;
            let r = -1;
            let u = !0;

            for (t = e.length - 1; t >= 0; --t) {
              if (e.charCodeAt(t) === 47) {
                if (!u) {
                  n = t + 1;
                  break;
                }
              } else r === -1 && (u = !1, r = t + 1);
            }

            return r === -1 ? '' : e.slice(n, r);
          }(e));

          return t && n.substr(-1 * t.length) === t && (n = n.substr(0, n.length - t.length)), n;
        }, t.extname = function (e) {
          typeof e !== 'string' && (e += '');

          for (var t = -1, n = 0, r = -1, u = !0, o = 0, i = e.length - 1; i >= 0; --i) {
            const a = e.charCodeAt(i);
            if (a !== 47) r === -1 && (u = !1, r = i + 1), a === 46 ? t === -1 ? t = i : o !== 1 && (o = 1) : t !== -1 && (o = -1); else if (!u) {
              n = i + 1;
              break;
            }
          }

          return t === -1 || r === -1 || o === 0 || o === 1 && t === r - 1 && t === n + 1 ? '' : e.slice(t, r);
        };
        var u = 'ab'.substr(-1) === 'b' ? function (e, t, n) {
          return e.substr(t, n);
        } : function (e, t, n) {
          return t < 0 && (t = e.length + t), e.substr(t, n);
        };
      }, function (e, t, n) {
        t.SourceMapGenerator = n(4).SourceMapGenerator, t.SourceMapConsumer = n(12).SourceMapConsumer, t.SourceNode = n(15).SourceNode;
      }, function (e, t, n) {
        const r = n(5);
        const u = n(1);
        const o = n(6).ArraySet;
        const i = n(11).MappingList;

        function a(e) {
          e || (e = {}), this._file = u.getArg(e, 'file', null), this._sourceRoot = u.getArg(e, 'sourceRoot', null), this._skipValidation = u.getArg(e, 'skipValidation', !1), this._sources = new o(), this._names = new o(), this._mappings = new i(), this._sourcesContents = null;
        }

        a.prototype._version = 3, a.fromSourceMap = function (e) {
          const t = e.sourceRoot;
          const n = new a({
            file: e.file,
            sourceRoot: t,
          });
          return e.eachMapping(e => {
            const r = {
              generated: {
                line: e.generatedLine,
                column: e.generatedColumn,
              },
            };
            e.source != null && (r.source = e.source, t != null && (r.source = u.relative(t, r.source)), r.original = {
              line: e.originalLine,
              column: e.originalColumn,
            }, e.name != null && (r.name = e.name)), n.addMapping(r);
          }), e.sources.forEach(t => {
            const r = e.sourceContentFor(t);
            r != null && n.setSourceContent(t, r);
          }), n;
        }, a.prototype.addMapping = function (e) {
          const t = u.getArg(e, 'generated');
          const n = u.getArg(e, 'original', null);
          let r = u.getArg(e, 'source', null);
          let o = u.getArg(e, 'name', null);
          this._skipValidation || this._validateMapping(t, n, r, o), r != null && (r = String(r), this._sources.has(r) || this._sources.add(r)), o != null && (o = String(o), this._names.has(o) || this._names.add(o)), this._mappings.add({
            generatedLine: t.line,
            generatedColumn: t.column,
            originalLine: n != null && n.line,
            originalColumn: n != null && n.column,
            source: r,
            name: o,
          });
        }, a.prototype.setSourceContent = function (e, t) {
          let n = e;
          this._sourceRoot != null && (n = u.relative(this._sourceRoot, n)), t != null ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[u.toSetString(n)] = t) : this._sourcesContents && (delete this._sourcesContents[u.toSetString(n)], Object.keys(this._sourcesContents).length === 0 && (this._sourcesContents = null));
        }, a.prototype.applySourceMap = function (e, t, n) {
          let r = t;

          if (t == null) {
            if (e.file == null) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
            r = e.file;
          }

          const i = this._sourceRoot;
          i != null && (r = u.relative(i, r));
          const a = new o();
          const l = new o();
          this._mappings.unsortedForEach(t => {
            if (t.source === r && t.originalLine != null) {
              const o = e.originalPositionFor({
                line: t.originalLine,
                column: t.originalColumn,
              });
              o.source != null && (t.source = o.source, n != null && (t.source = u.join(n, t.source)), i != null && (t.source = u.relative(i, t.source)), t.originalLine = o.line, t.originalColumn = o.column, o.name != null && (t.name = o.name));
            }

            const c = t.source;
            c == null || a.has(c) || a.add(c);
            const s = t.name;
            s == null || l.has(s) || l.add(s);
          }, this), this._sources = a, this._names = l, e.sources.forEach(function (t) {
            const r = e.sourceContentFor(t);
            r != null && (n != null && (t = u.join(n, t)), i != null && (t = u.relative(i, t)), this.setSourceContent(t, r));
          }, this);
        }, a.prototype._validateMapping = function (e, t, n, r) {
          if ((!(e && 'line' in e && 'column' in e && e.line > 0 && e.column >= 0) || t || n || r) && !(e && 'line' in e && 'column' in e && t && 'line' in t && 'column' in t && e.line > 0 && e.column >= 0 && t.line > 0 && t.column >= 0 && n)) {
            throw new Error(`Invalid mapping: ${JSON.stringify({
              generated: e,
              source: n,
              original: t,
              name: r,
            })}`);
          }
        }, a.prototype._serializeMappings = function () {
          for (var e, t, n, o, i = 0, a = 1, l = 0, c = 0, s = 0, f = 0, p = '', d = this._mappings.toArray(), h = 0, g = d.length; h < g; h++) {
            if (e = '', (t = d[h]).generatedLine !== a) for (i = 0; t.generatedLine !== a;) e += ';', a++; else if (h > 0) {
              if (!u.compareByGeneratedPositionsInflated(t, d[h - 1])) continue;
              e += ',';
            }
            e += r.encode(t.generatedColumn - i), i = t.generatedColumn, t.source != null && (o = this._sources.indexOf(t.source), e += r.encode(o - f), f = o, e += r.encode(t.originalLine - 1 - c), c = t.originalLine - 1, e += r.encode(t.originalColumn - l), l = t.originalColumn, t.name != null && (n = this._names.indexOf(t.name), e += r.encode(n - s), s = n)), p += e;
          }

          return p;
        }, a.prototype._generateSourcesContent = function (e, t) {
          return e.map(function (e) {
            if (!this._sourcesContents) return null;
            t != null && (e = u.relative(t, e));
            const n = u.toSetString(e);
            return Object.prototype.hasOwnProperty.call(this._sourcesContents, n) ? this._sourcesContents[n] : null;
          }, this);
        }, a.prototype.toJSON = function () {
          const e = {
            version: this._version,
            sources: this._sources.toArray(),
            names: this._names.toArray(),
            mappings: this._serializeMappings(),
          };
          return this._file != null && (e.file = this._file), this._sourceRoot != null && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e;
        }, a.prototype.toString = function () {
          return JSON.stringify(this.toJSON());
        }, t.SourceMapGenerator = a;
      }, function (e, t, n) {
        const r = n(10);
        t.encode = function (e) {
          let t;
          let n = '';
          let u = (function (e) {
            return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
          }(e));

          do {
            t = 31 & u, (u >>>= 5) > 0 && (t |= 32), n += r.encode(t);
          } while (u > 0);

          return n;
        }, t.decode = function (e, t, n) {
          let u;
          let o;
          let i;
          let a;
          const l = e.length;
          let c = 0;
          let s = 0;

          do {
            if (t >= l) throw new Error('Expected more digits in base 64 VLQ value.');
            if ((o = r.decode(e.charCodeAt(t++))) === -1) throw new Error(`Invalid base64 digit: ${e.charAt(t - 1)}`);
            u = !!(32 & o), c += (o &= 31) << s, s += 5;
          } while (u);

          n.value = (a = (i = c) >> 1, (1 & i) == 1 ? -a : a), n.rest = t;
        };
      }, function (e, t, n) {
        const r = n(1);
        const u = Object.prototype.hasOwnProperty;

        function o() {
          this._array = [], this._set = Object.create(null);
        }

        o.fromArray = function (e, t) {
          for (var n = new o(), r = 0, u = e.length; r < u; r++) n.add(e[r], t);

          return n;
        }, o.prototype.size = function () {
          return Object.getOwnPropertyNames(this._set).length;
        }, o.prototype.add = function (e, t) {
          const n = r.toSetString(e);
          const o = u.call(this._set, n);
          const i = this._array.length;
          o && !t || this._array.push(e), o || (this._set[n] = i);
        }, o.prototype.has = function (e) {
          const t = r.toSetString(e);
          return u.call(this._set, t);
        }, o.prototype.indexOf = function (e) {
          const t = r.toSetString(e);
          if (u.call(this._set, t)) return this._set[t];
          throw new Error(`"${e}" is not in the set.`);
        }, o.prototype.at = function (e) {
          if (e >= 0 && e < this._array.length) return this._array[e];
          throw new Error(`No element indexed by ${e}`);
        }, o.prototype.toArray = function () {
          return this._array.slice();
        }, t.ArraySet = o;
      }, function (e, t, n) {
        function r(e) {
          return Array.isArray(e) || (e = [e]), Promise.all(e.map(e => e.then(e => ({
            isFulfilled: !0,
            isRejected: !1,
            value: e,
          })).catch(e => ({
            isFulfilled: !1,
            isRejected: !0,
            reason: e,
          }))));
        }

        Object.defineProperty(t, '__esModule', {
          value: !0,
        }), t.settle = r, t.default = r;
      }, function (e, t) {
        e.exports = '!function(e){var t={};function n(r){if(t[r])return t[r].exports;var u=t[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var u in e)n.d(r,u,function(t){return e[t]}.bind(null,u));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=205)}([function(e,t,n){"use strict";e.exports=n(181)},function(e,t,n){var r=n(8),u=n(36).f,o=n(17),i=n(21),a=n(39),l=n(56),c=n(60);e.exports=function(e,t){var n,s,f,d,p,h=e.target,m=e.global,g=e.stat;if(n=m?r:g?r[h]||a(h,{}):(r[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=u(n,s))&&p.value:n[s],!c(m?s:h+(g?".":"#")+s,e.forced)&&void 0!==f){if(typeof d===typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&o(d,"sham",!0),i(n,s,d,e)}}},function(e,t,n){var r=n(11);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){e.exports=!1},function(e,t,n){var r=n(2),u=n(62),o=n(27),i=n(7),a=n(43),l=n(65),c=function(e,t){this.stopped=e,this.result=t};(e.exports=function(e,t,n,s,f){var d,p,h,m,g,v,D,y=i(t,n,s?2:1);if(f)d=e;else{if("function"!=typeof(p=a(e)))throw TypeError("Target is not iterable");if(u(p)){for(h=0,m=o(e.length);m>h;h++)if((g=s?y(r(D=e[h])[0],D[1]):y(e[h]))&&g instanceof c)return g;return new c(!1)}d=p.call(e)}for(v=d.next;!(D=v.call(d)).done;)if("object"==typeof(g=l(d,y,D.value,s))&&g&&g instanceof c)return g;return new c(!1)}).stop=function(e){return new c(!0,e)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(8),u=n(24),o=n(32),i=n(63),a=r.Symbol,l=u("wks");e.exports=function(e){return l[e]||(l[e]=i&&a[e]||(i?a:o)("Symbol."+e))}},function(e,t,n){var r=n(5);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,u){return e.call(t,n,r,u)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(35))},function(e,t,n){var r=n(57),u=n(12),o=n(78),i=n(14).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});u(t,e)||i(t,e,{value:o.f(e)})}},function(e,t,n){var r=n(57),u=n(8),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e])||o(u[e]):r[e]&&r[e][t]||u[e]&&u[e][t]}},function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(16),u=n(53),o=n(2),i=n(30),a=Object.defineProperty;t.f=r?a:function(e,t,n){if(o(e),t=i(t,!0),o(n),u)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(3),u=n(45);e.exports=r?u:function(e){return Map.prototype.entries.call(e)}},function(e,t,n){var r=n(13);e.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(16),u=n(14),o=n(23);e.exports=r?function(e,t,n){return u.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(2),u=n(5),o=n(6)("species");e.exports=function(e,t){var n,i=r(e).constructor;return void 0===i||void 0==(n=r(i)[o])?t:u(n)}},function(e,t,n){var r=n(3),u=n(45);e.exports=r?u:function(e){return Set.prototype.values.call(e)}},function(e,t,n){var r=n(52),u=n(38);e.exports=function(e){return r(u(e))}},function(e,t,n){var r=n(8),u=n(24),o=n(17),i=n(12),a=n(39),l=n(55),c=n(25),s=c.get,f=c.enforce,d=String(l).split("toString");u("inspectSource",(function(e){return l.call(e)})),(e.exports=function(e,t,n,u){var l=!!u&&!!u.unsafe,c=!!u&&!!u.enumerable,s=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),f(n).source=d.join("string"==typeof t?t:"")),e!==r?(l?!s&&e[t]&&(c=!0):delete e[t],c?e[t]=n:o(e,t,n)):c?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||l.call(this)}))},function(e,t,n){var r=n(14).f,u=n(12),o=n(6)("toStringTag");e.exports=function(e,t,n){e&&!u(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(3),u=n(90);(e.exports=function(e,t){return u[e]||(u[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.4.0",mode:r?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r,u,o,i=n(91),a=n(8),l=n(11),c=n(17),s=n(12),f=n(31),d=n(26),p=a.WeakMap;if(i){var h=new p,m=h.get,g=h.has,v=h.set;r=function(e,t){return v.call(h,e,t),t},u=function(e){return m.call(h,e)||{}},o=function(e){return g.call(h,e)}}else{var D=f("state");d[D]=!0,r=function(e,t){return c(e,D,t),t},u=function(e){return s(e,D)?e[D]:{}},o=function(e){return s(e,D)}}e.exports={set:r,get:u,has:o,enforce:function(e){return o(e)?u(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=u(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t){e.exports={}},function(e,t,n){var r=n(41),u=Math.min;e.exports=function(e){return e>0?u(r(e),9007199254740991):0}},function(e,t){e.exports={}},function(e,t,n){var r=n(38);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(11);e.exports=function(e,t){if(!r(e))return e;var n,u;if(t&&"function"==typeof(n=e.toString)&&!r(u=n.call(e)))return u;if("function"==typeof(n=e.valueOf)&&!r(u=n.call(e)))return u;if(!t&&"function"==typeof(n=e.toString)&&!r(u=n.call(e)))return u;throw TypeError("Can\'t convert object to primitive value")}},function(e,t,n){var r=n(24),u=n(32),o=r("keys");e.exports=function(e){return o[e]||(o[e]=u(e))}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(2),u=n(98),o=n(42),i=n(26),a=n(99),l=n(54),c=n(31)("IE_PROTO"),s=function(){},f=function(){var e,t=l("iframe"),n=o.length;for(t.style.display="none",a.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\\/script>"),e.close(),f=e.F;n--;)delete f.prototype[o[n]];return f()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[c]=e):n=f(),void 0===t?n:u(n,t)},i[c]=!0},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var u=[[{color:"0, 0, 0",class:"ansi-black"},{color:"187, 0, 0",class:"ansi-red"},{color:"0, 187, 0",class:"ansi-green"},{color:"187, 187, 0",class:"ansi-yellow"},{color:"0, 0, 187",class:"ansi-blue"},{color:"187, 0, 187",class:"ansi-magenta"},{color:"0, 187, 187",class:"ansi-cyan"},{color:"255,255,255",class:"ansi-white"}],[{color:"85, 85, 85",class:"ansi-bright-black"},{color:"255, 85, 85",class:"ansi-bright-red"},{color:"0, 255, 0",class:"ansi-bright-green"},{color:"255, 255, 85",class:"ansi-bright-yellow"},{color:"85, 85, 255",class:"ansi-bright-blue"},{color:"255, 85, 255",class:"ansi-bright-magenta"},{color:"85, 255, 255",class:"ansi-bright-cyan"},{color:"255, 255, 255",class:"ansi-bright-white"}]],o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fg=this.bg=this.fg_truecolor=this.bg_truecolor=null,this.bright=0}return r(e,null,[{key:"escapeForHtml",value:function(t){return(new e).escapeForHtml(t)}},{key:"linkify",value:function(t){return(new e).linkify(t)}},{key:"ansiToHtml",value:function(t,n){return(new e).ansiToHtml(t,n)}},{key:"ansiToJson",value:function(t,n){return(new e).ansiToJson(t,n)}},{key:"ansiToText",value:function(t){return(new e).ansiToText(t)}}]),r(e,[{key:"setupPalette",value:function(){this.PALETTE_COLORS=[];for(var e=0;e<2;++e)for(var t=0;t<8;++t)this.PALETTE_COLORS.push(u[e][t].color);for(var n=[0,95,135,175,215,255],r=function(e,t,r){return n[e]+", "+n[t]+", "+n[r]},o=0;o<6;++o)for(var i=0;i<6;++i)for(var a=0;a<6;++a)this.PALETTE_COLORS.push(r(o,i,a));for(var l=8,c=0;c<24;++c,l+=10)this.PALETTE_COLORS.push(r(l,l,l))}},{key:"escapeForHtml",value:function(e){return e.replace(/[&<>]/gm,(function(e){return"&"==e?"&amp;":"<"==e?"&lt;":">"==e?"&gt;":""}))}},{key:"linkify",value:function(e){return e.replace(/(https?:\\/\\/[^\\s]+)/gm,(function(e){return\'<a href="\'+e+\'">\'+e+"</a>"}))}},{key:"ansiToHtml",value:function(e,t){return this.process(e,t,!0)}},{key:"ansiToJson",value:function(e,t){return(t=t||{}).json=!0,t.clearLine=!1,this.process(e,t,!0)}},{key:"ansiToText",value:function(e){return this.process(e,{},!1)}},{key:"process",value:function(e,t,n){var r=this,u=e.split(/\\033\\[/),o=u.shift();void 0!==t&&null!==t||(t={}),t.clearLine=/\\r/.test(e);var i=u.map((function(e){return r.processChunk(e,t,n)}));if(t&&t.json){var a=this.processChunkJson("");return a.content=o,a.clearLine=t.clearLine,i.unshift(a),t.remove_empty&&(i=i.filter((function(e){return!e.isEmpty()}))),i}return i.unshift(o),i.join("")}},{key:"processChunkJson",value:function(e,t,n){var r=(t="undefined"==typeof t?{}:t).use_classes="undefined"!=typeof t.use_classes&&t.use_classes,o=t.key=r?"class":"color",i={content:e,fg:null,bg:null,fg_truecolor:null,bg_truecolor:null,clearLine:t.clearLine,decoration:null,was_processed:!1,isEmpty:function(){return!i.content}},a=e.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);if(!a)return i;i.content=a[4];var l=a[2].split(";");if(""!==a[1]||"m"!==a[3])return i;if(!n)return i;for(this.decoration=null;l.length>0;){var c=l.shift(),s=parseInt(c);if(isNaN(s)||0===s)this.fg=this.bg=this.decoration=null;else if(1===s)this.decoration="bold";else if(2===s)this.decoration="dim";else if(3==s)this.decoration="italic";else if(4==s)this.decoration="underline";else if(5==s)this.decoration="blink";else if(7===s)this.decoration="reverse";else if(8===s)this.decoration="hidden";else if(9===s)this.decoration="strikethrough";else if(39==s)this.fg=null;else if(49==s)this.bg=null;else if(s>=30&&s<38)this.fg=u[0][s%10][o];else if(s>=90&&s<98)this.fg=u[1][s%10][o];else if(s>=40&&s<48)this.bg=u[0][s%10][o];else if(s>=100&&s<108)this.bg=u[1][s%10][o];else if(38===s||48===s){var f=38===s;if(l.length>=1){var d=l.shift();if("5"===d&&l.length>=1){var p=parseInt(l.shift());if(p>=0&&p<=255)if(r){var h=p>=16?"ansi-palette-"+p:u[p>7?1:0][p%8].class;f?this.fg=h:this.bg=h}else this.PALETTE_COLORS||this.setupPalette(),f?this.fg=this.PALETTE_COLORS[p]:this.bg=this.PALETTE_COLORS[p]}else if("2"===d&&l.length>=3){var m=parseInt(l.shift()),g=parseInt(l.shift()),v=parseInt(l.shift());if(m>=0&&m<=255&&g>=0&&g<=255&&v>=0&&v<=255){var D=m+", "+g+", "+v;r?f?(this.fg="ansi-truecolor",this.fg_truecolor=D):(this.bg="ansi-truecolor",this.bg_truecolor=D):f?this.fg=D:this.bg=D}}}}}if(null===this.fg&&null===this.bg&&null===this.decoration)return i;return i.fg=this.fg,i.bg=this.bg,i.fg_truecolor=this.fg_truecolor,i.bg_truecolor=this.bg_truecolor,i.decoration=this.decoration,i.was_processed=!0,i}},{key:"processChunk",value:function(e,t,n){var r=this;t=t||{};var u=this.processChunkJson(e,t,n);if(t.json)return u;if(u.isEmpty())return"";if(!u.was_processed)return u.content;var o=t.use_classes,i=[],a=[],l={},c=function(e){var t=[],n=void 0;for(n in e)e.hasOwnProperty(n)&&t.push("data-"+n+\'="\'+r.escapeForHtml(e[n])+\'"\');return t.length>0?" "+t.join(" "):""};return u.fg&&(o?(a.push(u.fg+"-fg"),null!==u.fg_truecolor&&(l["ansi-truecolor-fg"]=u.fg_truecolor,u.fg_truecolor=null)):i.push("color:rgb("+u.fg+")")),u.bg&&(o?(a.push(u.bg+"-bg"),null!==u.bg_truecolor&&(l["ansi-truecolor-bg"]=u.bg_truecolor,u.bg_truecolor=null)):i.push("background-color:rgb("+u.bg+")")),u.decoration&&(o?a.push("ansi-"+u.decoration):"bold"===u.decoration?i.push("font-weight:bold"):"dim"===u.decoration?i.push("opacity:0.5"):"italic"===u.decoration?i.push("font-style:italic"):"reverse"===u.decoration?i.push("filter:invert(100%)"):"hidden"===u.decoration?i.push("visibility:hidden"):"strikethrough"===u.decoration?i.push("text-decoration:line-through"):i.push("text-decoration:"+u.decoration)),o?\'<span class="\'+a.join(" ")+\'"\'+c(l)+">"+u.content+"</span>":\'<span style="\'+i.join(";")+\'"\'+c(l)+">"+u.content+"</span>"}}]),e}();e.exports=o},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"===typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(16),u=n(51),o=n(23),i=n(20),a=n(30),l=n(12),c=n(53),s=Object.getOwnPropertyDescriptor;t.f=r?s:function(e,t){if(e=i(e),t=a(t,!0),c)try{return s(e,t)}catch(e){}if(l(e,t))return o(!u.f.call(e,t),e[t])}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can\'t call method on "+e);return e}},function(e,t,n){var r=n(8),u=n(17);e.exports=function(e,t){try{u(r,e,t)}catch(n){r[e]=t}return t}},function(e,t,n){var r=n(58),u=n(42).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,u)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){var r=n(64),u=n(28),o=n(6)("iterator");e.exports=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||u[r(e)]}},function(e,t,n){"use strict";var r=n(1),u=n(101),o=n(72),i=n(68),a=n(22),l=n(17),c=n(21),s=n(6),f=n(3),d=n(28),p=n(71),h=p.IteratorPrototype,m=p.BUGGY_SAFARI_ITERATORS,g=s("iterator"),v=function(){return this};e.exports=function(e,t,n,s,p,D,y){u(n,t,s);var b,E,C,A=function(e){if(e===p&&k)return k;if(!m&&e in x)return x[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},F=t+" Iterator",w=!1,x=e.prototype,B=x[g]||x["@@iterator"]||p&&x[p],k=!m&&B||A(p),S="Array"==t&&x.entries||B;if(S&&(b=o(S.call(new e)),h!==Object.prototype&&b.next&&(f||o(b)===h||(i?i(b,h):"function"!=typeof b[g]&&l(b,g,v)),a(b,F,!0,!0),f&&(d[F]=v))),"values"==p&&B&&"values"!==B.name&&(w=!0,k=function(){return B.call(this)}),f&&!y||x[g]===k||l(x,g,k),d[t]=k,p)if(E={values:A("values"),keys:D?k:A("keys"),entries:A("entries")},y)for(C in E)!m&&!w&&C in x||c(x,C,E[C]);else r({target:t,proto:!0,forced:m||w},E);return E}},function(e,t,n){var r=n(2),u=n(43);e.exports=function(e){var t=u(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return r(t.call(e))}},function(e,t,n){var r=n(37);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function i(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=i(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))u.call(n,s)&&(l[s]=n[s]);if(r){a=r(n);for(var f=0;f<a.length;f++)o.call(n,a[f])&&(l[a[f]]=n[a[f]])}}return l}},function(e,t){var n,r,u=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"===typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"===typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=a(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}u.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||s||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},u.title="browser",u.browser=!0,u.env={},u.argv=[],u.version="",u.versions={},u.on=m,u.addListener=m,u.once=m,u.off=m,u.removeListener=m,u.removeAllListeners=m,u.emit=m,u.prependListener=m,u.prependOnceListener=m,u.listeners=function(e){return[]},u.binding=function(e){throw new Error("process.binding is not supported")},u.cwd=function(){return"/"},u.chdir=function(e){throw new Error("process.chdir is not supported")},u.umask=function(){return 0}},function(e,t,n){"use strict";!function e(){if("undefined"!==typeof{}&&"function"===typeof{}.checkDCE){0;try{({}).checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(182)},function(e,t,n){"use strict";var r=n(1),u=n(8),o=n(60),i=n(21),a=n(61),l=n(4),c=n(66),s=n(11),f=n(13),d=n(67),p=n(22),h=n(96);e.exports=function(e,t,n,m,g){var v=u[e],D=v&&v.prototype,y=v,b=m?"set":"add",E={},C=function(e){var t=D[e];i(D,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(g&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return g&&!s(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(g&&!s(e))&&t.call(this,0===e?0:e)}:function(e,n){return t.call(this,0===e?0:e,n),this})};if(o(e,"function"!=typeof v||!(g||D.forEach&&!f((function(){(new v).entries().next()})))))y=n.getConstructor(t,e,m,b),a.REQUIRED=!0;else if(o(e,!0)){var A=new y,F=A[b](g?{}:-0,1)!=A,w=f((function(){A.has(1)})),x=d((function(e){new v(e)})),B=!g&&f((function(){for(var e=new v,t=5;t--;)e[b](t,t);return!e.has(-0)}));x||((y=t((function(t,n){c(t,y,e);var r=h(new v,t,y);return void 0!=n&&l(n,r[b],r,m),r}))).prototype=D,D.constructor=y),(w||B)&&(C("delete"),C("has"),m&&C("get")),(B||F)&&C(b),g&&D.clear&&delete D.clear}return E[e]=y,r({global:!0,forced:y!=v},E),p(y,e),g||n.setStrong(y,e,m),y}},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,u=Object.getOwnPropertyDescriptor,o=u&&!r.call({1:2},1);t.f=o?function(e){var t=u(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(13),u=n(37),o="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==u(e)?o.call(e,""):Object(e)}:Object},function(e,t,n){var r=n(16),u=n(13),o=n(54);e.exports=!r&&!u((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(8),u=n(11),o=r.document,i=u(o)&&u(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(24);e.exports=r("native-function-to-string",Function.toString)},function(e,t,n){var r=n(12),u=n(92),o=n(36),i=n(14);e.exports=function(e,t){for(var n=u(t),a=i.f,l=o.f,c=0;c<n.length;c++){var s=n[c];r(e,s)||a(e,s,l(t,s))}}},function(e,t,n){e.exports=n(8)},function(e,t,n){var r=n(12),u=n(20),o=n(93).indexOf,i=n(26);e.exports=function(e,t){var n,a=u(e),l=0,c=[];for(n in a)!r(i,n)&&r(a,n)&&c.push(n);for(;t.length>l;)r(a,n=t[l++])&&(~o(c,n)||c.push(n));return c}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(13),u=/#|\\.prototype\\./,o=function(e,t){var n=a[i(e)];return n==c||n!=l&&("function"==typeof t?r(t):!!t)},i=o.normalize=function(e){return String(e).replace(u,".").toLowerCase()},a=o.data={},l=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},function(e,t,n){var r=n(26),u=n(11),o=n(12),i=n(14).f,a=n(32),l=n(95),c=a("meta"),s=0,f=Object.isExtensible||function(){return!0},d=function(e){i(e,c,{value:{objectID:"O"+ ++s,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!u(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,c)){if(!f(e))return"F";if(!t)return"E";d(e)}return e[c].objectID},getWeakData:function(e,t){if(!o(e,c)){if(!f(e))return!0;if(!t)return!1;d(e)}return e[c].weakData},onFreeze:function(e){return l&&p.REQUIRED&&f(e)&&!o(e,c)&&d(e),e}};r[c]=!0},function(e,t,n){var r=n(6),u=n(28),o=r("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(u.Array===e||i[o]===e)}},function(e,t,n){var r=n(13);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){var r=n(37),u=n(6)("toStringTag"),o="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),u))?n:o?r(t):"Object"==(i=r(t))&&"function"==typeof t.callee?"Arguments":i}},function(e,t,n){var r=n(2);e.exports=function(e,t,n,u){try{return u?t(r(n)[0],n[1]):t(n)}catch(t){var o=e.return;throw void 0!==o&&r(o.call(e)),t}}},function(e,t){e.exports=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e}},function(e,t,n){var r=n(6)("iterator"),u=!1;try{var o=0,i={next:function(){return{done:!!o++}},return:function(){u=!0}};i[r]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!u)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},e(o)}catch(e){}return n}},function(e,t,n){var r=n(2),u=n(97);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,o){return r(n),u(o),t?e.call(n,o):n.__proto__=o,n}}():void 0)},function(e,t,n){"use strict";var r=n(14).f,u=n(33),o=n(100),i=n(7),a=n(66),l=n(4),c=n(44),s=n(103),f=n(16),d=n(61).fastKey,p=n(25),h=p.set,m=p.getterFor;e.exports={getConstructor:function(e,t,n,c){var s=e((function(e,r){a(e,s,t),h(e,{type:t,index:u(null),first:void 0,last:void 0,size:0}),f||(e.size=0),void 0!=r&&l(r,e[c],e,n)})),p=m(t),g=function(e,t,n){var r,u,o=p(e),i=v(e,t);return i?i.value=n:(o.last=i={index:u=d(t,!0),key:t,value:n,previous:r=o.last,next:void 0,removed:!1},o.first||(o.first=i),r&&(r.next=i),f?o.size++:e.size++,"F"!==u&&(o.index[u]=i)),e},v=function(e,t){var n,r=p(e),u=d(t);if("F"!==u)return r.index[u];for(n=r.first;n;n=n.next)if(n.key==t)return n};return o(s.prototype,{clear:function(){for(var e=p(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=p(this),n=v(this,e);if(n){var r=n.next,u=n.previous;delete t.index[n.index],n.removed=!0,u&&(u.next=r),r&&(r.previous=u),t.first==n&&(t.first=r),t.last==n&&(t.last=u),f?t.size--:this.size--}return!!n},forEach:function(e){for(var t,n=p(this),r=i(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!v(this,e)}}),o(s.prototype,n?{get:function(e){var t=v(this,e);return t&&t.value},set:function(e,t){return g(this,0===e?0:e,t)}}:{add:function(e){return g(this,e=0===e?0:e,e)}}),f&&r(s.prototype,"size",{get:function(){return p(this).size}}),s},setStrong:function(e,t,n){var r=t+" Iterator",u=m(t),o=m(r);c(e,t,(function(e,t){h(this,{type:r,target:e,state:u(e),kind:t,last:void 0})}),(function(){for(var e=o(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),s(t)}}},function(e,t,n){var r=n(58),u=n(42);e.exports=Object.keys||function(e){return r(e,u)}},function(e,t,n){"use strict";var r,u,o,i=n(72),a=n(17),l=n(12),c=n(6),s=n(3),f=c("iterator"),d=!1;[].keys&&("next"in(o=[].keys())?(u=i(i(o)))!==Object.prototype&&(r=u):d=!0),void 0==r&&(r={}),s||l(r,f)||a(r,f,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},function(e,t,n){var r=n(12),u=n(29),o=n(31),i=n(102),a=o("IE_PROTO"),l=Object.prototype;e.exports=i?Object.getPrototypeOf:function(e){return e=u(e),r(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,t,n){var r=n(21),u=n(104),o=Object.prototype;u!==o.toString&&r(o,"toString",u,{unsafe:!0})},function(e,t,n){"use strict";var r=n(106).charAt,u=n(25),o=n(44),i=u.set,a=u.getterFor("String Iterator");o(String,"String",(function(e){i(this,{type:"String Iterator",string:String(e),index:0})}),(function(){var e,t=a(this),n=t.string,u=t.index;return u>=n.length?{value:void 0,done:!0}:(e=r(n,u),t.index+=e.length,{value:e,done:!1})}))},function(e,t,n){"use strict";var r=n(2),u=n(5);e.exports=function(){for(var e,t=r(this),n=u(t.delete),o=!0,i=0,a=arguments.length;i<a;i++)e=n.call(t,arguments[i]),o=o&&e;return!!o}},function(e,t,n){"use strict";var r=n(5),u=n(7),o=n(4);e.exports=function(e){var t,n,i,a,l=arguments.length,c=l>1?arguments[1]:void 0;return r(this),(t=void 0!==c)&&r(c),void 0==e?new this:(n=[],t?(i=0,a=u(c,l>2?arguments[2]:void 0,2),o(e,(function(e){n.push(a(e,i++))}))):o(e,n.push,n),new this(n))}},function(e,t,n){"use strict";e.exports=function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}},function(e,t,n){t.f=n(6)},function(e,t,n){var r=n(11),u=n(46),o=n(6)("species");e.exports=function(e,t){var n;return u(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!u(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){"use strict";var r=n(30),u=n(14),o=n(23);e.exports=function(e,t,n){var i=r(t);i in e?u.f(e,i,o(0,n)):e[i]=n}},function(e,t,n){var r,u,o=n(8),i=n(167),a=o.process,l=a&&a.versions,c=l&&l.v8;c?u=(r=c.split("."))[0]+r[1]:i&&(!(r=i.match(/Edge\\/(\\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\\/(\\d+)/))&&(u=r[1]),e.exports=u&&+u},function(e,t,n){"use strict";var r=n(176);function u(){}var o=null,i={};function a(e){if("object"!==typeof this)throw new TypeError("Promises must be constructed via new");if("function"!==typeof e)throw new TypeError("Promise constructor\'s argument is not a function");this._h=0,this._i=0,this._j=null,this._k=null,e!==u&&p(e,this)}function l(e,t){for(;3===e._i;)e=e._j;if(a._l&&a._l(e),0===e._i)return 0===e._h?(e._h=1,void(e._k=t)):1===e._h?(e._h=2,void(e._k=[e._k,t])):void e._k.push(t);!function(e,t){r((function(){var n=1===e._i?t.onFulfilled:t.onRejected;if(null!==n){var r=function(e,t){try{return e(t)}catch(e){return o=e,i}}(n,e._j);r===i?s(t.promise,o):c(t.promise,r)}else 1===e._i?c(t.promise,e._j):s(t.promise,e._j)}))}(e,t)}function c(e,t){if(t===e)return s(e,new TypeError("A promise cannot be resolved with itself."));if(t&&("object"===typeof t||"function"===typeof t)){var n=function(e){try{return e.then}catch(e){return o=e,i}}(t);if(n===i)return s(e,o);if(n===e.then&&t instanceof a)return e._i=3,e._j=t,void f(e);if("function"===typeof n)return void p(n.bind(t),e)}e._i=1,e._j=t,f(e)}function s(e,t){e._i=2,e._j=t,a._m&&a._m(e,t),f(e)}function f(e){if(1===e._h&&(l(e,e._k),e._k=null),2===e._h){for(var t=0;t<e._k.length;t++)l(e,e._k[t]);e._k=null}}function d(e,t,n){this.onFulfilled="function"===typeof e?e:null,this.onRejected="function"===typeof t?t:null,this.promise=n}function p(e,t){var n=!1,r=function(e,t,n){try{e(t,n)}catch(e){return o=e,i}}(e,(function(e){n||(n=!0,c(t,e))}),(function(e){n||(n=!0,s(t,e))}));n||r!==i||(n=!0,s(t,o))}e.exports=a,a._l=null,a._m=null,a._n=u,a.prototype.then=function(e,t){if(this.constructor!==a)return function(e,t,n){return new e.constructor((function(r,o){var i=new a(u);i.then(r,o),l(e,new d(t,n,i))}))}(this,e,t);var n=new a(u);return l(this,new d(e,t,n)),n}},function(e,t){var n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],r={},u={};function o(){}!function(e,t){var r=n.length,u=[];for(;r--;){var o,i=n[r],a=i[0],l=i[1],c=l[0],s=c<32||c>126||62===c||60===c||38===c||34===c||39===c;if(s&&(o=t[c]=t[c]||{}),l[1]){var f=l[1];e[a]=String.fromCharCode(c)+String.fromCharCode(f),u.push(s&&(o[f]=a))}else e[a]=String.fromCharCode(c),u.push(s&&(o[""]=a))}}(r,u),o.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var n;if("#"===t.charAt(0)){var u="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(u)||u<-32768||u>65535||(n=String.fromCharCode(u))}else n=r[t];return n||e})):""},o.decode=function(e){return(new o).decode(e)},o.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var o=u[e.charCodeAt(r)];if(o){var i=o[e.charCodeAt(r+1)];if(i?r++:i=o[""],i){n+="&"+i+";",r++;continue}}n+=e.charAt(r),r++}return n},o.encode=function(e){return(new o).encode(e)},o.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var o=e.charCodeAt(r),i=u[o];if(i){var a=i[e.charCodeAt(r+1)];if(a?r++:a=i[""],a){n+="&"+a+";",r++;continue}}n+=o<32||o>126?"&#"+o+";":e.charAt(r),r++}return n},o.encodeNonUTF=function(e){return(new o).encodeNonUTF(e)},o.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=e.charCodeAt(r);u<=255?n+=e[r++]:(n+="&#"+u+";",r++)}return n},o.encodeNonASCII=function(e){return(new o).encodeNonASCII(e)},e.exports=o},function(e,t){!function(){"use strict";var t,n,r,u,o,i;function a(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(Math.floor((e-65536)/1024)+55296)+String.fromCharCode((e-65536)%1024+56320)}for(n={NonAsciiIdentifierStart:/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,NonAsciiIdentifierPart:/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/},t={NonAsciiIdentifierStart:/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,NonAsciiIdentifierPart:/[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/},r=[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279],u=new Array(128),i=0;i<128;++i)u[i]=i>=97&&i<=122||i>=65&&i<=90||36===i||95===i;for(o=new Array(128),i=0;i<128;++i)o[i]=i>=97&&i<=122||i>=65&&i<=90||i>=48&&i<=57||36===i||95===i;e.exports={isDecimalDigit:function(e){return 48<=e&&e<=57},isHexDigit:function(e){return 48<=e&&e<=57||97<=e&&e<=102||65<=e&&e<=70},isOctalDigit:function(e){return e>=48&&e<=55},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&r.indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStartES5:function(e){return e<128?u[e]:n.NonAsciiIdentifierStart.test(a(e))},isIdentifierPartES5:function(e){return e<128?o[e]:n.NonAsciiIdentifierPart.test(a(e))},isIdentifierStartES6:function(e){return e<128?u[e]:t.NonAsciiIdentifierStart.test(a(e))},isIdentifierPartES6:function(e){return e<128?o[e]:t.NonAsciiIdentifierPart.test(a(e))}}}()},function(e,t,n){var r=n(201),u={};for(var o in r)r.hasOwnProperty(o)&&(u[r[o]]=o);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var a in i)if(i.hasOwnProperty(a)){if(!("channels"in i[a]))throw new Error("missing channels property: "+a);if(!("labels"in i[a]))throw new Error("missing channel labels property: "+a);if(i[a].labels.length!==i[a].channels)throw new Error("channel and label counts mismatch: "+a);var l=i[a].channels,c=i[a].labels;delete i[a].channels,delete i[a].labels,Object.defineProperty(i[a],"channels",{value:l}),Object.defineProperty(i[a],"labels",{value:c})}i.rgb.hsl=function(e){var t,n,r=e[0]/255,u=e[1]/255,o=e[2]/255,i=Math.min(r,u,o),a=Math.max(r,u,o),l=a-i;return a===i?t=0:r===a?t=(u-o)/l:u===a?t=2+(o-r)/l:o===a&&(t=4+(r-u)/l),(t=Math.min(60*t,360))<0&&(t+=360),n=(i+a)/2,[t,100*(a===i?0:n<=.5?l/(a+i):l/(2-a-i)),100*n]},i.rgb.hsv=function(e){var t,n,r,u,o,i=e[0]/255,a=e[1]/255,l=e[2]/255,c=Math.max(i,a,l),s=c-Math.min(i,a,l),f=function(e){return(c-e)/6/s+.5};return 0===s?u=o=0:(o=s/c,t=f(i),n=f(a),r=f(l),i===c?u=r-n:a===c?u=1/3+t-r:l===c&&(u=2/3+n-t),u<0?u+=1:u>1&&(u-=1)),[360*u,100*o,100*c]},i.rgb.hwb=function(e){var t=e[0],n=e[1],r=e[2];return[i.rgb.hsl(e)[0],100*(1/255*Math.min(t,Math.min(n,r))),100*(r=1-1/255*Math.max(t,Math.max(n,r)))]},i.rgb.cmyk=function(e){var t,n=e[0]/255,r=e[1]/255,u=e[2]/255;return[100*((1-n-(t=Math.min(1-n,1-r,1-u)))/(1-t)||0),100*((1-r-t)/(1-t)||0),100*((1-u-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var t=u[e];if(t)return t;var n,o,i,a=1/0;for(var l in r)if(r.hasOwnProperty(l)){var c=r[l],s=(o=e,i=c,Math.pow(o[0]-i[0],2)+Math.pow(o[1]-i[1],2)+Math.pow(o[2]-i[2],2));s<a&&(a=s,n=l)}return n},i.keyword.rgb=function(e){return r[e]},i.rgb.xyz=function(e){var t=e[0]/255,n=e[1]/255,r=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),n=t[0],r=t[1],u=t[2];return r/=100,u/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(u=u>.008856?Math.pow(u,1/3):7.787*u+16/116))]},i.hsl.rgb=function(e){var t,n,r,u,o,i=e[0]/360,a=e[1]/100,l=e[2]/100;if(0===a)return[o=255*l,o,o];t=2*l-(n=l<.5?l*(1+a):l+a-l*a),u=[0,0,0];for(var c=0;c<3;c++)(r=i+1/3*-(c-1))<0&&r++,r>1&&r--,o=6*r<1?t+6*(n-t)*r:2*r<1?n:3*r<2?t+(n-t)*(2/3-r)*6:t,u[c]=255*o;return u},i.hsl.hsv=function(e){var t=e[0],n=e[1]/100,r=e[2]/100,u=n,o=Math.max(r,.01);return n*=(r*=2)<=1?r:2-r,u*=o<=1?o:2-o,[t,100*(0===r?2*u/(o+u):2*n/(r+n)),100*((r+n)/2)]},i.hsv.rgb=function(e){var t=e[0]/60,n=e[1]/100,r=e[2]/100,u=Math.floor(t)%6,o=t-Math.floor(t),i=255*r*(1-n),a=255*r*(1-n*o),l=255*r*(1-n*(1-o));switch(r*=255,u){case 0:return[r,l,i];case 1:return[a,r,i];case 2:return[i,r,l];case 3:return[i,a,r];case 4:return[l,i,r];case 5:return[r,i,a]}},i.hsv.hsl=function(e){var t,n,r,u=e[0],o=e[1]/100,i=e[2]/100,a=Math.max(i,.01);return r=(2-o)*i,n=o*a,[u,100*(n=(n/=(t=(2-o)*a)<=1?t:2-t)||0),100*(r/=2)]},i.hwb.rgb=function(e){var t,n,r,u,o,i,a,l=e[0]/360,c=e[1]/100,s=e[2]/100,f=c+s;switch(f>1&&(c/=f,s/=f),r=6*l-(t=Math.floor(6*l)),0!==(1&t)&&(r=1-r),u=c+r*((n=1-s)-c),t){default:case 6:case 0:o=n,i=u,a=c;break;case 1:o=u,i=n,a=c;break;case 2:o=c,i=n,a=u;break;case 3:o=c,i=u,a=n;break;case 4:o=u,i=c,a=n;break;case 5:o=n,i=c,a=u}return[255*o,255*i,255*a]},i.cmyk.rgb=function(e){var t=e[0]/100,n=e[1]/100,r=e[2]/100,u=e[3]/100;return[255*(1-Math.min(1,t*(1-u)+u)),255*(1-Math.min(1,n*(1-u)+u)),255*(1-Math.min(1,r*(1-u)+u))]},i.xyz.rgb=function(e){var t,n,r,u=e[0]/100,o=e[1]/100,i=e[2]/100;return n=-.9689*u+1.8758*o+.0415*i,r=.0557*u+-.204*o+1.057*i,t=(t=3.2406*u+-1.5372*o+-.4986*i)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,[255*(t=Math.min(Math.max(0,t),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]},i.xyz.lab=function(e){var t=e[0],n=e[1],r=e[2];return n/=100,r/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(t-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},i.lab.xyz=function(e){var t,n,r,u=e[0];t=e[1]/500+(n=(u+16)/116),r=n-e[2]/200;var o=Math.pow(n,3),i=Math.pow(t,3),a=Math.pow(r,3);return n=o>.008856?o:(n-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,r=a>.008856?a:(r-16/116)/7.787,[t*=95.047,n*=100,r*=108.883]},i.lab.lch=function(e){var t,n=e[0],r=e[1],u=e[2];return(t=360*Math.atan2(u,r)/2/Math.PI)<0&&(t+=360),[n,Math.sqrt(r*r+u*u),t]},i.lch.lab=function(e){var t,n=e[0],r=e[1];return t=e[2]/360*2*Math.PI,[n,r*Math.cos(t),r*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],n=e[1],r=e[2],u=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(u=Math.round(u/50)))return 30;var o=30+(Math.round(r/255)<<2|Math.round(n/255)<<1|Math.round(t/255));return 2===u&&(o+=60),o},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],n=e[1],r=e[2];return t===n&&n===r?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var n;return e-=16,[Math.floor(e/36)/5*255,Math.floor((n=e%36)/6)/5*255,n%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var n=t[0];3===t[0].length&&(n=n.split("").map((function(e){return e+e})).join(""));var r=parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},i.rgb.hcg=function(e){var t,n=e[0]/255,r=e[1]/255,u=e[2]/255,o=Math.max(Math.max(n,r),u),i=Math.min(Math.min(n,r),u),a=o-i;return t=a<=0?0:o===n?(r-u)/a%6:o===r?2+(u-n)/a:4+(n-r)/a+4,t/=6,[360*(t%=1),100*a,100*(a<1?i/(1-a):0)]},i.hsl.hcg=function(e){var t=e[1]/100,n=e[2]/100,r=1,u=0;return(r=n<.5?2*t*n:2*t*(1-n))<1&&(u=(n-.5*r)/(1-r)),[e[0],100*r,100*u]},i.hsv.hcg=function(e){var t=e[1]/100,n=e[2]/100,r=t*n,u=0;return r<1&&(u=(n-r)/(1-r)),[e[0],100*r,100*u]},i.hcg.rgb=function(e){var t=e[0]/360,n=e[1]/100,r=e[2]/100;if(0===n)return[255*r,255*r,255*r];var u,o=[0,0,0],i=t%1*6,a=i%1,l=1-a;switch(Math.floor(i)){case 0:o[0]=1,o[1]=a,o[2]=0;break;case 1:o[0]=l,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=a;break;case 3:o[0]=0,o[1]=l,o[2]=1;break;case 4:o[0]=a,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=l}return u=(1-n)*r,[255*(n*o[0]+u),255*(n*o[1]+u),255*(n*o[2]+u)]},i.hcg.hsv=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t),r=0;return n>0&&(r=t/n),[e[0],100*r,100*n]},i.hcg.hsl=function(e){var t=e[1]/100,n=e[2]/100*(1-t)+.5*t,r=0;return n>0&&n<.5?r=t/(2*n):n>=.5&&n<1&&(r=t/(2*(1-n))),[e[0],100*r,100*n]},i.hcg.hwb=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},i.hwb.hcg=function(e){var t=e[1]/100,n=1-e[2]/100,r=n-t,u=0;return r<1&&(u=(n-r)/(1-r)),[e[0],100*r,100*u]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},function(e,t,n){e.exports={XmlEntities:n(185),Html4Entities:n(186),Html5Entities:n(83),AllHtmlEntities:n(83)}},function(e,t,n){"use strict";(function(e){function r(){var e=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(187));return r=function(){return e},e}Object.defineProperty(t,"__esModule",{value:!0}),t.codeFrameColumns=i,t.default=function(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!u){u=!0;var a="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(e.emitWarning)e.emitWarning(a,"DeprecationWarning");else new Error(a).name="DeprecationWarning",console.warn(new Error(a))}return r=Math.max(r,0),i(t,{start:{column:r,line:n}},o)};var u=!1;var o=/\\r\\n|[\\n\\r\\u2028\\u2029]/;function i(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=(n.highlightCode||n.forceColor)&&(0,r().shouldHighlight)(n),i=(0,r().getChalk)(n),a=function(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}(i),l=function(e,t){return u?e(t):t},c=function(e,t,n){var r=Object.assign({column:0,line:-1},e.start),u=Object.assign({},r,e.end),o=n||{},i=o.linesAbove,a=void 0===i?2:i,l=o.linesBelow,c=void 0===l?3:l,s=r.line,f=r.column,d=u.line,p=u.column,h=Math.max(s-(a+1),0),m=Math.min(t.length,d+c);-1===s&&(h=0),-1===d&&(m=t.length);var g=d-s,v={};if(g)for(var D=0;D<=g;D++){var y=D+s;if(f)if(0===D){var b=t[y-1].length;v[y]=[f,b-f+1]}else if(D===g)v[y]=[0,p];else{var E=t[y-D].length;v[y]=[0,E]}else v[y]=!0}else v[s]=f===p?!f||[f,0]:[f,p-f];return{start:h,end:m,markerLines:v}}(t,e.split(o),n),s=c.start,f=c.end,d=c.markerLines,p=t.start&&"number"===typeof t.start.column,h=String(f).length,m=(u?(0,r().default)(e,n):e).split(o).slice(s,f).map((function(e,t){var r=s+1+t,u=" ".concat(r).slice(-h),o=" ".concat(u," | "),i=d[r],c=!d[r+1];if(i){var f="";if(Array.isArray(i)){var p=e.slice(0,Math.max(i[0]-1,0)).replace(/[^\\t]/g," "),m=i[1]||1;f=["\\n ",l(a.gutter,o.replace(/\\d/g," ")),p,l(a.marker,"^").repeat(m)].join(""),c&&n.message&&(f+=" "+l(a.message,n.message))}return[l(a.marker,">"),l(a.gutter,o),e,f].join("")}return" ".concat(l(a.gutter,o)).concat(e)})).join("\\n");return n.message&&!p&&(m="".concat(" ".repeat(h+1)).concat(n.message,"\\n").concat(m)),u?i.reset(m):m}}).call(this,n(48))},function(e,t,n){"use strict";n(89),n(73),n(105),n(74),n(107),n(108),n(109),n(110),n(111),n(112),n(113),n(114),n(116),n(117),n(118),n(119),n(120),n(121),n(122),n(123),n(124),n(125),n(127),n(128),n(129),n(130),n(131),n(132),n(133),n(134),n(135),n(136),n(137),n(138),n(139),n(140),n(141),n(142),n(143),n(144),n(148),n(179).polyfill()},function(e,t,n){"use strict";var r=n(50),u=n(69);e.exports=r("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),u,!0)},function(e,t,n){var r=n(8),u=n(39),o=r["__core-js_shared__"]||u("__core-js_shared__",{});e.exports=o},function(e,t,n){var r=n(8),u=n(55),o=r.WeakMap;e.exports="function"===typeof o&&/native code/.test(u.call(o))},function(e,t,n){var r=n(10),u=n(40),o=n(59),i=n(2);e.exports=r("Reflect","ownKeys")||function(e){var t=u.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(20),u=n(27),o=n(94),i=function(e){return function(t,n,i){var a,l=r(t),c=u(l.length),s=o(i,c);if(e&&n!=n){for(;c>s;)if((a=l[s++])!=a)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},function(e,t,n){var r=n(41),u=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?u(n+t,0):o(n,t)}},function(e,t,n){var r=n(13);e.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,t,n){var r=n(11),u=n(68);e.exports=function(e,t,n){var o,i;return u&&"function"==typeof(o=t.constructor)&&o!==n&&r(i=o.prototype)&&i!==n.prototype&&u(e,i),e}},function(e,t,n){var r=n(11);e.exports=function(e){if(!r(e)&&null!==e)throw TypeError("Can\'t set "+String(e)+" as a prototype");return e}},function(e,t,n){var r=n(16),u=n(14),o=n(2),i=n(70);e.exports=r?Object.defineProperties:function(e,t){o(e);for(var n,r=i(t),a=r.length,l=0;a>l;)u.f(e,n=r[l++],t[n]);return e}},function(e,t,n){var r=n(10);e.exports=r("document","documentElement")},function(e,t,n){var r=n(21);e.exports=function(e,t,n){for(var u in t)r(e,u,t[u],n);return e}},function(e,t,n){"use strict";var r=n(71).IteratorPrototype,u=n(33),o=n(23),i=n(22),a=n(28),l=function(){return this};e.exports=function(e,t,n){var c=t+" Iterator";return e.prototype=u(r,{next:o(1,n)}),i(e,c,!1,!0),a[c]=l,e}},function(e,t,n){var r=n(13);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,n){"use strict";var r=n(10),u=n(14),o=n(6),i=n(16),a=o("species");e.exports=function(e){var t=r(e),n=u.f;i&&t&&!t[a]&&n(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,n){"use strict";var r=n(64),u={};u[n(6)("toStringTag")]="z",e.exports="[object z]"!==String(u)?function(){return"[object "+r(this)+"]"}:u.toString},function(e,t,n){"use strict";var r=n(50),u=n(69);e.exports=r("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),u)},function(e,t,n){var r=n(41),u=n(38),o=function(e){return function(t,n){var o,i,a=String(u(t)),l=r(n),c=a.length;return l<0||l>=c?e?"":void 0:(o=a.charCodeAt(l))<55296||o>56319||l+1===c||(i=a.charCodeAt(l+1))<56320||i>57343?e?a.charAt(l):o:e?a.slice(l,l+2):i-56320+(o-55296<<10)+65536}};e.exports={codeAt:o(!1),charAt:o(!0)}},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(75);r({target:"Map",proto:!0,real:!0,forced:u},{deleteAll:function(){return o.apply(this,arguments)}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(7),a=n(15),l=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{every:function(e){var t=o(this),n=a(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return!l(n,(function(e,n){if(!r(n,e,t))return l.stop()}),void 0,!0,!0).stopped}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(7),c=n(18),s=n(15),f=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{filter:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),u=new(c(t,o("Map"))),d=a(u.set);return f(n,(function(e,n){r(n,e,t)&&d.call(u,e,n)}),void 0,!0,!0),u}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(7),a=n(15),l=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{find:function(e){var t=o(this),n=a(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e,n){if(r(n,e,t))return l.stop(n)}),void 0,!0,!0).result}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(7),a=n(15),l=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{findKey:function(e){var t=o(this),n=a(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e,n){if(r(n,e,t))return l.stop(e)}),void 0,!0,!0).result}})},function(e,t,n){n(1)({target:"Map",stat:!0},{from:n(76)})},function(e,t,n){"use strict";var r=n(1),u=n(4),o=n(5);r({target:"Map",stat:!0},{groupBy:function(e,t){var n=new this;o(t);var r=o(n.has),i=o(n.get),a=o(n.set);return u(e,(function(e){var u=t(e);r.call(n,u)?i.call(n,u).push(e):a.call(n,u,[e])})),n}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(15),a=n(115),l=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{includes:function(e){return l(i(o(this)),(function(t,n){if(a(n,e))return l.stop()}),void 0,!0,!0).stopped}})},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(1),u=n(4),o=n(5);r({target:"Map",stat:!0},{keyBy:function(e,t){var n=new this;o(t);var r=o(n.set);return u(e,(function(e){r.call(n,t(e),e)})),n}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(15),a=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{keyOf:function(e){return a(i(o(this)),(function(t,n){if(n===e)return a.stop(t)}),void 0,!0,!0).result}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(7),c=n(18),s=n(15),f=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{mapKeys:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),u=new(c(t,o("Map"))),d=a(u.set);return f(n,(function(e,n){d.call(u,r(n,e,t),n)}),void 0,!0,!0),u}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(7),c=n(18),s=n(15),f=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{mapValues:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),u=new(c(t,o("Map"))),d=a(u.set);return f(n,(function(e,n){d.call(u,e,r(n,e,t))}),void 0,!0,!0),u}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(5),a=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{merge:function(e){for(var t=o(this),n=i(t.set),r=0;r<arguments.length;)a(arguments[r++],n,t,!0);return t}})},function(e,t,n){n(1)({target:"Map",stat:!0},{of:n(77)})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(5),a=n(15),l=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{reduce:function(e){var t=o(this),n=a(t),r=arguments.length<2,u=r?void 0:arguments[1];if(i(e),l(n,(function(n,o){r?(r=!1,u=o):u=e(u,o,n,t)}),void 0,!0,!0),r)throw TypeError("Reduce of empty map with no initial value");return u}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(7),a=n(15),l=n(4);r({target:"Map",proto:!0,real:!0,forced:u},{some:function(e){var t=o(this),n=a(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e,n){if(r(n,e,t))return l.stop()}),void 0,!0,!0).stopped}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(5);r({target:"Map",proto:!0,real:!0,forced:u},{update:function(e,t){var n=o(this),r=arguments.length;i(t);var u=n.has(e);if(!u&&r<3)throw TypeError("Updating absent value");var a=u?n.get(e):i(r>2?arguments[2]:void 0)(e,n);return n.set(e,t(a,e,n)),n}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(126);r({target:"Set",proto:!0,real:!0,forced:u},{addAll:function(){return o.apply(this,arguments)}})},function(e,t,n){"use strict";var r=n(2),u=n(5);e.exports=function(){for(var e=r(this),t=u(e.add),n=0,o=arguments.length;n<o;n++)t.call(e,arguments[n]);return e}},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(75);r({target:"Set",proto:!0,real:!0,forced:u},{deleteAll:function(){return o.apply(this,arguments)}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(18),c=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{difference:function(e){var t=i(this),n=new(l(t,o("Set")))(t),r=a(n.delete);return c(e,(function(e){r.call(n,e)})),n}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(7),a=n(19),l=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{every:function(e){var t=o(this),n=a(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return!l(n,(function(e){if(!r(e,e,t))return l.stop()}),void 0,!1,!0).stopped}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(7),c=n(18),s=n(19),f=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{filter:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),u=new(c(t,o("Set"))),d=a(u.add);return f(n,(function(e){r(e,e,t)&&d.call(u,e)}),void 0,!1,!0),u}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(7),a=n(19),l=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{find:function(e){var t=o(this),n=a(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e){if(r(e,e,t))return l.stop(e)}),void 0,!1,!0).result}})},function(e,t,n){n(1)({target:"Set",stat:!0},{from:n(76)})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(18),c=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{intersection:function(e){var t=i(this),n=new(l(t,o("Set"))),r=a(t.has),u=a(n.add);return c(e,(function(e){r.call(t,e)&&u.call(n,e)})),n}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(5),a=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{isDisjointFrom:function(e){var t=o(this),n=i(t.has);return!a(e,(function(e){if(!0===n.call(t,e))return a.stop()})).stopped}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(45),c=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{isSubsetOf:function(e){var t=l(this),n=i(e),r=n.has;return"function"!=typeof r&&(n=new(o("Set"))(e),r=a(n.has)),!c(t,(function(e){if(!1===r.call(n,e))return c.stop()}),void 0,!1,!0).stopped}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(5),a=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{isSupersetOf:function(e){var t=o(this),n=i(t.has);return!a(e,(function(e){if(!1===n.call(t,e))return a.stop()})).stopped}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(19),a=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{join:function(e){var t=o(this),n=i(t),r=void 0===e?",":String(e),u=[];return a(n,u.push,u,!1,!0),u.join(r)}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(7),c=n(18),s=n(19),f=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{map:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),u=new(c(t,o("Set"))),d=a(u.add);return f(n,(function(e){d.call(u,r(e,e,t))}),void 0,!1,!0),u}})},function(e,t,n){n(1)({target:"Set",stat:!0},{of:n(77)})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(5),a=n(19),l=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{reduce:function(e){var t=o(this),n=a(t),r=arguments.length<2,u=r?void 0:arguments[1];if(i(e),l(n,(function(n){r?(r=!1,u=n):u=e(u,n,n,t)}),void 0,!1,!0),r)throw TypeError("Reduce of empty set with no initial value");return u}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(2),i=n(7),a=n(19),l=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{some:function(e){var t=o(this),n=a(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e){if(r(e,e,t))return l.stop()}),void 0,!1,!0).stopped}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(18),c=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{symmetricDifference:function(e){var t=i(this),n=new(l(t,o("Set")))(t),r=a(n.delete),u=a(n.add);return c(e,(function(e){r.call(n,e)||u.call(n,e)})),n}})},function(e,t,n){"use strict";var r=n(1),u=n(3),o=n(10),i=n(2),a=n(5),l=n(18),c=n(4);r({target:"Set",proto:!0,real:!0,forced:u},{union:function(e){var t=i(this),n=new(l(t,o("Set")))(t);return c(e,a(n.add),n),n}})},function(e,t,n){var r=n(8),u=n(145),o=n(146),i=n(17),a=n(6),l=a("iterator"),c=a("toStringTag"),s=o.values;for(var f in u){var d=r[f],p=d&&d.prototype;if(p){if(p[l]!==s)try{i(p,l,s)}catch(e){p[l]=s}if(p[c]||i(p,c,f),u[f])for(var h in o)if(p[h]!==o[h])try{i(p,h,o[h])}catch(e){p[h]=o[h]}}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){"use strict";var r=n(20),u=n(147),o=n(28),i=n(25),a=n(44),l=i.set,c=i.getterFor("Array Iterator");e.exports=a(Array,"Array",(function(e,t){l(this,{type:"Array Iterator",target:r(e),index:0,kind:t})}),(function(){var e=c(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values"),o.Arguments=o.Array,u("keys"),u("values"),u("entries")},function(e,t,n){var r=n(6),u=n(33),o=n(17),i=r("unscopables"),a=Array.prototype;void 0==a[i]&&o(a,i,u(null)),e.exports=function(e){a[i][e]=!0}},function(e,t,n){"use strict";n(149),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(168),n(170),n(171),n(73),n(74),n(172),n(173),n(174),"undefined"===typeof Promise&&(n(175).enable(),self.Promise=n(177)),"undefined"!==typeof window&&n(178),Object.assign=n(47)},function(e,t,n){"use strict";var r=n(1),u=n(8),o=n(10),i=n(3),a=n(16),l=n(63),c=n(13),s=n(12),f=n(46),d=n(11),p=n(2),h=n(29),m=n(20),g=n(30),v=n(23),D=n(33),y=n(70),b=n(40),E=n(150),C=n(59),A=n(36),F=n(14),w=n(51),x=n(17),B=n(21),k=n(24),S=n(31),T=n(26),_=n(32),P=n(6),O=n(78),N=n(9),j=n(22),R=n(25),M=n(151).forEach,I=S("hidden"),L=P("toPrimitive"),q=R.set,U=R.getterFor("Symbol"),z=Object.prototype,H=u.Symbol,V=o("JSON","stringify"),W=A.f,$=F.f,G=E.f,Q=w.f,K=k("symbols"),Y=k("op-symbols"),X=k("string-to-symbol-registry"),J=k("symbol-to-string-registry"),Z=k("wks"),ee=u.QObject,te=!ee||!ee.prototype||!ee.prototype.findChild,ne=a&&c((function(){return 7!=D($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=W(z,t);r&&delete z[t],$(e,t,n),r&&e!==z&&$(z,t,r)}:$,re=function(e,t){var n=K[e]=D(H.prototype);return q(n,{type:"Symbol",tag:e,description:t}),a||(n.description=t),n},ue=l&&"symbol"==typeof H.iterator?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof H},oe=function(e,t,n){e===z&&oe(Y,t,n),p(e);var r=g(t,!0);return p(n),s(K,r)?(n.enumerable?(s(e,I)&&e[I][r]&&(e[I][r]=!1),n=D(n,{enumerable:v(0,!1)})):(s(e,I)||$(e,I,v(1,{})),e[I][r]=!0),ne(e,r,n)):$(e,r,n)},ie=function(e,t){p(e);var n=m(t),r=y(n).concat(se(n));return M(r,(function(t){a&&!ae.call(n,t)||oe(e,t,n[t])})),e},ae=function(e){var t=g(e,!0),n=Q.call(this,t);return!(this===z&&s(K,t)&&!s(Y,t))&&(!(n||!s(this,t)||!s(K,t)||s(this,I)&&this[I][t])||n)},le=function(e,t){var n=m(e),r=g(t,!0);if(n!==z||!s(K,r)||s(Y,r)){var u=W(n,r);return!u||!s(K,r)||s(n,I)&&n[I][r]||(u.enumerable=!0),u}},ce=function(e){var t=G(m(e)),n=[];return M(t,(function(e){s(K,e)||s(T,e)||n.push(e)})),n},se=function(e){var t=e===z,n=G(t?Y:m(e)),r=[];return M(n,(function(e){!s(K,e)||t&&!s(z,e)||r.push(K[e])})),r};(l||(B((H=function(){if(this instanceof H)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=_(e),n=function e(n){this===z&&e.call(Y,n),s(this,I)&&s(this[I],t)&&(this[I][t]=!1),ne(this,t,v(1,n))};return a&&te&&ne(z,t,{configurable:!0,set:n}),re(t,e)}).prototype,"toString",(function(){return U(this).tag})),w.f=ae,F.f=oe,A.f=le,b.f=E.f=ce,C.f=se,a&&($(H.prototype,"description",{configurable:!0,get:function(){return U(this).description}}),i||B(z,"propertyIsEnumerable",ae,{unsafe:!0})),O.f=function(e){return re(P(e),e)}),r({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:H}),M(y(Z),(function(e){N(e)})),r({target:"Symbol",stat:!0,forced:!l},{for:function(e){var t=String(e);if(s(X,t))return X[t];var n=H(t);return X[t]=n,J[n]=t,n},keyFor:function(e){if(!ue(e))throw TypeError(e+" is not a symbol");if(s(J,e))return J[e]},useSetter:function(){te=!0},useSimple:function(){te=!1}}),r({target:"Object",stat:!0,forced:!l,sham:!a},{create:function(e,t){return void 0===t?D(e):ie(D(e),t)},defineProperty:oe,defineProperties:ie,getOwnPropertyDescriptor:le}),r({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:ce,getOwnPropertySymbols:se}),r({target:"Object",stat:!0,forced:c((function(){C.f(1)}))},{getOwnPropertySymbols:function(e){return C.f(h(e))}}),V)&&r({target:"JSON",stat:!0,forced:!l||c((function(){var e=H();return"[null]"!=V([e])||"{}"!=V({a:e})||"{}"!=V(Object(e))}))},{stringify:function(e,t,n){for(var r,u=[e],o=1;arguments.length>o;)u.push(arguments[o++]);if(r=t,(d(t)||void 0!==e)&&!ue(e))return f(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!ue(t))return t}),u[1]=t,V.apply(null,u)}});H.prototype[L]||x(H.prototype,L,H.prototype.valueOf),j(H,"Symbol"),T[I]=!0},function(e,t,n){var r=n(20),u=n(40).f,o={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==o.call(e)?function(e){try{return u(e)}catch(e){return i.slice()}}(e):u(r(e))}},function(e,t,n){var r=n(7),u=n(52),o=n(29),i=n(27),a=n(79),l=[].push,c=function(e){var t=1==e,n=2==e,c=3==e,s=4==e,f=6==e,d=5==e||f;return function(p,h,m,g){for(var v,D,y=o(p),b=u(y),E=r(h,m,3),C=i(b.length),A=0,F=g||a,w=t?F(p,C):n?F(p,0):void 0;C>A;A++)if((d||A in b)&&(D=E(v=b[A],A,y),e))if(t)w[A]=D;else if(D)switch(e){case 3:return!0;case 5:return v;case 6:return A;case 2:l.call(w,v)}else if(s)return!1;return f?-1:c||s?s:w}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},function(e,t,n){"use strict";var r=n(1),u=n(16),o=n(8),i=n(12),a=n(11),l=n(14).f,c=n(56),s=o.Symbol;if(u&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new s(e):void 0===e?s():s(e);return""===e&&(f[t]=!0),t};c(d,s);var p=d.prototype=s.prototype;p.constructor=d;var h=p.toString,m="Symbol(test)"==String(s("test")),g=/^Symbol\\((.*)\\)[^)]+$/;l(p,"description",{configurable:!0,get:function(){var e=a(this)?this.valueOf():this,t=h.call(e);if(i(f,e))return"";var n=m?t.slice(7,-1):t.replace(g,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:d})}},function(e,t,n){n(9)("asyncIterator")},function(e,t,n){n(9)("hasInstance")},function(e,t,n){n(9)("isConcatSpreadable")},function(e,t,n){n(9)("iterator")},function(e,t,n){n(9)("match")},function(e,t,n){n(9)("replace")},function(e,t,n){n(9)("search")},function(e,t,n){n(9)("species")},function(e,t,n){n(9)("split")},function(e,t,n){n(9)("toPrimitive")},function(e,t,n){n(9)("toStringTag")},function(e,t,n){n(9)("unscopables")},function(e,t,n){"use strict";var r=n(1),u=n(13),o=n(46),i=n(11),a=n(29),l=n(27),c=n(80),s=n(79),f=n(166),d=n(6),p=n(81),h=d("isConcatSpreadable"),m=p>=51||!u((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),g=f("concat"),v=function(e){if(!i(e))return!1;var t=e[h];return void 0!==t?!!t:o(e)};r({target:"Array",proto:!0,forced:!m||!g},{concat:function(e){var t,n,r,u,o,i=a(this),f=s(i,0),d=0;for(t=-1,r=arguments.length;t<r;t++)if(o=-1===t?i:arguments[t],v(o)){if(d+(u=l(o.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<u;n++,d++)n in o&&c(f,d,o[n])}else{if(d>=9007199254740991)throw TypeError("Maximum allowed index exceeded");c(f,d++,o)}return f.length=d,f}})},function(e,t,n){var r=n(13),u=n(6),o=n(81),i=u("species");e.exports=function(e){return o>=51||!r((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,n){var r=n(10);e.exports=r("navigator","userAgent")||""},function(e,t,n){var r=n(1),u=n(169);r({target:"Array",stat:!0,forced:!n(67)((function(e){Array.from(e)}))},{from:u})},function(e,t,n){"use strict";var r=n(7),u=n(29),o=n(65),i=n(62),a=n(27),l=n(80),c=n(43);e.exports=function(e){var t,n,s,f,d,p=u(e),h="function"==typeof this?this:Array,m=arguments.length,g=m>1?arguments[1]:void 0,v=void 0!==g,D=0,y=c(p);if(v&&(g=r(g,m>2?arguments[2]:void 0,2)),void 0==y||h==Array&&i(y))for(n=new h(t=a(p.length));t>D;D++)l(n,D,v?g(p[D],D):p[D]);else for(d=(f=y.call(p)).next,n=new h;!(s=d.call(f)).done;D++)l(n,D,v?o(f,g,[s.value,D],!0):s.value);return n.length=D,n}},function(e,t,n){var r=n(8);n(22)(r.JSON,"JSON",!0)},function(e,t,n){n(22)(Math,"Math",!0)},function(e,t,n){n(9)("dispose")},function(e,t,n){n(9)("observable")},function(e,t,n){n(9)("patternMatch")},function(e,t,n){"use strict";var r=n(82),u=[ReferenceError,TypeError,RangeError],o=!1;function i(){o=!1,r._l=null,r._m=null}function a(e,t){return t.some((function(t){return e instanceof t}))}t.disable=i,t.enable=function(e){e=e||{},o&&i();o=!0;var t=0,n=0,l={};function c(t){(e.allRejections||a(l[t].error,e.whitelist||u))&&(l[t].displayId=n++,e.onUnhandled?(l[t].logged=!0,e.onUnhandled(l[t].displayId,l[t].error)):(l[t].logged=!0,function(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((t&&(t.stack||t))+"").split("\\n").forEach((function(e){console.warn("  "+e)}))}(l[t].displayId,l[t].error)))}r._l=function(t){2===t._i&&l[t._o]&&(l[t._o].logged?function(t){l[t].logged&&(e.onHandled?e.onHandled(l[t].displayId,l[t].error):l[t].onUnhandled||(console.warn("Promise Rejection Handled (id: "+l[t].displayId+"):"),console.warn(\'  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id \'+l[t].displayId+".")))}(t._o):clearTimeout(l[t._o].timeout),delete l[t._o])},r._m=function(e,n){0===e._h&&(e._o=t++,l[e._o]={displayId:null,error:n,timeout:setTimeout(c.bind(null,e._o),a(n,u)?100:2e3),logged:!1})}}},function(e,t,n){"use strict";(function(t){function n(e){u.length||(r(),!0),u[u.length]=e}e.exports=n;var r,u=[],o=0,i=1024;function a(){for(;o<u.length;){var e=o;if(o+=1,u[e].call(),o>i){for(var t=0,n=u.length-o;t<n;t++)u[t]=u[t+o];u.length-=o,o=0}}u.length=0,o=0,!1}var l,c,s,f="undefined"!==typeof t?t:self,d=f.MutationObserver||f.WebKitMutationObserver;function p(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}"function"===typeof d?(l=1,c=new d(a),s=document.createTextNode(""),c.observe(s,{characterData:!0}),r=function(){l=-l,s.data=l}):r=p(a),n.requestFlush=r,n.makeRequestCallFromTimer=p}).call(this,n(35))},function(e,t,n){"use strict";var r=n(82);e.exports=r;var u=s(!0),o=s(!1),i=s(null),a=s(void 0),l=s(0),c=s("");function s(e){var t=new r(r._n);return t._i=1,t._j=e,t}r.resolve=function(e){if(e instanceof r)return e;if(null===e)return i;if(void 0===e)return a;if(!0===e)return u;if(!1===e)return o;if(0===e)return l;if(""===e)return c;if("object"===typeof e||"function"===typeof e)try{var t=e.then;if("function"===typeof t)return new r(t.bind(e))}catch(e){return new r((function(t,n){n(e)}))}return s(e)},r.all=function(e){var t=Array.prototype.slice.call(e);return new r((function(e,n){if(0===t.length)return e([]);var u=t.length;function o(i,a){if(a&&("object"===typeof a||"function"===typeof a)){if(a instanceof r&&a.then===r.prototype.then){for(;3===a._i;)a=a._j;return 1===a._i?o(i,a._j):(2===a._i&&n(a._j),void a.then((function(e){o(i,e)}),n))}var l=a.then;if("function"===typeof l)return void new r(l.bind(a)).then((function(e){o(i,e)}),n)}t[i]=a,0===--u&&e(t)}for(var i=0;i<t.length;i++)o(i,t[i])}))},r.reject=function(e){return new r((function(t,n){n(e)}))},r.race=function(e){return new r((function(t,n){e.forEach((function(e){r.resolve(e).then(t,n)}))}))},r.prototype.catch=function(e){return this.then(null,e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"Headers",(function(){return c})),n.d(t,"Request",(function(){return g})),n.d(t,"Response",(function(){return D})),n.d(t,"DOMException",(function(){return b})),n.d(t,"fetch",(function(){return E}));var r={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(r.arrayBuffer)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],o=ArrayBuffer.isView||function(e){return e&&u.indexOf(Object.prototype.toString.call(e))>-1};function i(e){if("string"!==typeof e&&(e=String(e)),/[^a-z0-9\\-#$%&\'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function a(e){return"string"!==typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return r.iterable&&(t[Symbol.iterator]=function(){return t}),t}function c(e){this.map={},e instanceof c?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function s(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function f(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function d(e){var t=new FileReader,n=f(t);return t.readAsArrayBuffer(e),n}function p(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function h(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"===typeof e?this._bodyText=e:r.blob&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:r.formData&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:r.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():r.arrayBuffer&&r.blob&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=p(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):r.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(e)||o(e))?this._bodyArrayBuffer=p(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"===typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r.blob&&(this.blob=function(){var e=s(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?s(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(d)}),this.text=function(){var e,t,n,r=s(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=f(t),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r.formData&&(this.formData=function(){return this.text().then(v)}),this.json=function(){return this.text().then(JSON.parse)},this}c.prototype.append=function(e,t){e=i(e),t=a(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},c.prototype.delete=function(e){delete this.map[i(e)]},c.prototype.get=function(e){return e=i(e),this.has(e)?this.map[e]:null},c.prototype.has=function(e){return this.map.hasOwnProperty(i(e))},c.prototype.set=function(e,t){this.map[i(e)]=a(t)},c.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},c.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},c.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},c.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},r.iterable&&(c.prototype[Symbol.iterator]=c.prototype.entries);var m=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(e,t){var n,r,u=(t=t||{}).body;if(e instanceof g){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new c(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,u||null==e._bodyInit||(u=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new c(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),m.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&u)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(u)}function v(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\\+/g," "),u=n.join("=").replace(/\\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(u))}})),t}function D(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new c(t.headers),this.url=t.url||"",this._initBody(e)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},h.call(g.prototype),h.call(D.prototype),D.prototype.clone=function(){return new D(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},D.error=function(){var e=new D(null,{status:0,statusText:""});return e.type="error",e};var y=[301,302,303,307,308];D.redirect=function(e,t){if(-1===y.indexOf(t))throw new RangeError("Invalid status code");return new D(null,{status:t,headers:{location:e}})};var b=self.DOMException;try{new b}catch(e){(b=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),b.prototype.constructor=b}function E(e,t){return new Promise((function(n,u){var o=new g(e,t);if(o.signal&&o.signal.aborted)return u(new b("Aborted","AbortError"));var i=new XMLHttpRequest;function a(){i.abort()}i.onload=function(){var e,t,r={status:i.status,statusText:i.statusText,headers:(e=i.getAllResponseHeaders()||"",t=new c,e.replace(/\\r?\\n[\\t ]+/g," ").split(/\\r?\\n/).forEach((function(e){var n=e.split(":"),r=n.shift().trim();if(r){var u=n.join(":").trim();t.append(r,u)}})),t)};r.url="responseURL"in i?i.responseURL:r.headers.get("X-Request-URL");var u="response"in i?i.response:i.responseText;n(new D(u,r))},i.onerror=function(){u(new TypeError("Network request failed"))},i.ontimeout=function(){u(new TypeError("Network request failed"))},i.onabort=function(){u(new b("Aborted","AbortError"))},i.open(o.method,o.url,!0),"include"===o.credentials?i.withCredentials=!0:"omit"===o.credentials&&(i.withCredentials=!1),"responseType"in i&&r.blob&&(i.responseType="blob"),o.headers.forEach((function(e,t){i.setRequestHeader(t,e)})),o.signal&&(o.signal.addEventListener("abort",a),i.onreadystatechange=function(){4===i.readyState&&o.signal.removeEventListener("abort",a)}),i.send("undefined"===typeof o._bodyInit?null:o._bodyInit)}))}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=c,self.Request=g,self.Response=D)},function(e,t,n){(function(t){for(var r=n(180),u="undefined"===typeof window?t:window,o=["moz","webkit"],i="AnimationFrame",a=u["request"+i],l=u["cancel"+i]||u["cancelRequest"+i],c=0;!a&&c<o.length;c++)a=u[o[c]+"Request"+i],l=u[o[c]+"Cancel"+i]||u[o[c]+"CancelRequest"+i];if(!a||!l){var s=0,f=0,d=[];a=function(e){if(0===d.length){var t=r(),n=Math.max(0,1e3/60-(t-s));s=n+t,setTimeout((function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(s)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(n))}return d.push({handle:++f,callback:e,cancelled:!1}),f},l=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return a.call(u,e)},e.exports.cancel=function(){l.apply(u,arguments)},e.exports.polyfill=function(e){e||(e=u),e.requestAnimationFrame=a,e.cancelAnimationFrame=l}}).call(this,n(35))},function(e,t,n){(function(t){(function(){var n,r,u,o,i,a;"undefined"!==typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!==typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},r=t.hrtime,o=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),a=1e9*t.uptime(),i=o-a):Date.now?(e.exports=function(){return Date.now()-u},u=Date.now()):(e.exports=function(){return(new Date).getTime()-u},u=(new Date).getTime())}).call(this)}).call(this,n(48))},function(e,t,n){"use strict";var r=n(47),u="function"===typeof Symbol&&Symbol.for,o=u?Symbol.for("react.element"):60103,i=u?Symbol.for("react.portal"):60106,a=u?Symbol.for("react.fragment"):60107,l=u?Symbol.for("react.strict_mode"):60108,c=u?Symbol.for("react.profiler"):60114,s=u?Symbol.for("react.provider"):60109,f=u?Symbol.for("react.context"):60110,d=u?Symbol.for("react.forward_ref"):60112,p=u?Symbol.for("react.suspense"):60113;u&&Symbol.for("react.suspense_list");var h=u?Symbol.for("react.memo"):60115,m=u?Symbol.for("react.lazy"):60116;u&&Symbol.for("react.fundamental"),u&&Symbol.for("react.responder"),u&&Symbol.for("react.scope");var g="function"===typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||D}function E(){}function C(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||D}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=b.prototype;var A=C.prototype=new E;A.constructor=C,r(A,b.prototype),A.isPureReactComponent=!0;var F={current:null},w={current:null},x=Object.prototype.hasOwnProperty,B={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,u={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,r)&&!B.hasOwnProperty(r)&&(u[r]=t[r]);var l=arguments.length-2;if(1===l)u.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];u.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===u[r]&&(u[r]=l[r]);return{$$typeof:o,type:e,key:i,ref:a,props:u,_owner:w.current}}function S(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var T=/\\/+/g,_=[];function P(e,t,n,r){if(_.length){var u=_.pop();return u.result=e,u.keyPrefix=t,u.func=n,u.context=r,u.count=0,u}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function O(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>_.length&&_.push(e)}function N(e,t,n){return null==e?0:function e(t,n,r,u){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var l=!1;if(null===t)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case i:l=!0}}if(l)return r(u,t,""===n?"."+j(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+j(a=t[c],c);l+=e(a,s,r,u)}else if(null===t||"object"!==typeof t?s=null:s="function"===typeof(s=g&&t[g]||t["@@iterator"])?s:null,"function"===typeof s)for(t=s.call(t),c=0;!(a=t.next()).done;)l+=e(a=a.value,s=n+j(a,c++),r,u);else if("object"===a)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function j(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,u=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,(function(e){return e})):null!=e&&(S(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,u+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n)),r.push(e))}function I(e,t,n,r,u){var o="";null!=n&&(o=(""+n).replace(T,"$&/")+"/"),N(e,M,t=P(t,o,r,u)),O(t)}function L(){var e=F.current;if(null===e)throw Error(v(321));return e}var q={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;N(e,R,t=P(null,null,t,n)),O(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return I(e,t,null,(function(e){return e})),t},only:function(e){if(!S(e))throw Error(v(143));return e}},createRef:function(){return{current:null}},Component:b,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return L().useCallback(e,t)},useContext:function(e,t){return L().useContext(e,t)},useEffect:function(e,t){return L().useEffect(e,t)},useImperativeHandle:function(e,t,n){return L().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return L().useLayoutEffect(e,t)},useMemo:function(e,t){return L().useMemo(e,t)},useReducer:function(e,t,n){return L().useReducer(e,t,n)},useRef:function(e){return L().useRef(e)},useState:function(e){return L().useState(e)},Fragment:a,Profiler:c,StrictMode:l,Suspense:p,createElement:k,cloneElement:function(e,t,n){if(null===e||void 0===e)throw Error(v(267,e));var u=r({},e.props),i=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)x.call(t,s)&&!B.hasOwnProperty(s)&&(u[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)u.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];u.children=c}return{$$typeof:o,type:e.type,key:i,ref:a,props:u,_owner:l}},createFactory:function(e){var t=k.bind(null,e);return t.type=e,t},isValidElement:S,version:"16.11.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r}},U={default:q},z=U&&q||U;e.exports=z.default||z},function(e,t,n){"use strict";var r=n(0),u=n(47),o=n(183);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var a=null,l={};function c(){if(a)for(var e in l){var t=l[e],n=a.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!f[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in f[n]=t,n=t.eventTypes){var u=void 0,o=n[r],c=t,p=r;if(d.hasOwnProperty(p))throw Error(i(99,p));d[p]=o;var h=o.phasedRegistrationNames;if(h){for(u in h)h.hasOwnProperty(u)&&s(h[u],c,p);u=!0}else o.registrationName?(s(o.registrationName,c,p),u=!0):u=!1;if(!u)throw Error(i(98,r,e))}}}}function s(e,t,n){if(p[e])throw Error(i(100,e));p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function m(e,t,n,r,u,o,i,a,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var g=!1,v=null,D=!1,y=null,b={onError:function(e){g=!0,v=e}};function E(e,t,n,r,u,o,i,a,l){g=!1,v=null,m.apply(b,arguments)}var C=null,A=null,F=null;function w(e,t,n){var r=e.type||"unknown-event";e.currentTarget=F(n),function(e,t,n,r,u,o,a,l,c){if(E.apply(this,arguments),g){if(!g)throw Error(i(198));var s=v;g=!1,v=null,D||(D=!0,y=s)}}(r,t,void 0,e),e.currentTarget=null}function x(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function B(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var k=null;function S(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)w(e,t[r],n[r]);else t&&w(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function T(e){if(null!==e&&(k=x(k,e)),e=k,k=null,e){if(B(e,S),k)throw Error(i(95));if(D)throw e=y,D=!1,y=null,e}}var _={injectEventPluginOrder:function(e){if(a)throw Error(i(101));a=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw Error(i(102,t));l[t]=r,n=!0}}n&&c()}};function P(e,t){var n=e.stateNode;if(!n)return null;var r=C(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!==typeof n)throw Error(i(231,t,typeof n));return n}var O=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;O.hasOwnProperty("ReactCurrentDispatcher")||(O.ReactCurrentDispatcher={current:null}),O.hasOwnProperty("ReactCurrentBatchConfig")||(O.ReactCurrentBatchConfig={suspense:null});var N=/^(.*)[\\\\\\/]/,j="function"===typeof Symbol&&Symbol.for,R=j?Symbol.for("react.element"):60103,M=j?Symbol.for("react.portal"):60106,I=j?Symbol.for("react.fragment"):60107,L=j?Symbol.for("react.strict_mode"):60108,q=j?Symbol.for("react.profiler"):60114,U=j?Symbol.for("react.provider"):60109,z=j?Symbol.for("react.context"):60110,H=j?Symbol.for("react.concurrent_mode"):60111,V=j?Symbol.for("react.forward_ref"):60112,W=j?Symbol.for("react.suspense"):60113,$=j?Symbol.for("react.suspense_list"):60120,G=j?Symbol.for("react.memo"):60115,Q=j?Symbol.for("react.lazy"):60116;j&&Symbol.for("react.fundamental"),j&&Symbol.for("react.responder"),j&&Symbol.for("react.scope");var K="function"===typeof Symbol&&Symbol.iterator;function Y(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=K&&e[K]||e["@@iterator"])?e:null}function X(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case I:return"Fragment";case M:return"Portal";case q:return"Profiler";case L:return"StrictMode";case W:return"Suspense";case $:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case z:return"Context.Consumer";case U:return"Context.Provider";case V:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case G:return X(e.type);case Q:if(e=1===e._status?e._result:null)return X(e)}return null}function J(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,u=e._debugSource,o=X(e.type);n=null,r&&(n=X(r.type)),r=o,o="",u?o=" (at "+u.fileName.replace(N,"")+":"+u.lineNumber+")":n&&(o=" (created by "+n+")"),n="\\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var Z=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=A(e)){if("function"!==typeof ee)throw Error(i(280));var t=C(e.stateNode);ee(e.stateNode,e.type,t)}}function ue(e){te?ne?ne.push(e):ne=[e]:te=e}function oe(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ie(e,t){return e(t)}function ae(e,t,n,r){return e(t,n,r)}function le(){}var ce=ie,se=!1,fe=!1;function de(){null===te&&null===ne||(le(),oe())}new Map;var pe=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ge={};function ve(e,t,n,r,u,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=u,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var De={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){De[e]=new ve(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];De[t]=new ve(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){De[e]=new ve(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){De[e]=new ve(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){De[e]=new ve(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){De[e]=new ve(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){De[e]=new ve(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){De[e]=new ve(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){De[e]=new ve(e,5,!1,e.toLowerCase(),null,!1)}));var ye=/[\\-:]([a-z])/g;function be(e){return e[1].toUpperCase()}function Ee(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Ce(e,t,n,r){var u=De.hasOwnProperty(t)?De[t]:null;(null!==u?0===u.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||"undefined"===typeof t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,u,r)&&(n=null),r||null===u?function(e){return!!he.call(ge,e)||!he.call(me,e)&&(pe.test(e)?ge[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):u.mustUseProperty?e[u.propertyName]=null===n?3!==u.type&&"":n:(t=u.attributeName,r=u.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(u=u.type)||4===u&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Ae(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Fe(e){e._valueTracker||(e._valueTracker=function(e){var t=Ae(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof n&&"function"===typeof n.get&&"function"===typeof n.set){var u=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return u.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ae(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function xe(e,t){var n=t.checked;return u({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Be(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Ee(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ke(e,t){null!=(t=t.checked)&&Ce(e,"checked",t,!1)}function Se(e,t){ke(e,t);var n=Ee(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_e(e,t.type,n):t.hasOwnProperty("defaultValue")&&_e(e,t.type,Ee(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _e(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=u({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Oe(e,t,n,r){if(e=e.options,t){t={};for(var u=0;u<n.length;u++)t["$"+n[u]]=!0;for(n=0;n<e.length;n++)u=t.hasOwnProperty("$"+e[n].value),e[n].selected!==u&&(e[n].selected=u),u&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Ee(n),t=null,u=0;u<e.length;u++){if(e[u].value===n)return e[u].selected=!0,void(r&&(e[u].defaultSelected=!0));null!==t||e[u].disabled||(t=e[u])}null!==t&&(t.selected=!0)}}function Ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return u({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function je(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(i(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(i(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:Ee(n)}}function Re(e,t){var n=Ee(t.value),r=Ee(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Me(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(ye,be);De[t]=new ve(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(ye,be);De[t]=new ve(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(ye,be);De[t]=new ve(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){De[e]=new ve(e,1,!1,e.toLowerCase(),null,!1)})),De.xlinkHref=new ve("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){De[e]=new ve(e,1,!1,e.toLowerCase(),null,!0)}));var Ie={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function qe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ue,ze=function(e){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,u){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ie.svg||"innerHTML"in e)e.innerHTML=t;else{for((Ue=Ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function He(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ve(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},$e={},Ge={};function Qe(e){if($e[e])return $e[e];if(!We[e])return e;var t,n=We[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ge)return $e[e]=n[t];return e}Z&&(Ge=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);var Ke=Qe("animationend"),Ye=Qe("animationiteration"),Xe=Qe("animationstart"),Je=Qe("transitionend"),Ze="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!==(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(i(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var u=n.return;if(null===u)break;var o=u.alternate;if(null===o){if(null!==(r=u.return)){n=r;continue}break}if(u.child===o.child){for(o=u.child;o;){if(o===n)return nt(u),e;if(o===r)return nt(u),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=u,r=o;else{for(var a=!1,l=u.child;l;){if(l===n){a=!0,n=u,r=o;break}if(l===r){a=!0,r=u,n=o;break}l=l.sibling}if(!a){for(l=o.child;l;){if(l===n){a=!0,n=o,r=u;break}if(l===r){a=!0,r=o,n=u;break}l=l.sibling}if(!a)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ut,ot,it,at=!1,lt=[],ct=null,st=null,ft=null,dt=new Map,pt=new Map,ht=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),gt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function vt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function Dt(e,t){switch(e){case"focus":case"blur":ct=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":dt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":pt.delete(t.pointerId)}}function yt(e,t,n,r,u){return null===e||e.nativeEvent!==u?(e=vt(t,n,r,u),null!==t&&(null!==(t=pr(t))&&ot(t)),e):(e.eventSystemFlags|=r,e)}function bt(e){var t=dr(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){it(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Et(e){if(null!==e.blockedOn)return!1;var t=_n(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=pr(t);return null!==n&&ot(n),e.blockedOn=t,!1}return!0}function Ct(e,t,n){Et(e)&&n.delete(t)}function At(){for(at=!1;0<lt.length;){var e=lt[0];if(null!==e.blockedOn){null!==(e=pr(e.blockedOn))&&ut(e);break}var t=_n(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:lt.shift()}null!==ct&&Et(ct)&&(ct=null),null!==st&&Et(st)&&(st=null),null!==ft&&Et(ft)&&(ft=null),dt.forEach(Ct),pt.forEach(Ct)}function Ft(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,At)))}function wt(e){function t(t){return Ft(t,e)}if(0<lt.length){Ft(lt[0],e);for(var n=1;n<lt.length;n++){var r=lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ct&&Ft(ct,e),null!==st&&Ft(st,e),null!==ft&&Ft(ft,e),dt.forEach(t),pt.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)bt(n),null===n.blockedOn&&ht.shift()}function xt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Bt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function kt(e,t,n){(t=P(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=x(n._dispatchListeners,t),n._dispatchInstances=x(n._dispatchInstances,e))}function St(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Bt(t);for(t=n.length;0<t--;)kt(n[t],"captured",e);for(t=0;t<n.length;t++)kt(n[t],"bubbled",e)}}function Tt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=P(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=x(n._dispatchListeners,t),n._dispatchInstances=x(n._dispatchInstances,e))}function _t(e){e&&e.dispatchConfig.registrationName&&Tt(e._targetInst,null,e)}function Pt(e){B(e,St)}function Ot(){return!0}function Nt(){return!1}function jt(e,t,n,r){for(var u in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(u)&&((t=e[u])?this[u]=t(n):"target"===u?this.target=r:this[u]=n[u]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Ot:Nt,this.isPropagationStopped=Nt,this}function Rt(e,t,n,r){if(this.eventPool.length){var u=this.eventPool.pop();return this.call(u,e,t,n,r),u}return new this(e,t,n,r)}function Mt(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function It(e){e.eventPool=[],e.getPooled=Rt,e.release=Mt}u(jt.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Ot)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Ot)},persist:function(){this.isPersistent=Ot},isPersistent:Nt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Nt,this._dispatchInstances=this._dispatchListeners=null}}),jt.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},jt.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return u(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=u({},r.Interface,e),n.extend=r.extend,It(n),n},It(jt);var Lt=jt.extend({animationName:null,elapsedTime:null,pseudoElement:null}),qt=jt.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Ut=jt.extend({view:null,detail:null}),zt=Ut.extend({relatedTarget:null});function Ht(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Vt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Wt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},$t={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=$t[e])&&!!t[e]}function Qt(){return Gt}for(var Kt=Ut.extend({key:function(e){if(e.key){var t=Vt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ht(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Wt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qt,charCode:function(e){return"keypress"===e.type?Ht(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ht(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Yt=0,Xt=0,Jt=!1,Zt=!1,en=Ut.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Yt;return Yt=e.screenX,Jt?"mousemove"===e.type?e.screenX-t:0:(Jt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Xt;return Xt=e.screenY,Zt?"mousemove"===e.type?e.screenY-t:0:(Zt=!0,0)}}),tn=en.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),nn=en.extend({dataTransfer:null}),rn=Ut.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qt}),un=jt.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),on=en.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),an=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Ke,"animationEnd",2],[Ye,"animationIteration",2],[Xe,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Je,"transitionEnd",2],["waiting","waiting",2]],ln={},cn={},sn=0;sn<an.length;sn++){var fn=an[sn],dn=fn[0],pn=fn[1],hn=fn[2],mn="on"+(pn[0].toUpperCase()+pn.slice(1)),gn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[dn],eventPriority:hn};ln[pn]=gn,cn[dn]=gn}var vn={eventTypes:ln,getEventPriority:function(e){return void 0!==(e=cn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var u=cn[e];if(!u)return null;switch(e){case"keypress":if(0===Ht(n))return null;case"keydown":case"keyup":e=Kt;break;case"blur":case"focus":e=zt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=rn;break;case Ke:case Ye:case Xe:e=Lt;break;case Je:e=un;break;case"scroll":e=Ut;break;case"wheel":e=on;break;case"copy":case"cut":case"paste":e=qt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=tn;break;default:e=jt}return Pt(t=e.getPooled(u,t,n,r)),t}},Dn=o.unstable_UserBlockingPriority,yn=o.unstable_runWithPriority,bn=vn.getEventPriority,En=10,Cn=[];function An(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=dr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var u=xt(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,i=e.eventSystemFlags,a=null,l=0;l<f.length;l++){var c=f[l];c&&(c=c.extractEvents(r,t,o,u,i))&&(a=x(a,c))}T(a)}}var Fn=!0;function wn(e,t){xn(t,e,!1)}function xn(e,t,n){switch(bn(t)){case 0:var r=Bn.bind(null,t,1);break;case 1:r=kn.bind(null,t,1);break;default:r=Tn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Bn(e,t,n){se||le();var r=Tn,u=se;se=!0;try{ae(r,e,t,n)}finally{(se=u)||de()}}function kn(e,t,n){yn(Dn,Tn.bind(null,e,t,n))}function Sn(e,t,n,r){if(Cn.length){var u=Cn.pop();u.topLevelType=e,u.eventSystemFlags=t,u.nativeEvent=n,u.targetInst=r,e=u}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=An,n=e,fe)t(n,void 0);else{fe=!0;try{ce(t,n,void 0)}finally{fe=!1,de()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,Cn.length<En&&Cn.push(e)}}function Tn(e,t,n){if(Fn)if(0<lt.length&&-1<mt.indexOf(e))e=vt(null,e,t,n),lt.push(e);else{var r=_n(e,t,n);null===r?Dt(e,n):-1<mt.indexOf(e)?(e=vt(r,e,t,n),lt.push(e)):function(e,t,n,r){switch(t){case"focus":return ct=yt(ct,e,t,n,r),!0;case"dragenter":return st=yt(st,e,t,n,r),!0;case"mouseover":return ft=yt(ft,e,t,n,r),!0;case"pointerover":var u=r.pointerId;return dt.set(u,yt(dt.get(u)||null,e,t,n,r)),!0;case"gotpointercapture":return u=r.pointerId,pt.set(u,yt(pt.get(u)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(Dt(e,n),Sn(e,t,n,null))}}function _n(e,t,n){var r=xt(n);if(null!==(r=dr(r))){var u=et(r);if(null===u)r=null;else{var o=u.tag;if(13===o){if(null!==(r=tt(u)))return r;r=null}else if(3===o){if(u.stateNode.hydrate)return 3===u.tag?u.stateNode.containerInfo:null;r=null}else u!==r&&(r=null)}}return Sn(e,t,n,r),null}function Pn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"===typeof t[e]),t}var On=new("function"===typeof WeakMap?WeakMap:Map);function Nn(e){var t=On.get(e);return void 0===t&&(t=new Set,On.set(e,t)),t}function jn(e,t,n){if(!n.has(e)){switch(e){case"scroll":xn(t,"scroll",!0);break;case"focus":case"blur":xn(t,"focus",!0),xn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Pn(e)&&xn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ze.indexOf(e)&&wn(e,t)}n.add(e)}}var Rn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Mn=["Webkit","ms","Moz","O"];function In(e,t,n){return null==t||"boolean"===typeof t||""===t?"":n||"number"!==typeof t||0===t||Rn.hasOwnProperty(e)&&Rn[e]?(""+t).trim():t+"px"}function Ln(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),u=In(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,u):e[n]=u}}Object.keys(Rn).forEach((function(e){Mn.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Rn[t]=Rn[e]}))}));var qn=u({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Un(e,t){if(t){if(qn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if(!("object"===typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!==typeof t.style)throw Error(i(62,""))}}function zn(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Hn(e,t){var n=Nn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)jn(t[r],e,n)}function Vn(){}function Wn(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function $n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Gn(e,t){var n,r=$n(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=$n(r)}}function Qn(){for(var e=window,t=Wn();t instanceof e.HTMLIFrameElement;){try{var n="string"===typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Wn((e=t.contentWindow).document)}return t}function Kn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Yn="$",Xn="/$",Jn="$?",Zn="$!",er=null,tr=null;function nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function rr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ur="function"===typeof setTimeout?setTimeout:void 0,or="function"===typeof clearTimeout?clearTimeout:void 0;function ir(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function ar(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Yn||n===Zn||n===Jn){if(0===t)return e;t--}else n===Xn&&t++}e=e.previousSibling}return null}var lr=Math.random().toString(36).slice(2),cr="__reactInternalInstance$"+lr,sr="__reactEventHandlers$"+lr,fr="__reactContainere$"+lr;function dr(e){var t=e[cr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[cr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ar(e);null!==e;){if(n=e[cr])return n;e=ar(e)}return t}n=(e=n).parentNode}return null}function pr(e){return!(e=e[cr]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function hr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function mr(e){return e[sr]||null}var gr=null,vr=null,Dr=null;function yr(){if(Dr)return Dr;var e,t,n=vr,r=n.length,u="value"in gr?gr.value:gr.textContent,o=u.length;for(e=0;e<r&&n[e]===u[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===u[o-t];t++);return Dr=u.slice(e,1<t?1-t:void 0)}var br=jt.extend({data:null}),Er=jt.extend({data:null}),Cr=[9,13,27,32],Ar=Z&&"CompositionEvent"in window,Fr=null;Z&&"documentMode"in document&&(Fr=document.documentMode);var wr=Z&&"TextEvent"in window&&!Fr,xr=Z&&(!Ar||Fr&&8<Fr&&11>=Fr),Br=String.fromCharCode(32),kr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Sr=!1;function Tr(e,t){switch(e){case"keyup":return-1!==Cr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function _r(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Pr=!1;var Or={eventTypes:kr,extractEvents:function(e,t,n,r){var u;if(Ar)e:{switch(e){case"compositionstart":var o=kr.compositionStart;break e;case"compositionend":o=kr.compositionEnd;break e;case"compositionupdate":o=kr.compositionUpdate;break e}o=void 0}else Pr?Tr(e,n)&&(o=kr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=kr.compositionStart);return o?(xr&&"ko"!==n.locale&&(Pr||o!==kr.compositionStart?o===kr.compositionEnd&&Pr&&(u=yr()):(vr="value"in(gr=r)?gr.value:gr.textContent,Pr=!0)),o=br.getPooled(o,t,n,r),u?o.data=u:null!==(u=_r(n))&&(o.data=u),Pt(o),u=o):u=null,(e=wr?function(e,t){switch(e){case"compositionend":return _r(t);case"keypress":return 32!==t.which?null:(Sr=!0,Br);case"textInput":return(e=t.data)===Br&&Sr?null:e;default:return null}}(e,n):function(e,t){if(Pr)return"compositionend"===e||!Ar&&Tr(e,t)?(e=yr(),Dr=vr=gr=null,Pr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return xr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Er.getPooled(kr.beforeInput,t,n,r)).data=e,Pt(t)):t=null,null===u?t:null===t?u:[u,t]}},Nr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function jr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Nr[e.type]:"textarea"===t}var Rr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Mr(e,t,n){return(e=jt.getPooled(Rr.change,e,t,n)).type="change",ue(n),Pt(e),e}var Ir=null,Lr=null;function qr(e){T(e)}function Ur(e){if(we(hr(e)))return e}function zr(e,t){if("change"===e)return t}var Hr=!1;function Vr(){Ir&&(Ir.detachEvent("onpropertychange",Wr),Lr=Ir=null)}function Wr(e){if("value"===e.propertyName&&Ur(Lr))if(e=Mr(Lr,e,xt(e)),se)T(e);else{se=!0;try{ie(qr,e)}finally{se=!1,de()}}}function $r(e,t,n){"focus"===e?(Vr(),Lr=n,(Ir=t).attachEvent("onpropertychange",Wr)):"blur"===e&&Vr()}function Gr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ur(Lr)}function Qr(e,t){if("click"===e)return Ur(t)}function Kr(e,t){if("input"===e||"change"===e)return Ur(t)}Z&&(Hr=Pn("input")&&(!document.documentMode||9<document.documentMode));var Yr,Xr={eventTypes:Rr,_isInputEventSupported:Hr,extractEvents:function(e,t,n,r){var u=t?hr(t):window,o=u.nodeName&&u.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===u.type)var i=zr;else if(jr(u))if(Hr)i=Kr;else{i=Gr;var a=$r}else(o=u.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(i=Qr);if(i&&(i=i(e,t)))return Mr(i,n,r);a&&a(e,u,t),"blur"===e&&(e=u._wrapperState)&&e.controlled&&"number"===u.type&&_e(u,"number",u.value)}},Jr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Zr={eventTypes:Jr,extractEvents:function(e,t,n,r,u){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&0===(32&u)&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(u=r.window===r?r:(u=r.ownerDocument)?u.defaultView||u.parentWindow:window,i?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?dr(t):null)&&(t!==(o=et(t))||5!==t.tag&&6!==t.tag)&&(t=null)):i=null,i===t)return null;if("mouseout"===e||"mouseover"===e)var a=en,l=Jr.mouseLeave,c=Jr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(a=tn,l=Jr.pointerLeave,c=Jr.pointerEnter,s="pointer");if(e=null==i?u:hr(i),u=null==t?u:hr(t),(l=a.getPooled(l,i,n,r)).type=s+"leave",l.target=e,l.relatedTarget=u,(r=a.getPooled(c,t,n,r)).type=s+"enter",r.target=u,r.relatedTarget=e,s=t,(a=i)&&s)e:{for(e=s,i=0,t=c=a;t;t=Bt(t))i++;for(t=0,u=e;u;u=Bt(u))t++;for(;0<i-t;)c=Bt(c),i--;for(;0<t-i;)e=Bt(e),t--;for(;i--;){if(c===e||c===e.alternate)break e;c=Bt(c),e=Bt(e)}c=null}else c=null;for(e=c,c=[];a&&a!==e&&(null===(i=a.alternate)||i!==e);)c.push(a),a=Bt(a);for(a=[];s&&s!==e&&(null===(i=s.alternate)||i!==e);)a.push(s),s=Bt(s);for(s=0;s<c.length;s++)Tt(c[s],"bubbled",l);for(s=a.length;0<s--;)Tt(a[s],"captured",r);return n===Yr?(Yr=null,[l]):(Yr=n,[l,r])}};var eu="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},tu=Object.prototype.hasOwnProperty;function nu(e,t){if(eu(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!tu.call(t,n[r])||!eu(e[n[r]],t[n[r]]))return!1;return!0}var ru=Z&&"documentMode"in document&&11>=document.documentMode,uu={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ou=null,iu=null,au=null,lu=!1;function cu(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return lu||null==ou||ou!==Wn(n)?null:("selectionStart"in(n=ou)&&Kn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},au&&nu(au,n)?null:(au=n,(e=jt.getPooled(uu.select,iu,e,t)).type="select",e.target=ou,Pt(e),e))}var su={eventTypes:uu,extractEvents:function(e,t,n,r){var u,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(u=!o)){e:{o=Nn(o),u=h.onSelect;for(var i=0;i<u.length;i++)if(!o.has(u[i])){o=!1;break e}o=!0}u=!o}if(u)return null;switch(o=t?hr(t):window,e){case"focus":(jr(o)||"true"===o.contentEditable)&&(ou=o,iu=t,au=null);break;case"blur":au=iu=ou=null;break;case"mousedown":lu=!0;break;case"contextmenu":case"mouseup":case"dragend":return lu=!1,cu(n,r);case"selectionchange":if(ru)break;case"keydown":case"keyup":return cu(n,r)}return null}};_.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),C=mr,A=pr,F=hr,_.injectEventPluginsByName({SimpleEventPlugin:vn,EnterLeaveEventPlugin:Zr,ChangeEventPlugin:Xr,SelectEventPlugin:su,BeforeInputEventPlugin:Or}),new Set;var fu=[],du=-1;function pu(e){0>du||(e.current=fu[du],fu[du]=null,du--)}function hu(e,t){du++,fu[du]=e.current,e.current=t}var mu={},gu={current:mu},vu={current:!1},Du=mu;function yu(e,t){var n=e.type.contextTypes;if(!n)return mu;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var u,o={};for(u in n)o[u]=t[u];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function bu(e){return null!==(e=e.childContextTypes)&&void 0!==e}function Eu(e){pu(vu),pu(gu)}function Cu(e){pu(vu),pu(gu)}function Au(e,t,n){if(gu.current!==mu)throw Error(i(168));hu(gu,t),hu(vu,n)}function Fu(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!==typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,X(t)||"Unknown",o));return u({},n,{},r)}function wu(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||mu,Du=gu.current,hu(gu,t),hu(vu,vu.current),!0}function xu(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(t=Fu(e,t,Du),r.__reactInternalMemoizedMergedChildContext=t,pu(vu),pu(gu),hu(gu,t)):pu(vu),hu(vu,n)}var Bu=o.unstable_runWithPriority,ku=o.unstable_scheduleCallback,Su=o.unstable_cancelCallback,Tu=o.unstable_shouldYield,_u=o.unstable_requestPaint,Pu=o.unstable_now,Ou=o.unstable_getCurrentPriorityLevel,Nu=o.unstable_ImmediatePriority,ju=o.unstable_UserBlockingPriority,Ru=o.unstable_NormalPriority,Mu=o.unstable_LowPriority,Iu=o.unstable_IdlePriority,Lu={},qu=void 0!==_u?_u:function(){},Uu=null,zu=null,Hu=!1,Vu=Pu(),Wu=1e4>Vu?Pu:function(){return Pu()-Vu};function $u(){switch(Ou()){case Nu:return 99;case ju:return 98;case Ru:return 97;case Mu:return 96;case Iu:return 95;default:throw Error(i(332))}}function Gu(e){switch(e){case 99:return Nu;case 98:return ju;case 97:return Ru;case 96:return Mu;case 95:return Iu;default:throw Error(i(332))}}function Qu(e,t){return e=Gu(e),Bu(e,t)}function Ku(e,t,n){return e=Gu(e),ku(e,t,n)}function Yu(e){return null===Uu?(Uu=[e],zu=ku(Nu,Ju)):Uu.push(e),Lu}function Xu(){if(null!==zu){var e=zu;zu=null,Su(e)}Ju()}function Ju(){if(!Hu&&null!==Uu){Hu=!0;var e=0;try{var t=Uu;Qu(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Uu=null}catch(t){throw null!==Uu&&(Uu=Uu.slice(e+1)),ku(Nu,Xu),t}finally{Hu=!1}}}var Zu=3;function eo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function to(e,t){if(e&&e.defaultProps)for(var n in t=u({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var no={current:null},ro=null,uo=null,oo=null;function io(){oo=uo=ro=null}function ao(e,t){var n=e.type._context;hu(no,n._currentValue),n._currentValue=t}function lo(e){var t=no.current;pu(no),e.type._context._currentValue=t}function co(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function so(e,t){ro=e,oo=uo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Wi=!0),e.firstContext=null)}function fo(e,t){if(oo!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(oo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===uo){if(null===ro)throw Error(i(308));uo=t,ro.dependencies={expirationTime:0,firstContext:t,responders:null}}else uo=uo.next=t;return e._currentValue}var po=!1;function ho(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function mo(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function go(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function vo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Do(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,u=null;null===r&&(r=e.updateQueue=ho(e.memoizedState))}else r=e.updateQueue,u=n.updateQueue,null===r?null===u?(r=e.updateQueue=ho(e.memoizedState),u=n.updateQueue=ho(n.memoizedState)):r=e.updateQueue=mo(u):null===u&&(u=n.updateQueue=mo(r));null===u||r===u?vo(r,t):null===r.lastUpdate||null===u.lastUpdate?(vo(r,t),vo(u,t)):(vo(r,t),u.lastUpdate=t)}function yo(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=ho(e.memoizedState):bo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function bo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=mo(t)),t}function Eo(e,t,n,r,o,i){switch(n.tag){case 1:return"function"===typeof(e=n.payload)?e.call(i,r,o):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null===(o="function"===typeof(e=n.payload)?e.call(i,r,o):e)||void 0===o)break;return u({},r,o);case 2:po=!0}return r}function Co(e,t,n,r,u){po=!1;for(var o=(t=bo(e,t)).baseState,i=null,a=0,l=t.firstUpdate,c=o;null!==l;){var s=l.expirationTime;s<u?(null===i&&(i=l,o=c),a<s&&(a=s)):(Bl(s,l.suspenseConfig),c=Eo(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<u?(null===s&&(s=l,null===i&&(o=c)),a<f&&(a=f)):(c=Eo(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===i&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===s&&(o=c),t.baseState=o,t.firstUpdate=i,t.firstCapturedUpdate=s,kl(a),e.expirationTime=a,e.memoizedState=c}function Ao(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Fo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Fo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Fo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!==typeof n)throw Error(i(191,n));n.call(r)}e=e.nextEffect}}var wo=O.ReactCurrentBatchConfig,xo=(new r.Component).refs;function Bo(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:u({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ko={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=hl(),u=wo.suspense;(u=go(r=ml(r,e,u),u)).payload=t,void 0!==n&&null!==n&&(u.callback=n),Do(e,u),gl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=hl(),u=wo.suspense;(u=go(r=ml(r,e,u),u)).tag=1,u.payload=t,void 0!==n&&null!==n&&(u.callback=n),Do(e,u),gl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=hl(),r=wo.suspense;(r=go(n=ml(n,e,r),r)).tag=2,void 0!==t&&null!==t&&(r.callback=t),Do(e,r),gl(e,n)}};function So(e,t,n,r,u,o,i){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!nu(n,r)||!nu(u,o))}function To(e,t,n){var r=!1,u=mu,o=t.contextType;return"object"===typeof o&&null!==o?o=fo(o):(u=bu(t)?Du:gu.current,o=(r=null!==(r=t.contextTypes)&&void 0!==r)?yu(e,u):mu),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ko,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=u,e.__reactInternalMemoizedMaskedChildContext=o),t}function _o(e,t,n,r){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ko.enqueueReplaceState(t,t.state,null)}function Po(e,t,n,r){var u=e.stateNode;u.props=n,u.state=e.memoizedState,u.refs=xo;var o=t.contextType;"object"===typeof o&&null!==o?u.context=fo(o):(o=bu(t)?Du:gu.current,u.context=yu(e,o)),null!==(o=e.updateQueue)&&(Co(e,o,n,u,r),u.state=e.memoizedState),"function"===typeof(o=t.getDerivedStateFromProps)&&(Bo(e,t,o,n),u.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof u.getSnapshotBeforeUpdate||"function"!==typeof u.UNSAFE_componentWillMount&&"function"!==typeof u.componentWillMount||(t=u.state,"function"===typeof u.componentWillMount&&u.componentWillMount(),"function"===typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount(),t!==u.state&&ko.enqueueReplaceState(u,u.state,null),null!==(o=e.updateQueue)&&(Co(e,o,n,u,r),u.state=e.memoizedState)),"function"===typeof u.componentDidMount&&(e.effectTag|=4)}var Oo=Array.isArray;function No(e,t,n){if(null!==(e=n.ref)&&"function"!==typeof e&&"object"!==typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var u=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===u?t.ref:((t=function(e){var t=r.refs;t===xo&&(t=r.refs={}),null===e?delete t[u]:t[u]=e})._stringRef=u,t)}if("string"!==typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function jo(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ro(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function u(e,t,n){return(e=Ql(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xl(n,e.mode,r)).return=e,t):((t=u(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=u(t,n.props)).ref=No(e,t,n),r.return=e,r):((r=Kl(n.type,n.key,n.props,null,e.mode,r)).ref=No(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jl(n,e.mode,r)).return=e,t):((t=u(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Yl(n,e.mode,r,o)).return=e,t):((t=u(t,n)).return=e,t)}function d(e,t,n){if("string"===typeof t||"number"===typeof t)return(t=Xl(""+t,e.mode,n)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case R:return(n=Kl(t.type,t.key,t.props,null,e.mode,n)).ref=No(e,null,t),n.return=e,n;case M:return(t=Jl(t,e.mode,n)).return=e,t}if(Oo(t)||Y(t))return(t=Yl(t,e.mode,n,null)).return=e,t;jo(e,t)}return null}function p(e,t,n,r){var u=null!==t?t.key:null;if("string"===typeof n||"number"===typeof n)return null!==u?null:l(e,t,""+n,r);if("object"===typeof n&&null!==n){switch(n.$$typeof){case R:return n.key===u?n.type===I?f(e,t,n.props.children,r,u):c(e,t,n,r):null;case M:return n.key===u?s(e,t,n,r):null}if(Oo(n)||Y(n))return null!==u?null:f(e,t,n,r,null);jo(e,n)}return null}function h(e,t,n,r,u){if("string"===typeof r||"number"===typeof r)return l(t,e=e.get(n)||null,""+r,u);if("object"===typeof r&&null!==r){switch(r.$$typeof){case R:return e=e.get(null===r.key?n:r.key)||null,r.type===I?f(t,e,r.props.children,u,r.key):c(t,e,r,u);case M:return s(t,e=e.get(null===r.key?n:r.key)||null,r,u)}if(Oo(r)||Y(r))return f(t,e=e.get(n)||null,r,u,null);jo(t,r)}return null}function m(u,i,a,l){for(var c=null,s=null,f=i,m=i=0,g=null;null!==f&&m<a.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(u,f,a[m],l);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(u,f),i=o(v,i,m),null===s?c=v:s.sibling=v,s=v,f=g}if(m===a.length)return n(u,f),c;if(null===f){for(;m<a.length;m++)null!==(f=d(u,a[m],l))&&(i=o(f,i,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(u,f);m<a.length;m++)null!==(g=h(f,u,m,a[m],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),i=o(g,i,m),null===s?c=g:s.sibling=g,s=g);return e&&f.forEach((function(e){return t(u,e)})),c}function g(u,a,l,c){var s=Y(l);if("function"!==typeof s)throw Error(i(150));if(null==(l=s.call(l)))throw Error(i(151));for(var f=s=null,m=a,g=a=0,v=null,D=l.next();null!==m&&!D.done;g++,D=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var y=p(u,m,D.value,c);if(null===y){null===m&&(m=v);break}e&&m&&null===y.alternate&&t(u,m),a=o(y,a,g),null===f?s=y:f.sibling=y,f=y,m=v}if(D.done)return n(u,m),s;if(null===m){for(;!D.done;g++,D=l.next())null!==(D=d(u,D.value,c))&&(a=o(D,a,g),null===f?s=D:f.sibling=D,f=D);return s}for(m=r(u,m);!D.done;g++,D=l.next())null!==(D=h(m,u,g,D.value,c))&&(e&&null!==D.alternate&&m.delete(null===D.key?g:D.key),a=o(D,a,g),null===f?s=D:f.sibling=D,f=D);return e&&m.forEach((function(e){return t(u,e)})),s}return function(e,r,o,l){var c="object"===typeof o&&null!==o&&o.type===I&&null===o.key;c&&(o=o.props.children);var s="object"===typeof o&&null!==o;if(s)switch(o.$$typeof){case R:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?o.type===I:c.elementType===o.type){n(e,c.sibling),(r=u(c,o.type===I?o.props.children:o.props)).ref=No(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===I?((r=Yl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Kl(o.type,o.key,o.props,null,e.mode,l)).ref=No(e,r,o),l.return=e,e=l)}return a(e);case M:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=u(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jl(o,e.mode,l)).return=e,e=r}return a(e)}if("string"===typeof o||"number"===typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=u(r,o)).return=e,e=r):(n(e,r),(r=Xl(o,e.mode,l)).return=e,e=r),a(e);if(Oo(o))return m(e,r,o,l);if(Y(o))return g(e,r,o,l);if(s&&jo(e,o),"undefined"===typeof o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Mo=Ro(!0),Io=Ro(!1),Lo={},qo={current:Lo},Uo={current:Lo},zo={current:Lo};function Ho(e){if(e===Lo)throw Error(i(174));return e}function Vo(e,t){hu(zo,t),hu(Uo,e),hu(qo,Lo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:qe(null,"");break;default:t=qe(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}pu(qo),hu(qo,t)}function Wo(e){pu(qo),pu(Uo),pu(zo)}function $o(e){Ho(zo.current);var t=Ho(qo.current),n=qe(t,e.type);t!==n&&(hu(Uo,e),hu(qo,n))}function Go(e){Uo.current===e&&(pu(qo),pu(Uo))}var Qo={current:0};function Ko(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Jn||n.data===Zn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Yo(e,t){return{responder:e,props:t}}var Xo=O.ReactCurrentDispatcher,Jo=O.ReactCurrentBatchConfig,Zo=0,ei=null,ti=null,ni=null,ri=null,ui=null,oi=null,ii=0,ai=null,li=0,ci=!1,si=null,fi=0;function di(){throw Error(i(321))}function pi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!eu(e[n],t[n]))return!1;return!0}function hi(e,t,n,r,u,o){if(Zo=o,ei=t,ni=null!==e?e.memoizedState:null,Xo.current=null===ni?Oi:Ni,t=n(r,u),ci){do{ci=!1,fi+=1,ni=null!==e?e.memoizedState:null,oi=ri,ai=ui=ti=null,Xo.current=Ni,t=n(r,u)}while(ci);si=null,fi=0}if(Xo.current=Pi,(e=ei).memoizedState=ri,e.expirationTime=ii,e.updateQueue=ai,e.effectTag|=li,e=null!==ti&&null!==ti.next,Zo=0,oi=ui=ri=ni=ti=ei=null,ii=0,ai=null,li=0,e)throw Error(i(300));return t}function mi(){Xo.current=Pi,Zo=0,oi=ui=ri=ni=ti=ei=null,ii=0,ai=null,li=0,ci=!1,si=null,fi=0}function gi(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===ui?ri=ui=e:ui=ui.next=e,ui}function vi(){if(null!==oi)oi=(ui=oi).next,ni=null!==(ti=ni)?ti.next:null;else{if(null===ni)throw Error(i(310));var e={memoizedState:(ti=ni).memoizedState,baseState:ti.baseState,queue:ti.queue,baseUpdate:ti.baseUpdate,next:null};ui=null===ui?ri=e:ui.next=e,ni=ti.next}return ui}function Di(e,t){return"function"===typeof t?t(e):t}function yi(e){var t=vi(),n=t.queue;if(null===n)throw Error(i(311));if(n.lastRenderedReducer=e,0<fi){var r=n.dispatch;if(null!==si){var u=si.get(n);if(void 0!==u){si.delete(n);var o=t.memoizedState;do{o=e(o,u.action),u=u.next}while(null!==u);return eu(o,t.memoizedState)||(Wi=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var a=t.baseUpdate;if(o=t.baseState,null!==a?(null!==r&&(r.next=null),r=a.next):r=null!==r?r.next:null,null!==r){var l=u=null,c=r,s=!1;do{var f=c.expirationTime;f<Zo?(s||(s=!0,l=a,u=o),f>ii&&kl(ii=f)):(Bl(f,c.suspenseConfig),o=c.eagerReducer===e?c.eagerState:e(o,c.action)),a=c,c=c.next}while(null!==c&&c!==r);s||(l=a,u=o),eu(o,t.memoizedState)||(Wi=!0),t.memoizedState=o,t.baseUpdate=l,t.baseState=u,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function bi(e){var t=gi();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:Di,lastRenderedState:e}).dispatch=_i.bind(null,ei,e),[t.memoizedState,e]}function Ei(e){return yi(Di)}function Ci(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ai?(ai={lastEffect:null}).lastEffect=e.next=e:null===(t=ai.lastEffect)?ai.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ai.lastEffect=e),e}function Ai(e,t,n,r){var u=gi();li|=e,u.memoizedState=Ci(t,n,void 0,void 0===r?null:r)}function Fi(e,t,n,r){var u=vi();r=void 0===r?null:r;var o=void 0;if(null!==ti){var i=ti.memoizedState;if(o=i.destroy,null!==r&&pi(r,i.deps))return void Ci(0,n,o,r)}li|=e,u.memoizedState=Ci(t,n,o,r)}function wi(e,t){return Ai(516,192,e,t)}function xi(e,t){return Fi(516,192,e,t)}function Bi(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ki(){}function Si(e,t){return gi().memoizedState=[e,void 0===t?null:t],e}function Ti(e,t){var n=vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function _i(e,t,n){if(!(25>fi))throw Error(i(301));var r=e.alternate;if(e===ei||null!==r&&r===ei)if(ci=!0,e={expirationTime:Zo,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===si&&(si=new Map),void 0===(n=si.get(t)))si.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var u=hl(),o=wo.suspense;o={expirationTime:u=ml(u,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.last;if(null===a)o.next=o;else{var l=a.next;null!==l&&(o.next=l),a.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(o.eagerReducer=r,o.eagerState=s,eu(s,c))return}catch(e){}gl(e,u)}}var Pi={readContext:fo,useCallback:di,useContext:di,useEffect:di,useImperativeHandle:di,useLayoutEffect:di,useMemo:di,useReducer:di,useRef:di,useState:di,useDebugValue:di,useResponder:di,useDeferredValue:di,useTransition:di},Oi={readContext:fo,useCallback:Si,useContext:fo,useEffect:wi,useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,Ai(4,36,Bi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ai(4,36,e,t)},useMemo:function(e,t){var n=gi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=gi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=_i.bind(null,ei,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},gi().memoizedState=e},useState:bi,useDebugValue:ki,useResponder:Yo,useDeferredValue:function(e,t){var n=bi(e),r=n[0],u=n[1];return wi((function(){o.unstable_next((function(){var n=Jo.suspense;Jo.suspense=void 0===t?null:t;try{u(e)}finally{Jo.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=bi(!1),n=t[0],r=t[1];return[Si((function(t){r(!0),o.unstable_next((function(){var n=Jo.suspense;Jo.suspense=void 0===e?null:e;try{r(!1),t()}finally{Jo.suspense=n}}))}),[e,n]),n]}},Ni={readContext:fo,useCallback:Ti,useContext:fo,useEffect:xi,useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,Fi(4,36,Bi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Fi(4,36,e,t)},useMemo:function(e,t){var n=vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:yi,useRef:function(){return vi().memoizedState},useState:Ei,useDebugValue:ki,useResponder:Yo,useDeferredValue:function(e,t){var n=Ei(),r=n[0],u=n[1];return xi((function(){o.unstable_next((function(){var n=Jo.suspense;Jo.suspense=void 0===t?null:t;try{u(e)}finally{Jo.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=Ei(),n=t[0],r=t[1];return[Ti((function(t){r(!0),o.unstable_next((function(){var n=Jo.suspense;Jo.suspense=void 0===e?null:e;try{r(!1),t()}finally{Jo.suspense=n}}))}),[e,n]),n]}},ji=null,Ri=null,Mi=!1;function Ii(e,t){var n=$l(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Li(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function qi(e){if(Mi){var t=Ri;if(t){var n=t;if(!Li(e,t)){if(!(t=ir(n.nextSibling))||!Li(e,t))return e.effectTag=-1025&e.effectTag|2,Mi=!1,void(ji=e);Ii(ji,n)}ji=e,Ri=ir(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Mi=!1,ji=e}}function Ui(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ji=e}function zi(e){if(e!==ji)return!1;if(!Mi)return Ui(e),Mi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!rr(t,e.memoizedProps))for(t=Ri;t;)Ii(e,t),t=ir(t.nextSibling);if(Ui(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Xn){if(0===t){Ri=ir(e.nextSibling);break e}t--}else n!==Yn&&n!==Zn&&n!==Jn||t++}e=e.nextSibling}Ri=null}}else Ri=ji?ir(e.stateNode.nextSibling):null;return!0}function Hi(){Ri=ji=null,Mi=!1}var Vi=O.ReactCurrentOwner,Wi=!1;function $i(e,t,n,r){t.child=null===e?Io(t,null,n,r):Mo(t,e.child,n,r)}function Gi(e,t,n,r,u){n=n.render;var o=t.ref;return so(t,u),r=hi(e,t,n,r,o,u),null===e||Wi?(t.effectTag|=1,$i(e,t,r,u),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=u&&(e.expirationTime=0),sa(e,t,u))}function Qi(e,t,n,r,u,o){if(null===e){var i=n.type;return"function"!==typeof i||Gl(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kl(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ki(e,t,i,r,u,o))}return i=e.child,u<o&&(u=i.memoizedProps,(n=null!==(n=n.compare)?n:nu)(u,r)&&e.ref===t.ref)?sa(e,t,o):(t.effectTag|=1,(e=Ql(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ki(e,t,n,r,u,o){return null!==e&&nu(e.memoizedProps,r)&&e.ref===t.ref&&(Wi=!1,u<o)?sa(e,t,o):Xi(e,t,n,r,o)}function Yi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Xi(e,t,n,r,u){var o=bu(n)?Du:gu.current;return o=yu(t,o),so(t,u),n=hi(e,t,n,r,o,u),null===e||Wi?(t.effectTag|=1,$i(e,t,n,u),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=u&&(e.expirationTime=0),sa(e,t,u))}function Ji(e,t,n,r,u){if(bu(n)){var o=!0;wu(t)}else o=!1;if(so(t,u),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),To(t,n,r),Po(t,n,r,u),r=!0;else if(null===e){var i=t.stateNode,a=t.memoizedProps;i.props=a;var l=i.context,c=n.contextType;"object"===typeof c&&null!==c?c=fo(c):c=yu(t,c=bu(n)?Du:gu.current);var s=n.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof i.getSnapshotBeforeUpdate;f||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(a!==r||l!==c)&&_o(t,i,r,c),po=!1;var d=t.memoizedState;l=i.state=d;var p=t.updateQueue;null!==p&&(Co(t,p,r,i,u),l=t.memoizedState),a!==r||d!==l||vu.current||po?("function"===typeof s&&(Bo(t,n,s,r),l=t.memoizedState),(a=po||So(t,n,a,r,d,l,c))?(f||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||("function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"===typeof i.componentDidMount&&(t.effectTag|=4)):("function"===typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=c,r=a):("function"===typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,a=t.memoizedProps,i.props=t.type===t.elementType?a:to(t.type,a),l=i.context,"object"===typeof(c=n.contextType)&&null!==c?c=fo(c):c=yu(t,c=bu(n)?Du:gu.current),(f="function"===typeof(s=n.getDerivedStateFromProps)||"function"===typeof i.getSnapshotBeforeUpdate)||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(a!==r||l!==c)&&_o(t,i,r,c),po=!1,l=t.memoizedState,d=i.state=l,null!==(p=t.updateQueue)&&(Co(t,p,r,i,u),d=t.memoizedState),a!==r||l!==d||vu.current||po?("function"===typeof s&&(Bo(t,n,s,r),d=t.memoizedState),(s=po||So(t,n,a,r,l,d,c))?(f||"function"!==typeof i.UNSAFE_componentWillUpdate&&"function"!==typeof i.componentWillUpdate||("function"===typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,c),"function"===typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,c)),"function"===typeof i.componentDidUpdate&&(t.effectTag|=4),"function"===typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!==typeof i.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!==typeof i.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=c,r=s):("function"!==typeof i.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!==typeof i.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Zi(e,t,n,r,o,u)}function Zi(e,t,n,r,u,o){Yi(e,t);var i=0!==(64&t.effectTag);if(!r&&!i)return u&&xu(t,n,!1),sa(e,t,o);r=t.stateNode,Vi.current=t;var a=i&&"function"!==typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Mo(t,e.child,null,o),t.child=Mo(t,null,a,o)):$i(e,t,a,o),t.memoizedState=r.state,u&&xu(t,n,!0),t.child}function ea(e){var t=e.stateNode;t.pendingContext?Au(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Au(0,t.context,!1),Vo(e,t.containerInfo)}var ta,na,ra,ua,oa={dehydrated:null,retryTime:0};function ia(e,t,n){var r,u=t.mode,o=t.pendingProps,i=Qo.current,a=!1;if((r=0!==(64&t.effectTag))||(r=0!==(2&i)&&(null===e||null!==e.memoizedState)),r?(a=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),hu(Qo,1&i),null===e){if(void 0!==o.fallback&&qi(t),a){if(a=o.fallback,(o=Yl(null,u,0,null)).return=t,0===(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Yl(a,u,n,null)).return=t,o.sibling=n,t.memoizedState=oa,t.child=o,n}return u=o.children,t.memoizedState=null,t.child=Io(t,null,u,n)}if(null!==e.memoizedState){if(u=(e=e.child).sibling,a){if(o=o.fallback,(n=Ql(e,e.pendingProps)).return=t,0===(2&t.mode)&&(a=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=a;null!==a;)a.return=n,a=a.sibling;return(u=Ql(u,o,u.expirationTime)).return=t,n.sibling=u,n.childExpirationTime=0,t.memoizedState=oa,t.child=n,u}return n=Mo(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,a){if(a=o.fallback,(o=Yl(null,u,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0===(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Yl(a,u,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=oa,t.child=o,n}return t.memoizedState=null,t.child=Mo(t,e,o.children,n)}function aa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),co(e.return,t)}function la(e,t,n,r,u,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:u,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=u,i.lastEffect=o)}function ca(e,t,n){var r=t.pendingProps,u=r.revealOrder,o=r.tail;if($i(e,t,r.children,n),0!==(2&(r=Qo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!==(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&aa(e,n);else if(19===e.tag)aa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(hu(Qo,r),0===(2&t.mode))t.memoizedState=null;else switch(u){case"forwards":for(n=t.child,u=null;null!==n;)null!==(e=n.alternate)&&null===Ko(e)&&(u=n),n=n.sibling;null===(n=u)?(u=t.child,t.child=null):(u=n.sibling,n.sibling=null),la(t,!1,u,n,o,t.lastEffect);break;case"backwards":for(n=null,u=t.child,t.child=null;null!==u;){if(null!==(e=u.alternate)&&null===Ko(e)){t.child=u;break}e=u.sibling,u.sibling=n,n=u,u=e}la(t,!0,n,null,o,t.lastEffect);break;case"together":la(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function sa(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&kl(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ql(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ql(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fa(e){e.effectTag|=4}function da(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function pa(e){switch(e.tag){case 1:bu(e.type)&&Eu();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Wo(),Cu(),0!==(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Go(e),null;case 13:return pu(Qo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return pu(Qo),null;case 4:return Wo(),null;case 10:return lo(e),null;default:return null}}function ha(e,t){return{value:e,source:t,stack:J(t)}}ta=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},na=function(){},ra=function(e,t,n,r,o){var i=e.memoizedProps;if(i!==r){var a,l,c=t.stateNode;switch(Ho(qo.current),e=null,n){case"input":i=xe(c,i),r=xe(c,r),e=[];break;case"option":i=Pe(c,i),r=Pe(c,r),e=[];break;case"select":i=u({},i,{value:void 0}),r=u({},r,{value:void 0}),e=[];break;case"textarea":i=Ne(c,i),r=Ne(c,r),e=[];break;default:"function"!==typeof i.onClick&&"function"===typeof r.onClick&&(c.onclick=Vn)}for(a in Un(n,r),n=null,i)if(!r.hasOwnProperty(a)&&i.hasOwnProperty(a)&&null!=i[a])if("style"===a)for(l in c=i[a])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==a&&"children"!==a&&"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(p.hasOwnProperty(a)?e||(e=[]):(e=e||[]).push(a,null));for(a in r){var s=r[a];if(c=null!=i?i[a]:void 0,r.hasOwnProperty(a)&&s!==c&&(null!=s||null!=c))if("style"===a)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(a,n)),n=s;else"dangerouslySetInnerHTML"===a?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(a,""+s)):"children"===a?c===s||"string"!==typeof s&&"number"!==typeof s||(e=e||[]).push(a,""+s):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&(p.hasOwnProperty(a)?(null!=s&&Hn(o,a),e||c===s||(e=[])):(e=e||[]).push(a,s))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&fa(t)}},ua=function(e,t,n,r){n!==r&&fa(t)};var ma="function"===typeof WeakSet?WeakSet:Set;function ga(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=J(n)),null!==n&&X(n.type),t=t.value,null!==e&&1===e.tag&&X(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function va(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){ql(e,t)}else t.current=null}function Da(e,t){switch(t.tag){case 0:case 11:case 15:ya(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:to(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(i(163))}}function ya(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!==(r.tag&e)){var u=r.destroy;r.destroy=void 0,void 0!==u&&u()}0!==(r.tag&t)&&(u=r.create,r.destroy=u()),r=r.next}while(r!==n)}}function ba(e,t,n){switch("function"===typeof Vl&&Vl(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Qu(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var u=t;try{n()}catch(e){ql(u,e)}}e=e.next}while(e!==r)}))}break;case 1:va(t),"function"===typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ql(e,t)}}(t,n);break;case 5:va(t);break;case 4:Fa(e,t,n)}}function Ea(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&Ea(t)}function Ca(e){return 5===e.tag||3===e.tag||4===e.tag}function Aa(e){e:{for(var t=e.return;null!==t;){if(Ca(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(He(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Ca(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var u=e;;){var o=5===u.tag||6===u.tag;if(o){var a=o?u.stateNode:u.stateNode.instance;if(n)if(r){var l=a;a=n,8===(o=t).nodeType?o.parentNode.insertBefore(l,a):o.insertBefore(l,a)}else t.insertBefore(a,n);else r?(8===(l=t).nodeType?(o=l.parentNode).insertBefore(a,l):(o=l).appendChild(a),null!==(l=l._reactRootContainer)&&void 0!==l||null!==o.onclick||(o.onclick=Vn)):t.appendChild(a)}else if(4!==u.tag&&null!==u.child){u.child.return=u,u=u.child;continue}if(u===e)break;for(;null===u.sibling;){if(null===u.return||u.return===e)return;u=u.return}u.sibling.return=u.return,u=u.sibling}}function Fa(e,t,n){for(var r,u,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(r=a.stateNode,a.tag){case 5:u=!1;break e;case 3:case 4:r=r.containerInfo,u=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,c=o,s=n,f=c;;)if(ba(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}u?(l=r,c=o.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,u=!0,o.child.return=o,o=o.child;continue}}else if(ba(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function wa(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ya(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,u=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[sr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ke(n,r),zn(e,u),t=zn(e,r),u=0;u<o.length;u+=2){var a=o[u],l=o[u+1];"style"===a?Ln(n,l):"dangerouslySetInnerHTML"===a?ze(n,l):"children"===a?He(n,l):Ce(n,a,l,t)}switch(e){case"input":Se(n,r);break;case"textarea":Re(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Oe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Oe(n,!!r.multiple,r.defaultValue,!0):Oe(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(i(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,wt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,tl=Wu()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"===typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,u=void 0!==(u=e.memoizedProps.style)&&null!==u&&u.hasOwnProperty("display")?u.display:null,o.style.display=In("display",u));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}xa(t);break;case 19:xa(t);break;case 17:case 20:case 21:break;default:throw Error(i(163))}}function xa(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ma),t.forEach((function(t){var r=zl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Ba="function"===typeof WeakMap?WeakMap:Map;function ka(e,t,n){(n=go(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ul||(ul=!0,ol=r),ga(e,t)},n}function Sa(e,t,n){(n=go(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"===typeof r){var u=t.value;n.payload=function(){return ga(e,t),r(u)}}var o=e.stateNode;return null!==o&&"function"===typeof o.componentDidCatch&&(n.callback=function(){"function"!==typeof r&&(null===il?il=new Set([this]):il.add(this),ga(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Ta,_a=Math.ceil,Pa=O.ReactCurrentDispatcher,Oa=O.ReactCurrentOwner,Na=0,ja=8,Ra=16,Ma=32,Ia=0,La=1,qa=2,Ua=3,za=4,Ha=5,Va=Na,Wa=null,$a=null,Ga=0,Qa=Ia,Ka=null,Ya=1073741823,Xa=1073741823,Ja=null,Za=0,el=!1,tl=0,nl=500,rl=null,ul=!1,ol=null,il=null,al=!1,ll=null,cl=90,sl=null,fl=0,dl=null,pl=0;function hl(){return(Va&(Ra|Ma))!==Na?1073741821-(Wu()/10|0):0!==pl?pl:pl=1073741821-(Wu()/10|0)}function ml(e,t,n){if(0===(2&(t=t.mode)))return 1073741823;var r=$u();if(0===(4&t))return 99===r?1073741823:1073741822;if((Va&Ra)!==Na)return Ga;if(null!==n)e=eo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=eo(e,150,100);break;case 97:case 96:e=eo(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Wa&&e===Ga&&--e,e}function gl(e,t){if(50<fl)throw fl=0,dl=null,Error(i(185));if(null!==(e=vl(e,t))){var n=$u();1073741823===t?(Va&ja)!==Na&&(Va&(Ra|Ma))===Na?El(e):(yl(e),Va===Na&&Xu()):yl(e),(4&Va)===Na||98!==n&&99!==n||(null===sl?sl=new Map([[e,t]]):(void 0===(n=sl.get(e))||n>t)&&sl.set(e,t))}}function vl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,u=null;if(null===r&&3===e.tag)u=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){u=r.stateNode;break}r=r.return}return null!==u&&(Wa===u&&(kl(t),Qa===za&&tc(u,Ga)),nc(u,t)),u}function Dl(e){var t=e.lastExpiredTime;return 0!==t?t:ec(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function yl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Yu(El.bind(null,e));else{var t=Dl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=hl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var u=e.callbackPriority;if(e.callbackExpirationTime===t&&u>=r)return;n!==Lu&&Su(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Yu(El.bind(null,e)):Ku(r,bl.bind(null,e),{timeout:10*(1073741821-t)-Wu()}),e.callbackNode=t}}}function bl(e,t){if(pl=0,t)return rc(e,t=hl()),yl(e),null;var n=Dl(e);if(0!==n){if(t=e.callbackNode,(Va&(Ra|Ma))!==Na)throw Error(i(327));if(Ml(),e===Wa&&n===Ga||Fl(e,n),null!==$a){var r=Va;Va|=Ra;for(var u=xl();;)try{Tl();break}catch(t){wl(e,t)}if(io(),Va=r,Pa.current=u,Qa===La)throw t=Ka,Fl(e,n),tc(e,n),yl(e),t;if(null===$a)switch(u=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Qa,Wa=null,r){case Ia:case La:throw Error(i(345));case qa:rc(e,2<n?2:n);break;case Ua:if(tc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ol(u)),1073741823===Ya&&10<(u=tl+nl-Wu())){if(el){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,Fl(e,n);break}}if(0!==(o=Dl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=ur(Nl.bind(null,e),u);break}Nl(e);break;case za:if(tc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ol(u)),el&&(0===(u=e.lastPingedTime)||u>=n)){e.lastPingedTime=n,Fl(e,n);break}if(0!==(u=Dl(e))&&u!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Xa?r=10*(1073741821-Xa)-Wu():1073741823===Ya?r=0:(r=10*(1073741821-Ya)-5e3,0>(r=(u=Wu())-r)&&(r=0),(n=10*(1073741821-n)-u)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*_a(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=ur(Nl.bind(null,e),r);break}Nl(e);break;case Ha:if(1073741823!==Ya&&null!==Ja){o=Ya;var a=Ja;if(0>=(r=0|a.busyMinDurationMs)?r=0:(u=0|a.busyDelayMs,r=(o=Wu()-(10*(1073741821-o)-(0|a.timeoutMs||5e3)))<=u?0:u+r-o),10<r){tc(e,n),e.timeoutHandle=ur(Nl.bind(null,e),r);break}}Nl(e);break;default:throw Error(i(329))}if(yl(e),e.callbackNode===t)return bl.bind(null,e)}}return null}function El(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)Nl(e);else{if((Va&(Ra|Ma))!==Na)throw Error(i(327));if(Ml(),e===Wa&&t===Ga||Fl(e,t),null!==$a){var n=Va;Va|=Ra;for(var r=xl();;)try{Sl();break}catch(t){wl(e,t)}if(io(),Va=n,Pa.current=r,Qa===La)throw n=Ka,Fl(e,t),tc(e,t),yl(e),n;if(null!==$a)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Wa=null,Nl(e),yl(e)}}return null}function Cl(e,t){var n=Va;Va|=1;try{return e(t)}finally{(Va=n)===Na&&Xu()}}function Al(e,t){var n=Va;Va&=-2,Va|=ja;try{return e(t)}finally{(Va=n)===Na&&Xu()}}function Fl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,or(n)),null!==$a)for(n=$a.return;null!==n;){var r=n;switch(r.tag){case 1:var u=r.type.childContextTypes;null!==u&&void 0!==u&&Eu();break;case 3:Wo(),Cu();break;case 5:Go(r);break;case 4:Wo();break;case 13:case 19:pu(Qo);break;case 10:lo(r)}n=n.return}Wa=e,$a=Ql(e.current,null),Ga=t,Qa=Ia,Ka=null,Xa=Ya=1073741823,Ja=null,Za=0,el=!1}function wl(e,t){for(;;){try{if(io(),mi(),null===$a||null===$a.return)return Qa=La,Ka=t,null;e:{var n=e,r=$a.return,u=$a,o=t;if(t=Ga,u.effectTag|=2048,u.firstEffect=u.lastEffect=null,null!==o&&"object"===typeof o&&"function"===typeof o.then){var i=o,a=0!==(1&Qo.current),l=r;do{var c;if(c=13===l.tag){var s=l.memoizedState;if(null!==s)c=null!==s.dehydrated;else{var f=l.memoizedProps;c=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!a)}}if(c){var d=l.updateQueue;if(null===d){var p=new Set;p.add(i),l.updateQueue=p}else d.add(i);if(0===(2&l.mode)){if(l.effectTag|=64,u.effectTag&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var h=go(1073741823,null);h.tag=2,Do(u,h)}u.expirationTime=1073741823;break e}o=void 0,u=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new Ba,o=new Set,m.set(i,o)):void 0===(o=m.get(i))&&(o=new Set,m.set(i,o)),!o.has(u)){o.add(u);var g=Ul.bind(null,n,i,u);i.then(g,g)}l.effectTag|=4096,l.expirationTime=t;break e}l=l.return}while(null!==l);o=Error((X(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+J(u))}Qa!==Ha&&(Qa=qa),o=ha(o,u),l=r;do{switch(l.tag){case 3:i=o,l.effectTag|=4096,l.expirationTime=t,yo(l,ka(l,i,t));break e;case 1:i=o;var v=l.type,D=l.stateNode;if(0===(64&l.effectTag)&&("function"===typeof v.getDerivedStateFromError||null!==D&&"function"===typeof D.componentDidCatch&&(null===il||!il.has(D)))){l.effectTag|=4096,l.expirationTime=t,yo(l,Sa(l,i,t));break e}}l=l.return}while(null!==l)}$a=Pl($a)}catch(e){t=e;continue}break}}function xl(){var e=Pa.current;return Pa.current=Pi,null===e?Pi:e}function Bl(e,t){e<Ya&&2<e&&(Ya=e),null!==t&&e<Xa&&2<e&&(Xa=e,Ja=t)}function kl(e){e>Za&&(Za=e)}function Sl(){for(;null!==$a;)$a=_l($a)}function Tl(){for(;null!==$a&&!Tu();)$a=_l($a)}function _l(e){var t=Ta(e.alternate,e,Ga);return e.memoizedProps=e.pendingProps,null===t&&(t=Pl(e)),Oa.current=null,t}function Pl(e){$a=e;do{var t=$a.alternate;if(e=$a.return,0===(2048&$a.effectTag)){e:{var n=t,r=Ga,o=(t=$a).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:bu(t.type)&&Eu();break;case 3:Wo(),Cu(),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),(null===n||null===n.child)&&zi(t)&&fa(t),na(t);break;case 5:Go(t),r=Ho(zo.current);var a=t.type;if(null!==n&&null!=t.stateNode)ra(n,t,a,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var l=Ho(qo.current);if(zi(t)){var c=(o=t).stateNode;n=o.type;var s=o.memoizedProps,f=r;switch(c[cr]=o,c[sr]=s,a=void 0,r=c,n){case"iframe":case"object":case"embed":wn("load",r);break;case"video":case"audio":for(c=0;c<Ze.length;c++)wn(Ze[c],r);break;case"source":wn("error",r);break;case"img":case"image":case"link":wn("error",r),wn("load",r);break;case"form":wn("reset",r),wn("submit",r);break;case"details":wn("toggle",r);break;case"input":Be(r,s),wn("invalid",r),Hn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},wn("invalid",r),Hn(f,"onChange");break;case"textarea":je(r,s),wn("invalid",r),Hn(f,"onChange")}for(a in Un(n,s),c=null,s)s.hasOwnProperty(a)&&(l=s[a],"children"===a?"string"===typeof l?r.textContent!==l&&(c=["children",l]):"number"===typeof l&&r.textContent!==""+l&&(c=["children",""+l]):p.hasOwnProperty(a)&&null!=l&&Hn(f,a));switch(n){case"input":Fe(r),Te(r,s,!0);break;case"textarea":Fe(r),Me(r);break;case"select":case"option":break;default:"function"===typeof s.onClick&&(r.onclick=Vn)}a=c,o.updateQueue=a,(o=null!==a)&&fa(t)}else{n=t,f=a,s=o,c=9===r.nodeType?r:r.ownerDocument,l===Ie.html&&(l=Le(f)),l===Ie.html?"script"===f?((s=c.createElement("div")).innerHTML="<script><\\/script>",c=s.removeChild(s.firstChild)):"string"===typeof s.is?c=c.createElement(f,{is:s.is}):(c=c.createElement(f),"select"===f&&(f=c,s.multiple?f.multiple=!0:s.size&&(f.size=s.size))):c=c.createElementNS(l,f),(s=c)[cr]=n,s[sr]=o,ta(s,t,!1,!1),t.stateNode=s;var d=r,h=zn(f=a,n=o);switch(f){case"iframe":case"object":case"embed":wn("load",s),r=n;break;case"video":case"audio":for(r=0;r<Ze.length;r++)wn(Ze[r],s);r=n;break;case"source":wn("error",s),r=n;break;case"img":case"image":case"link":wn("error",s),wn("load",s),r=n;break;case"form":wn("reset",s),wn("submit",s),r=n;break;case"details":wn("toggle",s),r=n;break;case"input":Be(s,n),r=xe(s,n),wn("invalid",s),Hn(d,"onChange");break;case"option":r=Pe(s,n);break;case"select":s._wrapperState={wasMultiple:!!n.multiple},r=u({},n,{value:void 0}),wn("invalid",s),Hn(d,"onChange");break;case"textarea":je(s,n),r=Ne(s,n),wn("invalid",s),Hn(d,"onChange");break;default:r=n}Un(f,r),c=void 0,l=f;var m=s,g=r;for(c in g)if(g.hasOwnProperty(c)){var v=g[c];"style"===c?Ln(m,v):"dangerouslySetInnerHTML"===c?null!=(v=v?v.__html:void 0)&&ze(m,v):"children"===c?"string"===typeof v?("textarea"!==l||""!==v)&&He(m,v):"number"===typeof v&&He(m,""+v):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(p.hasOwnProperty(c)?null!=v&&Hn(d,c):null!=v&&Ce(m,c,v,h))}switch(f){case"input":Fe(s),Te(s,n,!1);break;case"textarea":Fe(s),Me(s);break;case"option":null!=n.value&&s.setAttribute("value",""+Ee(n.value));break;case"select":(r=s).multiple=!!n.multiple,null!=(s=n.value)?Oe(r,!!n.multiple,s,!1):null!=n.defaultValue&&Oe(r,!!n.multiple,n.defaultValue,!0);break;default:"function"===typeof r.onClick&&(s.onclick=Vn)}(o=nr(a,o))&&fa(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(i(166));break;case 6:if(n&&null!=t.stateNode)ua(n,t,n.memoizedProps,o);else{if("string"!==typeof o&&null===t.stateNode)throw Error(i(166));r=Ho(zo.current),Ho(qo.current),zi(t)?(a=(o=t).stateNode,r=o.memoizedProps,a[cr]=o,(o=a.nodeValue!==r)&&fa(t)):(a=t,(o=(9===r.nodeType?r:r.ownerDocument).createTextNode(o))[cr]=a,t.stateNode=o)}break;case 11:break;case 13:if(pu(Qo),o=t.memoizedState,0!==(64&t.effectTag)){t.expirationTime=r;break e}o=null!==o,a=!1,null===n?void 0!==t.memoizedProps.fallback&&zi(t):(a=null!==(r=n.memoizedState),o||null===r||null!==(r=n.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=r,r.nextEffect=s):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),o&&!a&&0!==(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(1&Qo.current)?Qa===Ia&&(Qa=Ua):(Qa!==Ia&&Qa!==Ua||(Qa=za),0!==Za&&null!==Wa&&(tc(Wa,Ga),nc(Wa,Za)))),(o||a)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Wo(),na(t);break;case 10:lo(t);break;case 9:case 14:break;case 17:bu(t.type)&&Eu();break;case 19:if(pu(Qo),null===(o=t.memoizedState))break;if(a=0!==(64&t.effectTag),null===(s=o.rendering)){if(a)da(o,!1);else if(Qa!==Ia||null!==n&&0!==(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(s=Ko(n))){for(t.effectTag|=64,da(o,!1),null!==(a=s.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===o.lastEffect&&(t.firstEffect=null),t.lastEffect=o.lastEffect,o=r,a=t.child;null!==a;)n=o,(r=a).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(s=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=s.childExpirationTime,r.expirationTime=s.expirationTime,r.child=s.child,r.memoizedProps=s.memoizedProps,r.memoizedState=s.memoizedState,r.updateQueue=s.updateQueue,n=s.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),a=a.sibling;hu(Qo,1&Qo.current|2),t=t.child;break e}n=n.sibling}}else{if(!a)if(null!==(n=Ko(s))){if(t.effectTag|=64,a=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),da(o,!0),null===o.tail&&"hidden"===o.tailMode){null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else Wu()>o.tailExpiration&&1<r&&(t.effectTag|=64,a=!0,da(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(s.sibling=t.child,t.child=s):(null!==(r=o.last)?r.sibling=s:t.child=s,o.last=s)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=Wu()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,o=Qo.current,hu(Qo,o=a?1&o|2:1&o),t=r;break e}break;case 20:case 21:break;default:throw Error(i(156,t.tag))}t=null}if(o=$a,1===Ga||1!==o.childExpirationTime){for(a=0,r=o.child;null!==r;)(n=r.expirationTime)>a&&(a=n),(s=r.childExpirationTime)>a&&(a=s),r=r.sibling;o.childExpirationTime=a}if(null!==t)return t;null!==e&&0===(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=$a.firstEffect),null!==$a.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=$a.firstEffect),e.lastEffect=$a.lastEffect),1<$a.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=$a:e.firstEffect=$a,e.lastEffect=$a))}else{if(null!==(t=pa($a)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=$a.sibling))return t;$a=e}while(null!==$a);return Qa===Ia&&(Qa=Ha),null}function Ol(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Nl(e){var t=$u();return Qu(99,jl.bind(null,e,t)),null}function jl(e,t){if(Ml(),(Va&(Ra|Ma))!==Na)throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var u=Ol(n);if(e.firstPendingTime=u,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Wa&&($a=Wa=null,Ga=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,u=n.firstEffect):u=n:u=n.firstEffect,null!==u){var o=Va;Va|=Ma,Oa.current=null,er=Fn;var a=Qn();if(Kn(a)){if("selectionStart"in a)var l={start:a.selectionStart,end:a.selectionEnd};else e:{var c=(l=(l=a.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,m=0,g=0,v=a,D=null;t:for(;;){for(var y;v!==l||0!==s&&3!==v.nodeType||(p=d+s),v!==f||0!==c&&3!==v.nodeType||(h=d+c),3===v.nodeType&&(d+=v.nodeValue.length),null!==(y=v.firstChild);)D=v,v=y;for(;;){if(v===a)break t;if(D===l&&++m===s&&(p=d),D===f&&++g===c&&(h=d),null!==(y=v.nextSibling))break;D=(v=D).parentNode}v=y}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;tr={focusedElem:a,selectionRange:l},Fn=!1,rl=u;do{try{Rl()}catch(e){if(null===rl)throw Error(i(330));ql(rl,e),rl=rl.nextEffect}}while(null!==rl);rl=u;do{try{for(a=e,l=t;null!==rl;){var b=rl.effectTag;if(16&b&&He(rl.stateNode,""),128&b){var E=rl.alternate;if(null!==E){var C=E.ref;null!==C&&("function"===typeof C?C(null):C.current=null)}}switch(1038&b){case 2:Aa(rl),rl.effectTag&=-3;break;case 6:Aa(rl),rl.effectTag&=-3,wa(rl.alternate,rl);break;case 1024:rl.effectTag&=-1025;break;case 1028:rl.effectTag&=-1025,wa(rl.alternate,rl);break;case 4:wa(rl.alternate,rl);break;case 8:Fa(a,s=rl,l),Ea(s)}rl=rl.nextEffect}}catch(e){if(null===rl)throw Error(i(330));ql(rl,e),rl=rl.nextEffect}}while(null!==rl);if(C=tr,E=Qn(),b=C.focusedElem,l=C.selectionRange,E!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==l&&Kn(b)&&(E=l.start,void 0===(C=l.end)&&(C=E),"selectionStart"in b?(b.selectionStart=E,b.selectionEnd=Math.min(C,b.value.length)):(C=(E=b.ownerDocument||document)&&E.defaultView||window).getSelection&&(C=C.getSelection(),s=b.textContent.length,a=Math.min(l.start,s),l=void 0===l.end?a:Math.min(l.end,s),!C.extend&&a>l&&(s=l,l=a,a=s),s=Gn(b,a),f=Gn(b,l),s&&f&&(1!==C.rangeCount||C.anchorNode!==s.node||C.anchorOffset!==s.offset||C.focusNode!==f.node||C.focusOffset!==f.offset)&&((E=E.createRange()).setStart(s.node,s.offset),C.removeAllRanges(),a>l?(C.addRange(E),C.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),C.addRange(E))))),E=[];for(C=b;C=C.parentNode;)1===C.nodeType&&E.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"===typeof b.focus&&b.focus(),b=0;b<E.length;b++)(C=E[b]).element.scrollLeft=C.left,C.element.scrollTop=C.top}tr=null,Fn=!!er,er=null,e.current=n,rl=u;do{try{for(b=r;null!==rl;){var A=rl.effectTag;if(36&A){var F=rl.alternate;switch(C=b,(E=rl).tag){case 0:case 11:case 15:ya(16,32,E);break;case 1:var w=E.stateNode;if(4&E.effectTag)if(null===F)w.componentDidMount();else{var x=E.elementType===E.type?F.memoizedProps:to(E.type,F.memoizedProps);w.componentDidUpdate(x,F.memoizedState,w.__reactInternalSnapshotBeforeUpdate)}var B=E.updateQueue;null!==B&&Ao(0,B,w);break;case 3:var k=E.updateQueue;if(null!==k){if(a=null,null!==E.child)switch(E.child.tag){case 5:a=E.child.stateNode;break;case 1:a=E.child.stateNode}Ao(0,k,a)}break;case 5:var S=E.stateNode;null===F&&4&E.effectTag&&nr(E.type,E.memoizedProps)&&S.focus();break;case 6:case 4:case 12:break;case 13:if(null===E.memoizedState){var T=E.alternate;if(null!==T){var _=T.memoizedState;if(null!==_){var P=_.dehydrated;null!==P&&wt(P)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(i(163))}}if(128&A){E=void 0;var O=rl.ref;if(null!==O){var N=rl.stateNode;switch(rl.tag){case 5:E=N;break;default:E=N}"function"===typeof O?O(E):O.current=E}}rl=rl.nextEffect}}catch(e){if(null===rl)throw Error(i(330));ql(rl,e),rl=rl.nextEffect}}while(null!==rl);rl=null,qu(),Va=o}else e.current=n;if(al)al=!1,ll=e,cl=t;else for(rl=u;null!==rl;)t=rl.nextEffect,rl.nextEffect=null,rl=t;if(0===(t=e.firstPendingTime)&&(il=null),1073741823===t?e===dl?fl++:(fl=0,dl=e):fl=0,"function"===typeof Hl&&Hl(n.stateNode,r),yl(e),ul)throw ul=!1,e=ol,ol=null,e;return(Va&ja)!==Na?null:(Xu(),null)}function Rl(){for(;null!==rl;){var e=rl.effectTag;0!==(256&e)&&Da(rl.alternate,rl),0===(512&e)||al||(al=!0,Ku(97,(function(){return Ml(),null}))),rl=rl.nextEffect}}function Ml(){if(90!==cl){var e=97<cl?97:cl;return cl=90,Qu(e,Il)}}function Il(){if(null===ll)return!1;var e=ll;if(ll=null,(Va&(Ra|Ma))!==Na)throw Error(i(331));var t=Va;for(Va|=Ma,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!==(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:ya(128,0,n),ya(0,64,n)}}catch(t){if(null===e)throw Error(i(330));ql(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Va=t,Xu(),!0}function Ll(e,t,n){Do(e,t=ka(e,t=ha(n,t),1073741823)),null!==(e=vl(e,1073741823))&&yl(e)}function ql(e,t){if(3===e.tag)Ll(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ll(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"===typeof n.type.getDerivedStateFromError||"function"===typeof r.componentDidCatch&&(null===il||!il.has(r))){Do(n,e=Sa(n,e=ha(t,e),1073741823)),null!==(n=vl(n,1073741823))&&yl(n);break}}n=n.return}}function Ul(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Wa===e&&Ga===n?Qa===za||Qa===Ua&&1073741823===Ya&&Wu()-tl<nl?Fl(e,Ga):el=!0:ec(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),yl(e)))}function zl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=ml(t=hl(),e,null)),null!==(e=vl(e,t))&&yl(e)}Ta=function(e,t,n){var r=t.expirationTime;if(null!==e){var u=t.pendingProps;if(e.memoizedProps!==u||vu.current)Wi=!0;else{if(r<n){switch(Wi=!1,t.tag){case 3:ea(t),Hi();break;case 5:if($o(t),4&t.mode&&1!==n&&u.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:bu(t.type)&&wu(t);break;case 4:Vo(t,t.stateNode.containerInfo);break;case 10:ao(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ia(e,t,n):(hu(Qo,1&Qo.current),null!==(t=sa(e,t,n))?t.sibling:null);hu(Qo,1&Qo.current);break;case 19:if(r=t.childExpirationTime>=n,0!==(64&e.effectTag)){if(r)return ca(e,t,n);t.effectTag|=64}if(null!==(u=t.memoizedState)&&(u.rendering=null,u.tail=null),hu(Qo,Qo.current),!r)return null}return sa(e,t,n)}Wi=!1}}else Wi=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,u=yu(t,gu.current),so(t,n),u=hi(null,t,r,e,u,n),t.effectTag|=1,"object"===typeof u&&null!==u&&"function"===typeof u.render&&void 0===u.$$typeof){if(t.tag=1,mi(),bu(r)){var o=!0;wu(t)}else o=!1;t.memoizedState=null!==u.state&&void 0!==u.state?u.state:null;var a=r.getDerivedStateFromProps;"function"===typeof a&&Bo(t,r,a,e),u.updater=ko,t.stateNode=u,u._reactInternalFiber=t,Po(t,r,e,n),t=Zi(null,t,r,!0,o,n)}else t.tag=0,$i(null,t,u,n),t=t.child;return t;case 16:if(u=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(u),1!==u._status)throw u._result;switch(u=u._result,t.type=u,o=t.tag=function(e){if("function"===typeof e)return Gl(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===V)return 11;if(e===G)return 14}return 2}(u),e=to(u,e),o){case 0:t=Xi(null,t,u,e,n);break;case 1:t=Ji(null,t,u,e,n);break;case 11:t=Gi(null,t,u,e,n);break;case 14:t=Qi(null,t,u,to(u.type,e),r,n);break;default:throw Error(i(306,u,""))}return t;case 0:return r=t.type,u=t.pendingProps,Xi(e,t,r,u=t.elementType===r?u:to(r,u),n);case 1:return r=t.type,u=t.pendingProps,Ji(e,t,r,u=t.elementType===r?u:to(r,u),n);case 3:if(ea(t),null===(r=t.updateQueue))throw Error(i(282));if(u=null!==(u=t.memoizedState)?u.element:null,Co(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===u)Hi(),t=sa(e,t,n);else{if((u=t.stateNode.hydrate)&&(Ri=ir(t.stateNode.containerInfo.firstChild),ji=t,u=Mi=!0),u)for(n=Io(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else $i(e,t,r,n),Hi();t=t.child}return t;case 5:return $o(t),null===e&&qi(t),r=t.type,u=t.pendingProps,o=null!==e?e.memoizedProps:null,a=u.children,rr(r,u)?a=null:null!==o&&rr(r,o)&&(t.effectTag|=16),Yi(e,t),4&t.mode&&1!==n&&u.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):($i(e,t,a,n),t=t.child),t;case 6:return null===e&&qi(t),null;case 13:return ia(e,t,n);case 4:return Vo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Mo(t,null,r,n):$i(e,t,r,n),t.child;case 11:return r=t.type,u=t.pendingProps,Gi(e,t,r,u=t.elementType===r?u:to(r,u),n);case 7:return $i(e,t,t.pendingProps,n),t.child;case 8:case 12:return $i(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,u=t.pendingProps,a=t.memoizedProps,ao(t,o=u.value),null!==a){var l=a.value;if(0===(o=eu(l,o)?0:0|("function"===typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(a.children===u.children&&!vu.current){t=sa(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){a=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!==(s.observedBits&o)){1===l.tag&&((s=go(n,null)).tag=2,Do(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),co(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else a=10===l.tag&&l.type===t.type?null:l.child;if(null!==a)a.return=l;else for(a=l;null!==a;){if(a===t){a=null;break}if(null!==(l=a.sibling)){l.return=a.return,a=l;break}a=a.return}l=a}}$i(e,t,u.children,n),t=t.child}return t;case 9:return u=t.type,r=(o=t.pendingProps).children,so(t,n),r=r(u=fo(u,o.unstable_observedBits)),t.effectTag|=1,$i(e,t,r,n),t.child;case 14:return o=to(u=t.type,t.pendingProps),Qi(e,t,u,o=to(u.type,o),r,n);case 15:return Ki(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,u=t.pendingProps,u=t.elementType===r?u:to(r,u),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,bu(r)?(e=!0,wu(t)):e=!1,so(t,n),To(t,r,u),Po(t,r,u,n),Zi(null,t,r,!0,e,n);case 19:return ca(e,t,n)}throw Error(i(156,t.tag))};var Hl=null,Vl=null;function Wl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function $l(e,t,n,r){return new Wl(e,t,n,r)}function Gl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ql(e,t){var n=e.alternate;return null===n?((n=$l(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kl(e,t,n,r,u,o){var a=2;if(r=e,"function"===typeof e)Gl(e)&&(a=1);else if("string"===typeof e)a=5;else e:switch(e){case I:return Yl(n.children,u,o,t);case H:a=8,u|=7;break;case L:a=8,u|=1;break;case q:return(e=$l(12,n,t,8|u)).elementType=q,e.type=q,e.expirationTime=o,e;case W:return(e=$l(13,n,t,u)).type=W,e.elementType=W,e.expirationTime=o,e;case $:return(e=$l(19,n,t,u)).elementType=$,e.expirationTime=o,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case U:a=10;break e;case z:a=9;break e;case V:a=11;break e;case G:a=14;break e;case Q:a=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=$l(a,n,t,u)).elementType=e,t.type=r,t.expirationTime=o,t}function Yl(e,t,n,r){return(e=$l(7,e,r,t)).expirationTime=n,e}function Xl(e,t,n){return(e=$l(6,e,null,t)).expirationTime=n,e}function Jl(e,t,n){return(t=$l(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function ec(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function tc(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function nc(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function rc(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function uc(e,t,n,r){var u=t.current,o=hl(),a=wo.suspense;o=ml(o,u,a);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(bu(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===n.tag){var c=n.type;if(bu(c)){n=Fu(n,c,l);break e}}n=l}else n=mu;return null===t.context?t.context=n:t.pendingContext=n,(t=go(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),Do(u,t),gl(u,o),o}function oc(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ic(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ac(e,t){ic(e,t),(e=e.alternate)&&ic(e,t)}function lc(e,t,n){var r=new Zl(e,t,n=null!=n&&!0===n.hydrate),u=$l(3,null,null,2===t?7:1===t?3:0);r.current=u,u.stateNode=r,e[fr]=r.current,n&&0!==t&&function(e){var t=Nn(e);mt.forEach((function(n){jn(n,e,t)})),gt.forEach((function(n){jn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function cc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function sc(e,t,n,r,u){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"===typeof u){var a=u;u=function(){var e=oc(i);a.call(e)}}uc(t,i,e,u)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new lc(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"===typeof u){var l=u;u=function(){var e=oc(i);l.call(e)}}Al((function(){uc(t,i,e,u)}))}return oc(i)}function fc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!cc(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:M,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}ut=function(e){if(13===e.tag){var t=eo(hl(),150,100);gl(e,t),ac(e,t)}},ot=function(e){if(13===e.tag){hl();var t=Zu++;gl(e,t),ac(e,t)}},it=function(e){if(13===e.tag){var t=hl();gl(e,t=ml(t,e,null)),ac(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+\'][type="radio"]\'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var u=mr(r);if(!u)throw Error(i(90));we(r),Se(r,u)}}}break;case"textarea":Re(e,n);break;case"select":null!=(t=n.value)&&Oe(e,!!n.multiple,t,!1)}},lc.prototype.render=function(e,t){uc(e,this._internalRoot,null,void 0===t?null:t)},lc.prototype.unmount=function(e){uc(null,this._internalRoot,null,void 0===e?null:e)},ie=Cl,ae=function(e,t,n,r){var u=Va;Va|=4;try{return Qu(98,e.bind(null,t,n,r))}finally{(Va=u)===Na&&Xu()}},le=function(){(Va&(1|Ra|Ma))===Na&&(function(){if(null!==sl){var e=sl;sl=null,e.forEach((function(e,t){rc(t,e),yl(t)})),Xu()}}(),Ml())},ce=function(e,t){var n=Va;Va|=2;try{return e(t)}finally{(Va=n)===Na&&Xu()}};var dc,pc,hc={createPortal:fc,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"===typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},hydrate:function(e,t,n){if(!cc(t))throw Error(i(200));return sc(null,e,t,!0,n)},render:function(e,t,n){if(!cc(t))throw Error(i(200));return sc(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!cc(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return sc(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!cc(e))throw Error(i(40));return!!e._reactRootContainer&&(Al((function(){sc(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return fc.apply(void 0,arguments)},unstable_batchedUpdates:Cl,flushSync:function(e,t){if((Va&(Ra|Ma))!==Na)throw Error(i(187));var n=Va;Va|=1;try{return Qu(99,e.bind(null,t))}finally{Va=n,Xu()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[pr,hr,mr,_.injectEventPluginsByName,d,Pt,function(e){B(e,_t)},ue,oe,Tn,T,Ml,{current:!1}]}};pc=(dc={findFiberByHostInstance:dr,bundleType:0,version:"16.11.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"===typeof{})return!1;var t={};if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Hl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64===(64&e.current.effectTag))}catch(e){}},Vl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(u({},dc,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:O.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return pc?pc(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var mc={default:hc},gc=mc&&hc||mc;e.exports=gc.default||gc},function(e,t,n){"use strict";e.exports=n(184)},function(e,t,n){"use strict";var r,u,o,i,a;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"===typeof window||"function"!==typeof MessageChannel){var l=null,c=null,s=function e(){if(null!==l)try{var n=t.unstable_now();l(!0,n),l=null}catch(t){throw setTimeout(e,0),t}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},u=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},i=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout,g=window.requestAnimationFrame,v=window.cancelAnimationFrame;if("undefined"!==typeof console&&("function"!==typeof g&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof v&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),"object"===typeof d&&"function"===typeof d.now)t.unstable_now=function(){return d.now()};else{var D=p.now();t.unstable_now=function(){return p.now()-D}}var y=!1,b=null,E=-1,C=5,A=0;i=function(){return t.unstable_now()>=A},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):C=0<e?Math.floor(1e3/e):33.33};var F=new MessageChannel,w=F.port2;F.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();A=e+C;try{b(!0,e)?w.postMessage(null):(y=!1,b=null)}catch(e){throw w.postMessage(null),e}}else y=!1},r=function(e){b=e,y||(y=!0,w.postMessage(null))},u=function(e,n){E=h((function(){e(t.unstable_now())}),n)},o=function(){m(E),E=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),u=e[r];if(!(void 0!==u&&0<S(u,t)))break e;e[r]=t,e[n]=u,n=r}}function B(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,u=e.length;r<u;){var o=2*(r+1)-1,i=e[o],a=o+1,l=e[a];if(void 0!==i&&0>S(i,n))void 0!==l&&0>S(l,i)?(e[r]=l,e[a]=n,r=a):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==l&&0>S(l,n)))break e;e[r]=l,e[a]=n,r=a}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var T=[],_=[],P=1,O=null,N=3,j=!1,R=!1,M=!1;function I(e){for(var t=B(_);null!==t;){if(null===t.callback)k(_);else{if(!(t.startTime<=e))break;k(_),t.sortIndex=t.expirationTime,x(T,t)}t=B(_)}}function L(e){if(M=!1,I(e),!R)if(null!==B(T))R=!0,r(q);else{var t=B(_);null!==t&&u(L,t.startTime-e)}}function q(e,n){R=!1,M&&(M=!1,o()),j=!0;var r=N;try{for(I(n),O=B(T);null!==O&&(!(O.expirationTime>n)||e&&!i());){var a=O.callback;if(null!==a){O.callback=null,N=O.priorityLevel;var l=a(O.expirationTime<=n);n=t.unstable_now(),"function"===typeof l?O.callback=l:O===B(T)&&k(T),I(n)}else k(T);O=B(T)}if(null!==O)var c=!0;else{var s=B(_);null!==s&&u(L,s.startTime-n),c=!1}return c}finally{O=null,N=r,j=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var z=a;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,i){var a=t.unstable_now();if("object"===typeof i&&null!==i){var l=i.delay;l="number"===typeof l&&0<l?a+l:a,i="number"===typeof i.timeout?i.timeout:U(e)}else i=U(e),l=a;return e={id:P++,callback:n,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>a?(e.sortIndex=l,x(_,e),null===B(T)&&e===B(_)&&(M?o():M=!0,u(L,l-a))):(e.sortIndex=i,x(T,e),R||j||(R=!0,r(q))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_shouldYield=function(){var e=t.unstable_now();I(e);var n=B(T);return n!==O&&null!==O&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<O.expirationTime||i()},t.unstable_requestPaint=z,t.unstable_continueExecution=function(){R||j||(R=!0,r(q))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return B(T)},t.unstable_Profiling=null},function(e,t){var n={"&lt":"<","&gt":">","&quot":\'"\',"&apos":"\'","&amp":"&","&lt;":"<","&gt;":">","&quot;":\'"\',"&apos;":"\'","&amp;":"&"},r={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},u={"<":"&lt;",">":"&gt;",\'"\':"&quot;","\'":"&apos;","&":"&amp;"};function o(){}o.prototype.encode=function(e){return e&&e.length?e.replace(/<|>|"|\'|&/g,(function(e){return u[e]})):""},o.encode=function(e){return(new o).encode(e)},o.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return n[e]||e})):""},o.decode=function(e){return(new o).decode(e)},o.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",u=0;u<t;){var o=e.charCodeAt(u),i=r[o];i?(n+="&"+i+";",u++):(n+=o<32||o>126?"&#"+o+";":e.charAt(u),u++)}return n},o.encodeNonUTF=function(e){return(new o).encodeNonUTF(e)},o.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=e.charCodeAt(r);u<=255?n+=e[r++]:(n+="&#"+u+";",r++)}return n},o.encodeNonASCII=function(e){return(new o).encodeNonASCII(e)},e.exports=o},function(e,t){for(var n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],r=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],u={},o={},i=0,a=n.length;i<a;){var l=n[i],c=r[i];u[l]=String.fromCharCode(c),o[c]=l,i++}function s(){}s.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var n;if("#"===t.charAt(0)){var r="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(r)||r<-32768||r>65535||(n=String.fromCharCode(r))}else n=u[t];return n||e})):""},s.decode=function(e){return(new s).decode(e)},s.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=o[e.charCodeAt(r)];n+=u?"&"+u+";":e.charAt(r),r++}return n},s.encode=function(e){return(new s).encode(e)},s.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=e.charCodeAt(r),i=o[u];n+=i?"&"+i+";":u<32||u>126?"&#"+u+";":e.charAt(r),r++}return n},s.encodeNonUTF=function(e){return(new s).encodeNonUTF(e)},s.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=e.charCodeAt(r);u<=255?n+=e[r++]:(n+="&#"+u+";",r++)}return n},s.encodeNonASCII=function(e){return(new s).encodeNonASCII(e)},e.exports=s},function(e,t,n){"use strict";var r=n(188);function u(){var e=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(192));return u=function(){return e},e}function o(){var e=a(n(193));return o=function(){return e},e}function i(){var e=a(n(196));return i=function(){return e},e}function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.shouldHighlight=d,t.getChalk=p,t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return d(t)?function(e,t){return t.replace(u().default,(function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var u=f(n),o=e[u];return o?n[0].split(l).map((function(e){return o(e)})).join("\\n"):n[0]}))}(function(e){return{keyword:e.cyan,capitalized:e.yellow,jsx_tag:e.yellow,punctuator:e.yellow,number:e.magenta,string:e.green,regex:e.magenta,comment:e.grey,invalid:e.white.bgRed.bold}}(p(t)),e):e};var l=/\\r\\n|[\\n\\r\\u2028\\u2029]/,c=/^[a-z][\\w-]*$/i,s=/^[()[\\]{}]$/;function f(e){var t=e.slice(-2),n=r(t,2),i=n[0],a=n[1],l=(0,u().matchToToken)(e);if("name"===l.type){if(o().default.keyword.isReservedWordES6(l.value))return"keyword";if(c.test(l.value)&&("<"===a[i-1]||"</"==a.substr(i-2,2)))return"jsx_tag";if(l.value[0]!==l.value[0].toLowerCase())return"capitalized"}return"punctuator"===l.type&&s.test(l.value)?"bracket":"invalid"!==l.type||"@"!==l.value&&"#"!==l.value?l.type:"punctuator"}function d(e){return i().default.supportsColor||e.forceColor}function p(e){var t=i().default;return e.forceColor&&(t=new(i().default.constructor)({enabled:!0,level:1})),t}},function(e,t,n){var r=n(189),u=n(190),o=n(191);e.exports=function(e,t){return r(e)||u(e,t)||o()}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,u=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(r=(i=a.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){u=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(u)throw o}}return n}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=/(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g,t.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}},function(e,t,n){!function(){"use strict";t.ast=n(194),t.code=n(84),t.keyword=n(195)}()},function(e,t){!function(){"use strict";function t(e){if(null==e)return!1;switch(e.type){case"BlockStatement":case"BreakStatement":case"ContinueStatement":case"DebuggerStatement":case"DoWhileStatement":case"EmptyStatement":case"ExpressionStatement":case"ForInStatement":case"ForStatement":case"IfStatement":case"LabeledStatement":case"ReturnStatement":case"SwitchStatement":case"ThrowStatement":case"TryStatement":case"VariableDeclaration":case"WhileStatement":case"WithStatement":return!0}return!1}function n(e){switch(e.type){case"IfStatement":return null!=e.alternate?e.alternate:e.consequent;case"LabeledStatement":case"ForStatement":case"ForInStatement":case"WhileStatement":case"WithStatement":return e.body}return null}e.exports={isExpression:function(e){if(null==e)return!1;switch(e.type){case"ArrayExpression":case"AssignmentExpression":case"BinaryExpression":case"CallExpression":case"ConditionalExpression":case"FunctionExpression":case"Identifier":case"Literal":case"LogicalExpression":case"MemberExpression":case"NewExpression":case"ObjectExpression":case"SequenceExpression":case"ThisExpression":case"UnaryExpression":case"UpdateExpression":return!0}return!1},isStatement:t,isIterationStatement:function(e){if(null==e)return!1;switch(e.type){case"DoWhileStatement":case"ForInStatement":case"ForStatement":case"WhileStatement":return!0}return!1},isSourceElement:function(e){return t(e)||null!=e&&"FunctionDeclaration"===e.type},isProblematicIfStatement:function(e){var t;if("IfStatement"!==e.type)return!1;if(null==e.alternate)return!1;t=e.consequent;do{if("IfStatement"===t.type&&null==t.alternate)return!0;t=n(t)}while(t);return!1},trailingStatement:n}}()},function(e,t,n){!function(){"use strict";var t=n(84);function r(e,t){return!(!t&&"yield"===e)&&u(e,t)}function u(e,t){if(t&&function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"let":return!0;default:return!1}}(e))return!0;switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}}function o(e,t){return"null"===e||"true"===e||"false"===e||r(e,t)}function i(e,t){return"null"===e||"true"===e||"false"===e||u(e,t)}function a(e){var n,r,u;if(0===e.length)return!1;if(u=e.charCodeAt(0),!t.isIdentifierStartES5(u))return!1;for(n=1,r=e.length;n<r;++n)if(u=e.charCodeAt(n),!t.isIdentifierPartES5(u))return!1;return!0}function l(e){var n,r,u,o,i;if(0===e.length)return!1;for(i=t.isIdentifierStartES6,n=0,r=e.length;n<r;++n){if(55296<=(u=e.charCodeAt(n))&&u<=56319){if(++n>=r)return!1;if(!(56320<=(o=e.charCodeAt(n))&&o<=57343))return!1;u=1024*(u-55296)+(o-56320)+65536}if(!i(u))return!1;i=t.isIdentifierPartES6}return!0}e.exports={isKeywordES5:r,isKeywordES6:u,isReservedWordES5:o,isReservedWordES6:i,isRestrictedWord:function(e){return"eval"===e||"arguments"===e},isIdentifierNameES5:a,isIdentifierNameES6:l,isIdentifierES5:function(e,t){return a(e)&&!o(e,t)},isIdentifierES6:function(e,t){return l(e)&&!i(e,t)}}}()},function(e,t,n){"use strict";(function(t){var r=n(197),u=n(198),o=n(203).stdout,i=n(204),a="win32"===t.platform&&!(Object({NODE_ENV:"production"}).TERM||"").toLowerCase().startsWith("xterm"),l=["ansi","ansi","ansi256","ansi16m"],c=new Set(["gray"]),s=Object.create(null);function f(e,t){t=t||{};var n=o?o.level:0;e.level=void 0===t.level?n:t.level,e.enabled="enabled"in t?t.enabled:e.level>0}function d(e){if(!this||!(this instanceof d)||this.template){var t={};return f(t,e),t.template=function(){var e=[].slice.call(arguments);return w.apply(null,[t.template].concat(e))},Object.setPrototypeOf(t,d.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=d,t.template}f(this,e)}a&&(u.blue.open="[94m");for(var p=function(){var e=m[h];u[e].closeRe=new RegExp(r(u[e].close),"g"),s[e]={get:function(){var t=u[e];return A.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}}},h=0,m=Object.keys(u);h<m.length;h++)p();s.visible={get:function(){return A.call(this,this._styles||[],!0,"visible")}},u.color.closeRe=new RegExp(r(u.color.close),"g");for(var g=function(){var e=D[v];if(c.has(e))return"continue";s[e]={get:function(){var t=this.level;return function(){var n=u.color[l[t]][e].apply(null,arguments),r={open:n,close:u.color.close,closeRe:u.color.closeRe};return A.call(this,this._styles?this._styles.concat(r):[r],this._empty,e)}}}},v=0,D=Object.keys(u.color.ansi);v<D.length;v++)g();u.bgColor.closeRe=new RegExp(r(u.bgColor.close),"g");for(var y=function(){var e=E[b];if(c.has(e))return"continue";var t="bg"+e[0].toUpperCase()+e.slice(1);s[t]={get:function(){var t=this.level;return function(){var n=u.bgColor[l[t]][e].apply(null,arguments),r={open:n,close:u.bgColor.close,closeRe:u.bgColor.closeRe};return A.call(this,this._styles?this._styles.concat(r):[r],this._empty,e)}}}},b=0,E=Object.keys(u.bgColor.ansi);b<E.length;b++)y();var C=Object.defineProperties((function(){}),s);function A(e,t,n){var r=function e(){return F.apply(e,arguments)};r._styles=e,r._empty=t;var u=this;return Object.defineProperty(r,"level",{enumerable:!0,get:function(){return u.level},set:function(e){u.level=e}}),Object.defineProperty(r,"enabled",{enumerable:!0,get:function(){return u.enabled},set:function(e){u.enabled=e}}),r.hasGrey=this.hasGrey||"gray"===n||"grey"===n,r.__proto__=C,r}function F(){var e=arguments,t=e.length,n=String(arguments[0]);if(0===t)return"";if(t>1)for(var r=1;r<t;r++)n+=" "+e[r];if(!this.enabled||this.level<=0||!n)return this._empty?"":n;var o=u.dim.open;a&&this.hasGrey&&(u.dim.open="");var i=!0,l=!1,c=void 0;try{for(var s,f=this._styles.slice().reverse()[Symbol.iterator]();!(i=(s=f.next()).done);i=!0){var d=s.value;n=(n=d.open+n.replace(d.closeRe,d.open)+d.close).replace(/\\r?\\n/g,"".concat(d.close,"$&").concat(d.open))}}catch(e){l=!0,c=e}finally{try{i||null==f.return||f.return()}finally{if(l)throw c}}return u.dim.open=o,n}function w(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");for(var n=[].slice.call(arguments,2),r=[t.raw[0]],u=1;u<t.length;u++)r.push(String(n[u-1]).replace(/[{}\\\\]/g,"\\\\$&")),r.push(String(t.raw[u]));return i(e,r.join(""))}Object.defineProperties(d.prototype,s),e.exports=d(),e.exports.supportsColor=o,e.exports.default=e.exports}).call(this,n(48))},function(e,t,n){"use strict";var r=/[|\\\\{}()[\\]^$+*?.]/g;e.exports=function(e){if("string"!==typeof e)throw new TypeError("Expected a string");return e.replace(r,"\\\\$&")}},function(e,t,n){"use strict";(function(e){var t=n(200),r=function(e,n){return function(){var r=e.apply(t,arguments);return"[".concat(r+n,"m")}},u=function(e,n){return function(){var r=e.apply(t,arguments);return"[".concat(38+n,";5;").concat(r,"m")}},o=function(e,n){return function(){var r=e.apply(t,arguments);return"[".concat(38+n,";2;").concat(r[0],";").concat(r[1],";").concat(r[2],"m")}};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){var e=new Map,n={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};n.color.grey=n.color.gray;for(var i=0,a=Object.keys(n);i<a.length;i++){for(var l=a[i],c=n[l],s=0,f=Object.keys(c);s<f.length;s++){var d=f[s],p=c[d];n[d]={open:"[".concat(p[0],"m"),close:"[".concat(p[1],"m")},c[d]=n[d],e.set(p[0],p[1])}Object.defineProperty(n,l,{value:c,enumerable:!1}),Object.defineProperty(n,"codes",{value:e,enumerable:!1})}var h=function(e){return e},m=function(e,t,n){return[e,t,n]};n.color.close="[39m",n.bgColor.close="[49m",n.color.ansi={ansi:r(h,0)},n.color.ansi256={ansi256:u(h,0)},n.color.ansi16m={rgb:o(m,0)},n.bgColor.ansi={ansi:r(h,10)},n.bgColor.ansi256={ansi256:u(h,10)},n.bgColor.ansi16m={rgb:o(m,10)};for(var g=0,v=Object.keys(t);g<v.length;g++){var D=v[g];if("object"===typeof t[D]){var y=t[D];"ansi16"===D&&(D="ansi"),"ansi16"in y&&(n.color.ansi[D]=r(y.ansi16,0),n.bgColor.ansi[D]=r(y.ansi16,10)),"ansi256"in y&&(n.color.ansi256[D]=u(y.ansi256,0),n.bgColor.ansi256[D]=u(y.ansi256,10)),"rgb"in y&&(n.color.ansi16m[D]=o(y.rgb,0),n.bgColor.ansi16m[D]=o(y.rgb,10))}}return n}})}).call(this,n(199)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(85),u=n(202),o={};Object.keys(r).forEach((function(e){o[e]={},Object.defineProperty(o[e],"channels",{value:r[e].channels}),Object.defineProperty(o[e],"labels",{value:r[e].labels});var t=u(e);Object.keys(t).forEach((function(n){var r=t[n];o[e][n]=function(e){var t=function(t){if(void 0===t||null===t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var n=e(t);if("object"===typeof n)for(var r=n.length,u=0;u<r;u++)n[u]=Math.round(n[u]);return n};return"conversion"in e&&(t.conversion=e.conversion),t}(r),o[e][n].raw=function(e){var t=function(t){return void 0===t||null===t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(r)}))})),e.exports=o},function(e,t,n){"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,n){var r=n(85);function u(e){var t=function(){for(var e={},t=Object.keys(r),n=t.length,u=0;u<n;u++)e[t[u]]={distance:-1,parent:null};return e}(),n=[e];for(t[e].distance=0;n.length;)for(var u=n.pop(),o=Object.keys(r[u]),i=o.length,a=0;a<i;a++){var l=o[a],c=t[l];-1===c.distance&&(c.distance=t[u].distance+1,c.parent=u,n.unshift(l))}return t}function o(e,t){return function(n){return t(e(n))}}function i(e,t){for(var n=[t[e].parent,e],u=r[t[e].parent][e],i=t[e].parent;t[i].parent;)n.unshift(t[i].parent),u=o(r[t[i].parent][i],u),i=t[i].parent;return u.conversion=n,u}e.exports=function(e){for(var t=u(e),n={},r=Object.keys(t),o=r.length,a=0;a<o;a++){var l=r[a];null!==t[l].parent&&(n[l]=i(l,t))}return n}},function(e,t,n){"use strict";e.exports={stdout:!1,stderr:!1}},function(e,t,n){"use strict";var r=/(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi,u=/(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g,o=/^([\'"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/,i=/\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi,a=new Map([["n","\\n"],["r","\\r"],["t","\\t"],["b","\\b"],["f","\\f"],["v","\\v"],["0","\\0"],["\\\\","\\\\"],["e",""],["a",""]]);function l(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):a.get(e)||e}function c(e,t){var n,r=[],u=t.trim().split(/\\s*,\\s*/g),a=!0,c=!1,s=void 0;try{for(var f,d=u[Symbol.iterator]();!(a=(f=d.next()).done);a=!0){var p=f.value;if(isNaN(p)){if(!(n=p.match(o)))throw new Error("Invalid Chalk template style argument: ".concat(p," (in style \'").concat(e,"\')"));r.push(n[2].replace(i,(function(e,t,n){return t?l(t):n})))}else r.push(Number(p))}}catch(e){c=!0,s=e}finally{try{a||null==d.return||d.return()}finally{if(c)throw s}}return r}function s(e){u.lastIndex=0;for(var t,n=[];null!==(t=u.exec(e));){var r=t[1];if(t[2]){var o=c(r,t[2]);n.push([r].concat(o))}else n.push([r])}return n}function f(e,t){var n={},r=!0,u=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value,c=!0,s=!1,f=void 0;try{for(var d,p=l.styles[Symbol.iterator]();!(c=(d=p.next()).done);c=!0){var h=d.value;n[h[0]]=l.inverse?null:h.slice(1)}}catch(e){s=!0,f=e}finally{try{c||null==p.return||p.return()}finally{if(s)throw f}}}}catch(e){u=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(u)throw o}}for(var m=e,g=0,v=Object.keys(n);g<v.length;g++){var D=v[g];if(Array.isArray(n[D])){if(!(D in m))throw new Error("Unknown Chalk style: ".concat(D));m=n[D].length>0?m[D].apply(m,n[D]):m[D]}}return m}e.exports=function(e,t){var n=[],u=[],o=[];if(t.replace(r,(function(t,r,i,a,c,d){if(r)o.push(l(r));else if(a){var p=o.join("");o=[],u.push(0===n.length?p:f(e,n)(p)),n.push({inverse:i,styles:s(a)})}else if(c){if(0===n.length)throw new Error("Found extraneous } in Chalk template literal");u.push(f(e,n)(o.join(""))),o=[],n.pop()}else o.push(d)})),u.push(o.join("")),n.length>0){var i="Chalk template literal is missing ".concat(n.length," closing bracket").concat(1===n.length?"":"s"," (`}`)");throw new Error(i)}return u.join("")}},function(e,t,n){"use strict";n.r(t);n(88);var r=n(0),u=n.n(r),o=n(49),i=n.n(o),a=function(e){return{position:"relative",display:"inline-flex",flexDirection:"column",height:"100%",width:"1024px",maxWidth:"100%",overflowX:"hidden",overflowY:"auto",padding:"0.5rem",boxSizing:"border-box",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"11px",whiteSpace:"pre-wrap",wordBreak:"break-word",lineHeight:1.5,color:e.color}},l=null;var c=function(e){var t=Object(r.useContext)(De),n=e.shortcutHandler;return Object(r.useEffect)((function(){var e=function(e){n&&n(e.key)};return window.addEventListener("keydown",e),l&&l.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e),l&&l.removeEventListener("keydown",e)}}),[n]),u.a.createElement("div",{style:a(t),ref:function(e){if(e){var t=e.ownerDocument;l=t.defaultView}}},e.children)},s=function(e){return{fontFamily:"sans-serif",color:e.footer,marginTop:"0.5rem",flex:"0 0 auto"}};var f=function(e){var t=Object(r.useContext)(De);return u.a.createElement("div",{style:s(t)},e.line1,u.a.createElement("br",null),e.line2)},d=function(e){return{fontSize:"2em",fontFamily:"sans-serif",color:e.headerColor,whiteSpace:"pre-wrap",margin:"0 2rem 0.75rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"}};var p=function(e){var t=Object(r.useContext)(De);return u.a.createElement("div",{style:d(t)},e.headerText)};function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(n,!0).forEach((function(t){h(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var v={position:"relative",display:"block",padding:"0.5em",marginTop:"0.5em",marginBottom:"0.5em",overflowX:"auto",whiteSpace:"pre-wrap",borderRadius:"0.25rem"},D={fontFamily:"Consolas, Menlo, monospace"};var y=function(e){var t=e.main,n=e.codeHTML,o=Object(r.useContext)(De),i=g({},v,{backgroundColor:o.primaryPreBackground,color:o.primaryPreColor}),a=g({},v,{backgroundColor:o.secondaryPreBackground,color:o.secondaryPreColor}),l=t?i:a,c={__html:n};return u.a.createElement("pre",{style:l},u.a.createElement("code",{style:D,dangerouslySetInnerHTML:c}))},b=n(34),E=n.n(b),C=new(n(86).AllHtmlEntities),A=function(e){return{reset:[e.base05,"transparent"],black:e.base05,red:e.base08,green:e.base0B,yellow:e.base08,blue:e.base0C,magenta:e.base0C,cyan:e.base0E,gray:e.base03,lightgrey:e.base01,darkgrey:e.base03}},F={"ansi-bright-black":"black","ansi-bright-yellow":"yellow","ansi-yellow":"yellow","ansi-bright-green":"green","ansi-green":"green","ansi-bright-cyan":"cyan","ansi-cyan":"cyan","ansi-bright-red":"red","ansi-red":"red","ansi-bright-magenta":"magenta","ansi-magenta":"magenta","ansi-white":"darkgrey"};var w=function(e,t){for(var n=(new E.a).ansiToJson(C.encode(e),{use_classes:!0}),r="",u=!1,o=0;o<n.length;++o)for(var i=n[o],a=i.content,l=i.fg,c=a.split("\\n"),s=0;s<c.length;++s){u||(r+=\'<span data-ansi-line="true">\',u=!0);var f=c[s].replace("\\r",""),d=A(t)[F[l]];null!=d?r+=\'<span style="color: \'+d+\';">\'+f+"</span>":(null!=l&&console.log("Missing color mapping: ",l),r+="<span>"+f+"</span>"),s<c.length-1&&(r+="</span>",u=!1,r+="<br/>")}return u&&(r+="</span>",u=!1),r},x=/^\\.(\\/[^/\\n ]+)+\\.[^/\\n ]+$/,B=[/^.*\\((\\d+):(\\d+)\\)$/,/^Line (\\d+):.+$/];var k=function(e){for(var t=e.split("\\n"),n="",r=0,u=0,o=0;o<t.length;o++){var i=E.a.ansiToText(t[o]).trim();if(i){!n&&i.match(x)&&(n=i);for(var a=0;a<B.length;){var l=i.match(B[a]);if(l){r=parseInt(l[1],10),u=parseInt(l[2],10)+1||1;break}a++}if(n&&r)break}}return n&&r?{fileName:n,lineNumber:r,colNumber:u}:null},S={cursor:"pointer"};var T=function(e){var t=Object(r.useContext)(De),n=e.error,o=e.editorHandler,i=k(n),a=null!==i&&null!==o;return u.a.createElement(c,null,u.a.createElement(p,{headerText:"Failed to compile"}),u.a.createElement("div",{onClick:a&&i?function(){return o(i)}:null,style:a?S:null},u.a.createElement(y,{main:!0,codeHTML:w(n,t)})),u.a.createElement(f,{line1:"This error occurred during the build time and cannot be dismissed."}))};function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e,t,n){return t&&P(e.prototype,t),n&&P(e,n),e}function N(e){return(N="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e){return(j="function"===typeof Symbol&&"symbol"===N(Symbol.iterator)?function(e){return N(e)}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":N(e)})(e)}function R(e,t){return!t||"object"!==j(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return e}(e):t}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}var q=function(e){return{color:e.closeColor,lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0}};var U=function(e){var t=e.close,n=Object(r.useContext)(De);return u.a.createElement("span",{title:"Click or press Escape to dismiss.",onClick:t,style:q(n)},"×")},z={marginBottom:"0.5rem"},H={marginRight:"1em"},V={border:"none",borderRadius:"4px",padding:"3px 6px",cursor:"pointer"},W=function(e){return g({},V,{backgroundColor:e.navBackground,color:e.navArrow,borderTopRightRadius:"0px",borderBottomRightRadius:"0px",marginRight:"1px"})},$=function(e){return g({},V,{backgroundColor:e.navBackground,color:e.navArrow,borderTopLeftRadius:"0px",borderBottomLeftRadius:"0px"})};var G=function(e){var t=Object(r.useContext)(De),n=e.currentError,o=e.totalErrors,i=e.previous,a=e.next;return u.a.createElement("div",{style:z},u.a.createElement("span",{style:H},u.a.createElement("button",{onClick:i,style:W(t)},"←"),u.a.createElement("button",{onClick:a,style:$(t)},"→")),"".concat(n," of ").concat(o," errors on the page"))};function Q(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,u=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(r=(i=a.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){u=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(u)throw o}}return n}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function K(e,t){for(;null!=t&&"br"!==t.tagName.toLowerCase();)t=t.nextElementSibling;null!=t&&e.removeChild(t)}var Y=n(87);var X=function(e){var t=Object(r.useContext)(De),n=e.lines,o=e.lineNum,i=e.columnNum,a=e.contextSize,l=e.main,c=[],s=1/0;n.forEach((function(e){var t=e.content,n=t.match(/^\\s*/);""!==t&&(s=n&&n[0]?Math.min(s,n[0].length):0)})),n.forEach((function(e){var t=e.content,n=e.lineNumber;isFinite(s)&&(t=t.substring(s)),c[n-1]=t}));var f=Object(Y.codeFrameColumns)(c.join("\\n"),{start:{line:o,column:null==i?0:i-(isFinite(s)?s:0)}},{forceColor:!0,linesAbove:a,linesBelow:a}),d=w(f,t),p=document.createElement("code");p.innerHTML=d,function(e){for(var t=e.childNodes,n=0;n<t.length;++n){var r=t[n];if("span"===r.tagName.toLowerCase()){var u=r.innerText;if(null!=u)"|^"===u.replace(/\\s/g,"")&&(r.style.position="absolute",K(e,r))}}}(p);var h=p.childNodes;e:for(var m=0;m<h.length;++m)for(var g=h[m].childNodes,v=0;v<g.length;++v){var D=g[v].innerText;if(null!=D&&-1!==D.indexOf(" "+o+" |"))break e}return u.a.createElement(y,{main:l,codeHTML:p.innerHTML})};function J(e,t,n,r,u,o,i){var a;if(!i&&e&&"number"===typeof t){var l=/^[/|\\\\].*?[/|\\\\]((src|node_modules)[/|\\\\].*)/.exec(e);a=l&&l[1]?l[1]:e,a+=":"+t,n&&(a+=":"+n)}else r&&"number"===typeof u?(a=r+":"+u,o&&(a+=":"+o)):a="unknown";return a.replace("webpack://",".")}var Z=function(e){return{fontSize:"0.9em",marginBottom:"0.9em"}},ee=function(e){return{textDecoration:"none",color:e.anchorColor,cursor:"pointer"}},te=function(e){return{cursor:"pointer"}},ne=function(e){return{marginBottom:"1.5em",color:e.toggleColor,cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",background:e.toggleBackground,fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"}};var re=function(e){var t=Object(r.useContext)(De),n=Q(Object(r.useState)(!1),2),o=n[0],i=n[1],a=function(){var t=e.frame,n=t._originalFileName,r=t._originalLineNumber;return n?-1!==n.trim().indexOf(" ")?null:{fileName:n,lineNumber:r||1}:null},l=function(){var t=a();t&&e.editorHandler(t)},c=e.frame,s=e.contextSize,f=e.critical,d=e.showCode,p=c.fileName,h=c.lineNumber,m=c.columnNumber,g=c._scriptCode,v=c._originalFileName,D=c._originalLineNumber,y=c._originalColumnNumber,b=c._originalScriptCode,E=c.getFunctionName(),C=J(v,D,y,p,h,m,o),A=null;d&&(o&&g&&0!==g.length&&null!=h?A={lines:g,lineNum:h,columnNum:m,contextSize:s,main:f}:!o&&b&&0!==b.length&&null!=D&&(A={lines:b,lineNum:D,columnNum:y,contextSize:s,main:f}));var F=null!==a()&&null!==e.editorHandler;return u.a.createElement("div",null,u.a.createElement("div",null,E),u.a.createElement("div",{style:Z(t)},u.a.createElement("span",{style:F?ee(t):null,onClick:F?l:null,onKeyDown:F?function(e){"Enter"===e.key&&l()}:null,tabIndex:F?"0":null},C)),A&&u.a.createElement("span",null,u.a.createElement("span",{onClick:F?l:null,style:F?te(t):null},u.a.createElement(X,A)),u.a.createElement("button",{style:ne(t),onClick:function(){i(!o)}},"View "+(o?"source":"compiled"))))},ue={cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"},oe=function(e){return g({},ue,{color:e.color,background:e.background,marginBottom:"1.5em"})},ie=function(e){return g({},ue,{color:e.color,background:e.background,marginBottom:"0.6em"})};var ae=function(e){var t=Object(r.useContext)(De),n=Q(Object(r.useState)(!0),2),o=n[0],i=n[1],a=function(){i(!o)},l=e.children.length;return u.a.createElement("div",null,u.a.createElement("button",{onClick:a,style:o?oe(t):ie(t)},(o?"▶":"▼")+" ".concat(l," stack frames were ")+(o?"collapsed.":"expanded.")),u.a.createElement("div",{style:{display:o?"none":"block"}},e.children,u.a.createElement("button",{onClick:a,style:ie(t)},"▲ ".concat(l," stack frames were expanded."))))};function le(e){switch(e){case"EvalError":case"InternalError":case"RangeError":case"ReferenceError":case"SyntaxError":case"TypeError":case"URIError":return!0;default:return!1}}var ce={fontSize:"1em",flex:"0 1 auto",minHeight:"0px",overflow:"auto"},se=function(e){function t(){return _(this,t),R(this,M(t).apply(this,arguments))}return L(t,e),O(t,[{key:"renderFrames",value:function(){var e=this.props,t=e.stackFrames,n=e.errorName,r=e.contextSize,o=e.editorHandler,i=[],a=!1,l=[],c=0;return t.forEach((function(e,s){var f=e.fileName,d=function(e,t){return null==e||""===e||-1!==e.indexOf("/~/")||-1!==e.indexOf("/node_modules/")||-1!==e.trim().indexOf(" ")||null==t||""===t}(e._originalFileName,f),p=!le(n),h=d&&(p||a);d||(a=!0);var m=u.a.createElement(re,{key:"frame-"+s,frame:e,contextSize:r,critical:0===s,showCode:!h,editorHandler:o}),g=s===t.length-1;h&&l.push(m),h&&!g||(1===l.length?i.push(l[0]):l.length>1&&(c++,i.push(u.a.createElement(ae,{key:"bundle-"+c},l))),l=[]),h||i.push(m)})),i}},{key:"render",value:function(){return u.a.createElement("div",{style:ce},this.renderFrames())}}]),t}(r.Component),fe={display:"flex",flexDirection:"column"};var de=function(e){var t=e.errorRecord,n=e.editorHandler,r=t.error,o=t.unhandledRejection,i=t.contextSize,a=t.stackFrames,l=o?"Unhandled Rejection ("+r.name+")":r.name,c=r.message,s=c.match(/^\\w*:/)||!l?c:l+": "+c;return s=s.replace(/^Invariant Violation:\\s*/,"").replace(/^Warning:\\s*/,"").replace(" Check the render method","\\n\\nCheck the render method").replace(" Check your code at","\\n\\nCheck your code at"),u.a.createElement("div",{style:fe},u.a.createElement(p,{headerText:s}),u.a.createElement(se,{stackFrames:a,errorName:l,contextSize:i,editorHandler:n}))},pe=function(e){function t(){var e,n;_(this,t);for(var r=arguments.length,u=new Array(r),o=0;o<r;o++)u[o]=arguments[o];return(n=R(this,(e=M(t)).call.apply(e,[this].concat(u)))).state={currentIndex:0},n.previous=function(){n.setState((function(e,t){return{currentIndex:e.currentIndex>0?e.currentIndex-1:t.errorRecords.length-1}}))},n.next=function(){n.setState((function(e,t){return{currentIndex:e.currentIndex<t.errorRecords.length-1?e.currentIndex+1:0}}))},n.shortcutHandler=function(e){"Escape"===e?n.props.close():"ArrowLeft"===e?n.previous():"ArrowRight"===e&&n.next()},n}return L(t,e),O(t,[{key:"render",value:function(){var e=this.props,t=e.errorRecords,n=e.close,r=t.length;return u.a.createElement(c,{shortcutHandler:this.shortcutHandler},u.a.createElement(U,{close:n}),r>1&&u.a.createElement(G,{currentError:this.state.currentIndex+1,totalErrors:r,previous:this.previous,next:this.next}),u.a.createElement(de,{errorRecord:t[this.state.currentIndex],editorHandler:this.props.editorHandler}),u.a.createElement(f,{line1:"This screen is visible only in development. It will not appear if the app crashes in production.",line2:"Open your browser’s developer console to further inspect this error.  Click the \'X\' or hit ESC to dismiss this message."}))}}]),t}(r.PureComponent),he={background:"white",color:"black",headerColor:"#ce1126",primaryPreBackground:"rgba(206, 17, 38, 0.05)",primaryPreColor:"inherit",secondaryPreBackground:"rgba(251, 245, 180, 0.3)",secondaryPreColor:"inherit",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#293238",navBackground:"rgba(206, 17, 38, 0.05)",navArrow:"#ce1126",base01:"#f5f5f5",base03:"#6e6e6e",base05:"#333333",base08:"#881280",base0B:"#1155cc",base0C:"#994500",base0E:"#c80000"},me={background:"#353535",color:"white",headerColor:"#e83b46",primaryPreBackground:"rgba(206, 17, 38, 0.1)",primaryPreColor:"#fccfcf",secondaryPreBackground:"rgba(251, 245, 180, 0.1)",secondaryPreColor:"#fbf5b4",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#ffffff",navBackground:"rgba(206, 17, 38, 0.2)",navArrow:"#ce1126",base01:"#282a2e",base03:"#969896",base05:"#c5c8c6",base08:"#cc6666",base0B:"#b5bd68",base0C:"#8abeb7",base0E:"#b294bb"};n.d(t,"ThemeContext",(function(){return De}));var ge=null,ve=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?me:he,De=Object(r.createContext)();window.updateContent=function(e){var t,n,r,o,a,l=(n=(t=e).currentBuildError,r=t.currentRuntimeErrorRecords,o=t.dismissRuntimeErrors,a=t.editorHandler,n?u.a.createElement(De.Provider,{value:ve},u.a.createElement(T,{error:n,editorHandler:a})):r.length>0?u.a.createElement(De.Provider,{value:ve},u.a.createElement(pe,{errorRecords:r,close:o,editorHandler:a})):null);return null===l?(i.a.unmountComponentAtNode(ge),!1):(i.a.render(l,ge),!0)},document.body.style.margin="0",document.body.style["max-width"]="100vw",function(e,t){for(var n in e.setAttribute("style",""),t)t.hasOwnProperty(n)&&(e.style[n]=t[n])}(ge=document.createElement("div"),{width:"100%",height:"100%","box-sizing":"border-box","text-align":"center","background-color":ve.background}),document.body.appendChild(ge),window.parent.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady()}]);';
      }, function (e, t, n) {
        const r = (function (e) {
          let t;
          const n = Object.prototype;
          const r = n.hasOwnProperty;
          const u = typeof Symbol === 'function' ? Symbol : {};
          const o = u.iterator || '@@iterator';
          const i = u.asyncIterator || '@@asyncIterator';
          const a = u.toStringTag || '@@toStringTag';

          function l(e, t, n, r) {
            const u = t && t.prototype instanceof g ? t : g;
            const o = Object.create(u.prototype);
            const i = new k(r || []);
            return o._invoke = (function (e, t, n) {
              let r = s;
              return function (u, o) {
                if (r === p) throw new Error('Generator is already running');

                if (r === d) {
                  if (u === 'throw') throw o;
                  return S();
                }

                for (n.method = u, n.arg = o; ;) {
                  const i = n.delegate;

                  if (i) {
                    const a = w(i, n);

                    if (a) {
                      if (a === h) continue;
                      return a;
                    }
                  }

                  if (n.method === 'next') n.sent = n._sent = n.arg; else if (n.method === 'throw') {
                    if (r === s) throw r = d, n.arg;
                    n.dispatchException(n.arg);
                  } else n.method === 'return' && n.abrupt('return', n.arg);
                  r = p;
                  const l = c(e, t, n);

                  if (l.type === 'normal') {
                    if (r = n.done ? d : f, l.arg === h) continue;
                    return {
                      value: l.arg,
                      done: n.done,
                    };
                  }

                  l.type === 'throw' && (r = d, n.method = 'throw', n.arg = l.arg);
                }
              };
            }(e, n, i)), o;
          }

          function c(e, t, n) {
            try {
              return {
                type: 'normal',
                arg: e.call(t, n),
              };
            } catch (e) {
              return {
                type: 'throw',
                arg: e,
              };
            }
          }

          e.wrap = l;
          var s = 'suspendedStart';
          var f = 'suspendedYield';
          var p = 'executing';
          var d = 'completed';
          var h = {};

          function g() {}

          function m() {}

          function v() {}

          let y = {};

          y[o] = function () {
            return this;
          };

          const D = Object.getPrototypeOf;
          const b = D && D(D(B([])));
          b && b !== n && r.call(b, o) && (y = b);
          const E = v.prototype = g.prototype = Object.create(y);

          function C(e) {
            ['next', 'throw', 'return'].forEach(t => {
              e[t] = function (e) {
                return this._invoke(t, e);
              };
            });
          }

          function A(e) {
            let t;

            this._invoke = function (n, u) {
              function o() {
                return new Promise((t, o) => {
                  !(function t(n, u, o, i) {
                    const a = c(e[n], e, u);

                    if (a.type !== 'throw') {
                      const l = a.arg;
                      const s = l.value;
                      return s && typeof s === 'object' && r.call(s, '__await') ? Promise.resolve(s.__await).then(e => {
                        t('next', e, o, i);
                      }, e => {
                        t('throw', e, o, i);
                      }) : Promise.resolve(s).then(e => {
                        l.value = e, o(l);
                      }, e => t('throw', e, o, i));
                    }

                    i(a.arg);
                  }(n, u, t, o));
                });
              }

              return t = t ? t.then(o, o) : o();
            };
          }

          function w(e, n) {
            const r = e.iterator[n.method];

            if (r === t) {
              if (n.delegate = null, n.method === 'throw') {
                if (e.iterator.return && (n.method = 'return', n.arg = t, w(e, n), n.method === 'throw')) return h;
                n.method = 'throw', n.arg = new TypeError("The iterator does not provide a 'throw' method");
              }

              return h;
            }

            const u = c(r, e.iterator, n.arg);
            if (u.type === 'throw') return n.method = 'throw', n.arg = u.arg, n.delegate = null, h;
            const o = u.arg;
            return o ? o.done ? (n[e.resultName] = o.value, n.next = e.nextLoc, n.method !== 'return' && (n.method = 'next', n.arg = t), n.delegate = null, h) : o : (n.method = 'throw', n.arg = new TypeError('iterator result is not an object'), n.delegate = null, h);
          }

          function F(e) {
            const t = {
              tryLoc: e[0],
            };
            1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);
          }

          function x(e) {
            const t = e.completion || {};
            t.type = 'normal', delete t.arg, e.completion = t;
          }

          function k(e) {
            this.tryEntries = [{
              tryLoc: 'root',
            }], e.forEach(F, this), this.reset(!0);
          }

          function B(e) {
            if (e) {
              const n = e[o];
              if (n) return n.call(e);
              if (typeof e.next === 'function') return e;

              if (!isNaN(e.length)) {
                let u = -1;
                const i = function n() {
                  for (; ++u < e.length;) if (r.call(e, u)) return n.value = e[u], n.done = !1, n;

                  return n.value = t, n.done = !0, n;
                };

                return i.next = i;
              }
            }

            return {
              next: S,
            };
          }

          function S() {
            return {
              value: t,
              done: !0,
            };
          }

          return m.prototype = E.constructor = v, v.constructor = m, v[a] = m.displayName = 'GeneratorFunction', e.isGeneratorFunction = function (e) {
            const t = typeof e === 'function' && e.constructor;
            return !!t && (t === m || (t.displayName || t.name) === 'GeneratorFunction');
          }, e.mark = function (e) {
            return Object.setPrototypeOf ? Object.setPrototypeOf(e, v) : (e.__proto__ = v, a in e || (e[a] = 'GeneratorFunction')), e.prototype = Object.create(E), e;
          }, e.awrap = function (e) {
            return {
              __await: e,
            };
          }, C(A.prototype), A.prototype[i] = function () {
            return this;
          }, e.AsyncIterator = A, e.async = function (t, n, r, u) {
            const o = new A(l(t, n, r, u));
            return e.isGeneratorFunction(n) ? o : o.next().then(e => (e.done ? e.value : o.next()));
          }, C(E), E[a] = 'Generator', E[o] = function () {
            return this;
          }, E.toString = function () {
            return '[object Generator]';
          }, e.keys = function (e) {
            const t = [];

            for (const n in e) t.push(n);

            return t.reverse(), function n() {
              for (; t.length;) {
                const r = t.pop();
                if (r in e) return n.value = r, n.done = !1, n;
              }

              return n.done = !0, n;
            };
          }, e.values = B, k.prototype = {
            constructor: k,
            reset(e) {
              if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(x), !e) for (const n in this) n.charAt(0) === 't' && r.call(this, n) && !isNaN(+n.slice(1)) && (this[n] = t);
            },
            stop() {
              this.done = !0;
              const e = this.tryEntries[0].completion;
              if (e.type === 'throw') throw e.arg;
              return this.rval;
            },
            dispatchException(e) {
              if (this.done) throw e;
              const n = this;

              function u(r, u) {
                return a.type = 'throw', a.arg = e, n.next = r, u && (n.method = 'next', n.arg = t), !!u;
              }

              for (let o = this.tryEntries.length - 1; o >= 0; --o) {
                const i = this.tryEntries[o];
                var a = i.completion;
                if (i.tryLoc === 'root') return u('end');

                if (i.tryLoc <= this.prev) {
                  const l = r.call(i, 'catchLoc');
                  const c = r.call(i, 'finallyLoc');

                  if (l && c) {
                    if (this.prev < i.catchLoc) return u(i.catchLoc, !0);
                    if (this.prev < i.finallyLoc) return u(i.finallyLoc);
                  } else if (l) {
                    if (this.prev < i.catchLoc) return u(i.catchLoc, !0);
                  } else {
                    if (!c) throw new Error('try statement without catch or finally');
                    if (this.prev < i.finallyLoc) return u(i.finallyLoc);
                  }
                }
              }
            },
            abrupt(e, t) {
              for (let n = this.tryEntries.length - 1; n >= 0; --n) {
                const u = this.tryEntries[n];

                if (u.tryLoc <= this.prev && r.call(u, 'finallyLoc') && this.prev < u.finallyLoc) {
                  var o = u;
                  break;
                }
              }

              o && (e === 'break' || e === 'continue') && o.tryLoc <= t && t <= o.finallyLoc && (o = null);
              const i = o ? o.completion : {};
              return i.type = e, i.arg = t, o ? (this.method = 'next', this.next = o.finallyLoc, h) : this.complete(i);
            },
            complete(e, t) {
              if (e.type === 'throw') throw e.arg;
              return e.type === 'break' || e.type === 'continue' ? this.next = e.arg : e.type === 'return' ? (this.rval = this.arg = e.arg, this.method = 'return', this.next = 'end') : e.type === 'normal' && t && (this.next = t), h;
            },
            finish(e) {
              for (let t = this.tryEntries.length - 1; t >= 0; --t) {
                const n = this.tryEntries[t];
                if (n.finallyLoc === e) return this.complete(n.completion, n.afterLoc), x(n), h;
              }
            },
            catch(e) {
              for (let t = this.tryEntries.length - 1; t >= 0; --t) {
                const n = this.tryEntries[t];

                if (n.tryLoc === e) {
                  const r = n.completion;

                  if (r.type === 'throw') {
                    var u = r.arg;
                    x(n);
                  }

                  return u;
                }
              }

              throw new Error('illegal catch attempt');
            },
            delegateYield(e, n, r) {
              return this.delegate = {
                iterator: B(e),
                resultName: n,
                nextLoc: r,
              }, this.method === 'next' && (this.arg = t), h;
            },
          }, e;
        }(e.exports));

        try {
          regeneratorRuntime = r;
        } catch (e) {
          Function('r', 'regeneratorRuntime = r')(r);
        }
      }, function (e, t) {
        const n = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
        t.encode = function (e) {
          if (e >= 0 && e < n.length) return n[e];
          throw new TypeError(`Must be between 0 and 63: ${e}`);
        }, t.decode = function (e) {
          return e >= 65 && e <= 90 ? e - 65 : e >= 97 && e <= 122 ? e - 97 + 26 : e >= 48 && e <= 57 ? e - 48 + 52 : e == 43 ? 62 : e == 47 ? 63 : -1;
        };
      }, function (e, t, n) {
        const r = n(1);

        function u() {
          this._array = [], this._sorted = !0, this._last = {
            generatedLine: -1,
            generatedColumn: 0,
          };
        }

        u.prototype.unsortedForEach = function (e, t) {
          this._array.forEach(e, t);
        }, u.prototype.add = function (e) {
          let t; let n; let u; let o; let i; let
            a;
          t = this._last, n = e, u = t.generatedLine, o = n.generatedLine, i = t.generatedColumn, a = n.generatedColumn, o > u || o == u && a >= i || r.compareByGeneratedPositionsInflated(t, n) <= 0 ? (this._last = e, this._array.push(e)) : (this._sorted = !1, this._array.push(e));
        }, u.prototype.toArray = function () {
          return this._sorted || (this._array.sort(r.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
        }, t.MappingList = u;
      }, function (e, t, n) {
        const r = n(1);
        const u = n(13);
        const o = n(6).ArraySet;
        const i = n(5);
        const a = n(14).quickSort;

        function l(e) {
          let t = e;
          return typeof e === 'string' && (t = JSON.parse(e.replace(/^\)\]\}'/, ''))), t.sections != null ? new f(t) : new c(t);
        }

        function c(e) {
          let t = e;
          typeof e === 'string' && (t = JSON.parse(e.replace(/^\)\]\}'/, '')));
          const n = r.getArg(t, 'version');
          let u = r.getArg(t, 'sources');
          const i = r.getArg(t, 'names', []);
          const a = r.getArg(t, 'sourceRoot', null);
          const l = r.getArg(t, 'sourcesContent', null);
          const c = r.getArg(t, 'mappings');
          const s = r.getArg(t, 'file', null);
          if (n != this._version) throw new Error(`Unsupported version: ${n}`);
          u = u.map(String).map(r.normalize).map(e => (a && r.isAbsolute(a) && r.isAbsolute(e) ? r.relative(a, e) : e)), this._names = o.fromArray(i.map(String), !0), this._sources = o.fromArray(u, !0), this.sourceRoot = a, this.sourcesContent = l, this._mappings = c, this.file = s;
        }

        function s() {
          this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
        }

        function f(e) {
          let t = e;
          typeof e === 'string' && (t = JSON.parse(e.replace(/^\)\]\}'/, '')));
          const n = r.getArg(t, 'version');
          const u = r.getArg(t, 'sections');
          if (n != this._version) throw new Error(`Unsupported version: ${n}`);
          this._sources = new o(), this._names = new o();
          let i = {
            line: -1,
            column: 0,
          };
          this._sections = u.map(e => {
            if (e.url) throw new Error('Support for url field in sections not implemented.');
            const t = r.getArg(e, 'offset');
            const n = r.getArg(t, 'line');
            const u = r.getArg(t, 'column');
            if (n < i.line || n === i.line && u < i.column) throw new Error('Section offsets must be ordered and non-overlapping.');
            return i = t, {
              generatedOffset: {
                generatedLine: n + 1,
                generatedColumn: u + 1,
              },
              consumer: new l(r.getArg(e, 'map')),
            };
          });
        }

        l.fromSourceMap = function (e) {
          return c.fromSourceMap(e);
        }, l.prototype._version = 3, l.prototype.__generatedMappings = null, Object.defineProperty(l.prototype, '_generatedMappings', {
          get() {
            return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
          },
        }), l.prototype.__originalMappings = null, Object.defineProperty(l.prototype, '_originalMappings', {
          get() {
            return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
          },
        }), l.prototype._charIsMappingSeparator = function (e, t) {
          const n = e.charAt(t);
          return n === ';' || n === ',';
        }, l.prototype._parseMappings = function (e, t) {
          throw new Error('Subclasses must implement _parseMappings');
        }, l.GENERATED_ORDER = 1, l.ORIGINAL_ORDER = 2, l.GREATEST_LOWER_BOUND = 1, l.LEAST_UPPER_BOUND = 2, l.prototype.eachMapping = function (e, t, n) {
          let u;
          const o = t || null;

          switch (n || l.GENERATED_ORDER) {
            case l.GENERATED_ORDER:
              u = this._generatedMappings;
              break;

            case l.ORIGINAL_ORDER:
              u = this._originalMappings;
              break;

            default:
              throw new Error('Unknown order of iteration.');
          }

          const i = this.sourceRoot;
          u.map(function (e) {
            let t = e.source === null ? null : this._sources.at(e.source);
            return t != null && i != null && (t = r.join(i, t)), {
              source: t,
              generatedLine: e.generatedLine,
              generatedColumn: e.generatedColumn,
              originalLine: e.originalLine,
              originalColumn: e.originalColumn,
              name: e.name === null ? null : this._names.at(e.name),
            };
          }, this).forEach(e, o);
        }, l.prototype.allGeneratedPositionsFor = function (e) {
          const t = r.getArg(e, 'line');
          const n = {
            source: r.getArg(e, 'source'),
            originalLine: t,
            originalColumn: r.getArg(e, 'column', 0),
          };
          if (this.sourceRoot != null && (n.source = r.relative(this.sourceRoot, n.source)), !this._sources.has(n.source)) return [];
          n.source = this._sources.indexOf(n.source);

          const o = [];
          let i = this._findMapping(n, this._originalMappings, 'originalLine', 'originalColumn', r.compareByOriginalPositions, u.LEAST_UPPER_BOUND);

          if (i >= 0) {
            let a = this._originalMappings[i];
            if (void 0 === e.column) {
              for (let l = a.originalLine; a && a.originalLine === l;) {
                o.push({
                  line: r.getArg(a, 'generatedLine', null),
                  column: r.getArg(a, 'generatedColumn', null),
                  lastColumn: r.getArg(a, 'lastGeneratedColumn', null),
                }), a = this._originalMappings[++i];
              }
            } else {
              for (let c = a.originalColumn; a && a.originalLine === t && a.originalColumn == c;) {
                o.push({
                  line: r.getArg(a, 'generatedLine', null),
                  column: r.getArg(a, 'generatedColumn', null),
                  lastColumn: r.getArg(a, 'lastGeneratedColumn', null),
                }), a = this._originalMappings[++i];
              }
            }
          }

          return o;
        }, t.SourceMapConsumer = l, c.prototype = Object.create(l.prototype), c.prototype.consumer = l, c.fromSourceMap = function (e) {
          const t = Object.create(c.prototype);
          const n = t._names = o.fromArray(e._names.toArray(), !0);
          const u = t._sources = o.fromArray(e._sources.toArray(), !0);
          t.sourceRoot = e._sourceRoot, t.sourcesContent = e._generateSourcesContent(t._sources.toArray(), t.sourceRoot), t.file = e._file;

          for (let i = e._mappings.toArray().slice(), l = t.__generatedMappings = [], f = t.__originalMappings = [], p = 0, d = i.length; p < d; p++) {
            const h = i[p];
            const g = new s();
            g.generatedLine = h.generatedLine, g.generatedColumn = h.generatedColumn, h.source && (g.source = u.indexOf(h.source), g.originalLine = h.originalLine, g.originalColumn = h.originalColumn, h.name && (g.name = n.indexOf(h.name)), f.push(g)), l.push(g);
          }

          return a(t.__originalMappings, r.compareByOriginalPositions), t;
        }, c.prototype._version = 3, Object.defineProperty(c.prototype, 'sources', {
          get() {
            return this._sources.toArray().map(function (e) {
              return this.sourceRoot != null ? r.join(this.sourceRoot, e) : e;
            }, this);
          },
        }), c.prototype._parseMappings = function (e, t) {
          for (var n, u, o, l, c, f = 1, p = 0, d = 0, h = 0, g = 0, m = 0, v = e.length, y = 0, D = {}, b = {}, E = [], C = []; y < v;) {
            if (e.charAt(y) === ';') f++, y++, p = 0; else if (e.charAt(y) === ',') y++; else {
              for ((n = new s()).generatedLine = f, l = y; l < v && !this._charIsMappingSeparator(e, l); l++);

              if (o = D[u = e.slice(y, l)]) y += u.length; else {
                for (o = []; y < l;) i.decode(e, y, b), c = b.value, y = b.rest, o.push(c);

                if (o.length === 2) throw new Error('Found a source, but no line and column');
                if (o.length === 3) throw new Error('Found a source and line, but no column');
                D[u] = o;
              }
              n.generatedColumn = p + o[0], p = n.generatedColumn, o.length > 1 && (n.source = g + o[1], g += o[1], n.originalLine = d + o[2], d = n.originalLine, n.originalLine += 1, n.originalColumn = h + o[3], h = n.originalColumn, o.length > 4 && (n.name = m + o[4], m += o[4])), C.push(n), typeof n.originalLine === 'number' && E.push(n);
            }
          }

          a(C, r.compareByGeneratedPositionsDeflated), this.__generatedMappings = C, a(E, r.compareByOriginalPositions), this.__originalMappings = E;
        }, c.prototype._findMapping = function (e, t, n, r, o, i) {
          if (e[n] <= 0) throw new TypeError(`Line must be greater than or equal to 1, got ${e[n]}`);
          if (e[r] < 0) throw new TypeError(`Column must be greater than or equal to 0, got ${e[r]}`);
          return u.search(e, t, o, i);
        }, c.prototype.computeColumnSpans = function () {
          for (let e = 0; e < this._generatedMappings.length; ++e) {
            const t = this._generatedMappings[e];

            if (e + 1 < this._generatedMappings.length) {
              const n = this._generatedMappings[e + 1];

              if (t.generatedLine === n.generatedLine) {
                t.lastGeneratedColumn = n.generatedColumn - 1;
                continue;
              }
            }

            t.lastGeneratedColumn = 1 / 0;
          }
        }, c.prototype.originalPositionFor = function (e) {
          const t = {
            generatedLine: r.getArg(e, 'line'),
            generatedColumn: r.getArg(e, 'column'),
          };
          const n = this._findMapping(t, this._generatedMappings, 'generatedLine', 'generatedColumn', r.compareByGeneratedPositionsDeflated, r.getArg(e, 'bias', l.GREATEST_LOWER_BOUND));

          if (n >= 0) {
            const u = this._generatedMappings[n];

            if (u.generatedLine === t.generatedLine) {
              let o = r.getArg(u, 'source', null);
              o !== null && (o = this._sources.at(o), this.sourceRoot != null && (o = r.join(this.sourceRoot, o)));
              let i = r.getArg(u, 'name', null);
              return i !== null && (i = this._names.at(i)), {
                source: o,
                line: r.getArg(u, 'originalLine', null),
                column: r.getArg(u, 'originalColumn', null),
                name: i,
              };
            }
          }

          return {
            source: null,
            line: null,
            column: null,
            name: null,
          };
        }, c.prototype.hasContentsOfAllSources = function () {
          return !!this.sourcesContent && this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(e => e == null);
        }, c.prototype.sourceContentFor = function (e, t) {
          if (!this.sourcesContent) return null;
          if (this.sourceRoot != null && (e = r.relative(this.sourceRoot, e)), this._sources.has(e)) return this.sourcesContent[this._sources.indexOf(e)];
          let n;

          if (this.sourceRoot != null && (n = r.urlParse(this.sourceRoot))) {
            const u = e.replace(/^file:\/\//, '');
            if (n.scheme == 'file' && this._sources.has(u)) return this.sourcesContent[this._sources.indexOf(u)];
            if ((!n.path || n.path == '/') && this._sources.has(`/${e}`)) return this.sourcesContent[this._sources.indexOf(`/${e}`)];
          }

          if (t) return null;
          throw new Error(`"${e}" is not in the SourceMap.`);
        }, c.prototype.generatedPositionFor = function (e) {
          let t = r.getArg(e, 'source');
          if (this.sourceRoot != null && (t = r.relative(this.sourceRoot, t)), !this._sources.has(t)) {
            return {
              line: null,
              column: null,
              lastColumn: null,
            };
          }

          const n = {
            source: t = this._sources.indexOf(t),
            originalLine: r.getArg(e, 'line'),
            originalColumn: r.getArg(e, 'column'),
          };
          const u = this._findMapping(n, this._originalMappings, 'originalLine', 'originalColumn', r.compareByOriginalPositions, r.getArg(e, 'bias', l.GREATEST_LOWER_BOUND));

          if (u >= 0) {
            const o = this._originalMappings[u];
            if (o.source === n.source) {
              return {
                line: r.getArg(o, 'generatedLine', null),
                column: r.getArg(o, 'generatedColumn', null),
                lastColumn: r.getArg(o, 'lastGeneratedColumn', null),
              };
            }
          }

          return {
            line: null,
            column: null,
            lastColumn: null,
          };
        }, t.BasicSourceMapConsumer = c, f.prototype = Object.create(l.prototype), f.prototype.constructor = l, f.prototype._version = 3, Object.defineProperty(f.prototype, 'sources', {
          get() {
            for (var e = [], t = 0; t < this._sections.length; t++) for (let n = 0; n < this._sections[t].consumer.sources.length; n++) e.push(this._sections[t].consumer.sources[n]);

            return e;
          },
        }), f.prototype.originalPositionFor = function (e) {
          const t = {
            generatedLine: r.getArg(e, 'line'),
            generatedColumn: r.getArg(e, 'column'),
          };
          const n = u.search(t, this._sections, (e, t) => {
            const n = e.generatedLine - t.generatedOffset.generatedLine;
            return n || e.generatedColumn - t.generatedOffset.generatedColumn;
          });
          const o = this._sections[n];
          return o ? o.consumer.originalPositionFor({
            line: t.generatedLine - (o.generatedOffset.generatedLine - 1),
            column: t.generatedColumn - (o.generatedOffset.generatedLine === t.generatedLine ? o.generatedOffset.generatedColumn - 1 : 0),
            bias: e.bias,
          }) : {
            source: null,
            line: null,
            column: null,
            name: null,
          };
        }, f.prototype.hasContentsOfAllSources = function () {
          return this._sections.every(e => e.consumer.hasContentsOfAllSources());
        }, f.prototype.sourceContentFor = function (e, t) {
          for (let n = 0; n < this._sections.length; n++) {
            const r = this._sections[n].consumer.sourceContentFor(e, !0);

            if (r) return r;
          }

          if (t) return null;
          throw new Error(`"${e}" is not in the SourceMap.`);
        }, f.prototype.generatedPositionFor = function (e) {
          for (let t = 0; t < this._sections.length; t++) {
            const n = this._sections[t];

            if (n.consumer.sources.indexOf(r.getArg(e, 'source')) !== -1) {
              const u = n.consumer.generatedPositionFor(e);
              if (u) {
                return {
                  line: u.line + (n.generatedOffset.generatedLine - 1),
                  column: u.column + (n.generatedOffset.generatedLine === u.line ? n.generatedOffset.generatedColumn - 1 : 0),
                };
              }
            }
          }

          return {
            line: null,
            column: null,
          };
        }, f.prototype._parseMappings = function (e, t) {
          this.__generatedMappings = [], this.__originalMappings = [];

          for (let n = 0; n < this._sections.length; n++) {
            for (let u = this._sections[n], o = u.consumer._generatedMappings, i = 0; i < o.length; i++) {
              const l = o[i];
              let c = u.consumer._sources.at(l.source);

              u.consumer.sourceRoot !== null && (c = r.join(u.consumer.sourceRoot, c)), this._sources.add(c), c = this._sources.indexOf(c);

              let s = u.consumer._names.at(l.name);

              this._names.add(s), s = this._names.indexOf(s);
              const f = {
                source: c,
                generatedLine: l.generatedLine + (u.generatedOffset.generatedLine - 1),
                generatedColumn: l.generatedColumn + (u.generatedOffset.generatedLine === l.generatedLine ? u.generatedOffset.generatedColumn - 1 : 0),
                originalLine: l.originalLine,
                originalColumn: l.originalColumn,
                name: s,
              };
              this.__generatedMappings.push(f), typeof f.originalLine === 'number' && this.__originalMappings.push(f);
            }
          }

          a(this.__generatedMappings, r.compareByGeneratedPositionsDeflated), a(this.__originalMappings, r.compareByOriginalPositions);
        }, t.IndexedSourceMapConsumer = f;
      }, function (e, t) {
        t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2, t.search = function (e, n, r, u) {
          if (n.length === 0) return -1;

          let o = (function e(n, r, u, o, i, a) {
            const l = Math.floor((r - n) / 2) + n;
            const c = i(u, o[l], !0);
            return c === 0 ? l : c > 0 ? r - l > 1 ? e(l, r, u, o, i, a) : a == t.LEAST_UPPER_BOUND ? r < o.length ? r : -1 : l : l - n > 1 ? e(n, l, u, o, i, a) : a == t.LEAST_UPPER_BOUND ? l : n < 0 ? -1 : n;
          }(-1, n.length, e, n, r, u || t.GREATEST_LOWER_BOUND));

          if (o < 0) return -1;

          for (; o - 1 >= 0 && r(n[o], n[o - 1], !0) === 0;) --o;

          return o;
        };
      }, function (e, t) {
        function n(e, t, n) {
          const r = e[t];
          e[t] = e[n], e[n] = r;
        }

        function r(e, t, u, o) {
          if (u < o) {
            let i = u - 1;
            n(e, (s = u, f = o, Math.round(s + Math.random() * (f - s))), o);

            for (var a = e[o], l = u; l < o; l++) t(e[l], a) <= 0 && n(e, i += 1, l);

            n(e, i + 1, l);
            const c = i + 1;
            r(e, t, u, c - 1), r(e, t, c + 1, o);
          }

          let s; let
            f;
        }

        t.quickSort = function (e, t) {
          r(e, t, 0, e.length - 1);
        };
      }, function (e, t, n) {
        const r = n(4).SourceMapGenerator;
        const u = n(1);
        const o = /(\r?\n)/;
        const i = '$$$isSourceNode$$$';

        function a(e, t, n, r, u) {
          this.children = [], this.sourceContents = {}, this.line = e == null ? null : e, this.column = t == null ? null : t, this.source = n == null ? null : n, this.name = u == null ? null : u, this[i] = !0, r != null && this.add(r);
        }

        a.fromStringWithSourceMap = function (e, t, n) {
          const r = new a();
          const i = e.split(o);
          const l = function () {
            return i.shift() + (i.shift() || '');
          };
          let c = 1;
          let s = 0;
          let f = null;

          return t.eachMapping(e => {
            if (f !== null) {
              if (!(c < e.generatedLine)) {
                const t = (n = i[0]).substr(0, e.generatedColumn - s);
                return i[0] = n.substr(e.generatedColumn - s), s = e.generatedColumn, p(f, t), void (f = e);
              }

              p(f, l()), c++, s = 0;
            }

            for (; c < e.generatedLine;) r.add(l()), c++;

            if (s < e.generatedColumn) {
              var n = i[0];
              r.add(n.substr(0, e.generatedColumn)), i[0] = n.substr(e.generatedColumn), s = e.generatedColumn;
            }

            f = e;
          }, this), i.length > 0 && (f && p(f, l()), r.add(i.join(''))), t.sources.forEach(e => {
            const o = t.sourceContentFor(e);
            o != null && (n != null && (e = u.join(n, e)), r.setSourceContent(e, o));
          }), r;

          function p(e, t) {
            if (e === null || void 0 === e.source) r.add(t); else {
              const o = n ? u.join(n, e.source) : e.source;
              r.add(new a(e.originalLine, e.originalColumn, o, t, e.name));
            }
          }
        }, a.prototype.add = function (e) {
          if (Array.isArray(e)) {
            e.forEach(function (e) {
              this.add(e);
            }, this);
          } else {
            if (!e[i] && typeof e !== 'string') throw new TypeError(`Expected a SourceNode, string, or an array of SourceNodes and strings. Got ${e}`);
            e && this.children.push(e);
          }
          return this;
        }, a.prototype.prepend = function (e) {
          if (Array.isArray(e)) for (let t = e.length - 1; t >= 0; t--) this.prepend(e[t]); else {
            if (!e[i] && typeof e !== 'string') throw new TypeError(`Expected a SourceNode, string, or an array of SourceNodes and strings. Got ${e}`);
            this.children.unshift(e);
          }
          return this;
        }, a.prototype.walk = function (e) {
          for (var t, n = 0, r = this.children.length; n < r; n++) {
            (t = this.children[n])[i] ? t.walk(e) : t !== '' && e(t, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name,
            });
          }
        }, a.prototype.join = function (e) {
          let t;
          let n;
          const r = this.children.length;

          if (r > 0) {
            for (t = [], n = 0; n < r - 1; n++) t.push(this.children[n]), t.push(e);

            t.push(this.children[n]), this.children = t;
          }

          return this;
        }, a.prototype.replaceRight = function (e, t) {
          const n = this.children[this.children.length - 1];
          return n[i] ? n.replaceRight(e, t) : typeof n === 'string' ? this.children[this.children.length - 1] = n.replace(e, t) : this.children.push(''.replace(e, t)), this;
        }, a.prototype.setSourceContent = function (e, t) {
          this.sourceContents[u.toSetString(e)] = t;
        }, a.prototype.walkSourceContents = function (e) {
          for (var t = 0, n = this.children.length; t < n; t++) this.children[t][i] && this.children[t].walkSourceContents(e);

          const r = Object.keys(this.sourceContents);

          for (t = 0, n = r.length; t < n; t++) e(u.fromSetString(r[t]), this.sourceContents[r[t]]);
        }, a.prototype.toString = function () {
          let e = '';
          return this.walk(t => {
            e += t;
          }), e;
        }, a.prototype.toStringWithSourceMap = function (e) {
          const t = {
            code: '',
            line: 1,
            column: 0,
          };
          const n = new r(e);
          let u = !1;
          let o = null;
          let i = null;
          let a = null;
          let l = null;
          return this.walk((e, r) => {
            t.code += e, r.source !== null && r.line !== null && r.column !== null ? (o === r.source && i === r.line && a === r.column && l === r.name || n.addMapping({
              source: r.source,
              original: {
                line: r.line,
                column: r.column,
              },
              generated: {
                line: t.line,
                column: t.column,
              },
              name: r.name,
            }), o = r.source, i = r.line, a = r.column, l = r.name, u = !0) : u && (n.addMapping({
              generated: {
                line: t.line,
                column: t.column,
              },
            }), o = null, u = !1);

            for (let c = 0, s = e.length; c < s; c++) {
              e.charCodeAt(c) === 10 ? (t.line++, t.column = 0, c + 1 === s ? (o = null, u = !1) : u && n.addMapping({
                source: r.source,
                original: {
                  line: r.line,
                  column: r.column,
                },
                generated: {
                  line: t.line,
                  column: t.column,
                },
                name: r.name,
              })) : t.column++;
            }
          }), this.walkSourceContents((e, t) => {
            n.setSourceContent(e, t);
          }), {
            code: t.code,
            map: n,
          };
        }, t.SourceNode = a;
      }, function (e, t, n) {
        n.r(t);
        let r = null;

        function u(e, t) {
          if (t.error) {
            const n = t.error;
            n instanceof Error ? e(n) : e(new Error(n));
          }
        }

        function o(e, t) {
          r === null && (r = u.bind(void 0, t), e.addEventListener('error', r));
        }

        let i = null;

        function a(e, t) {
          if (t == null || t.reason == null) return e(new Error('Unknown'));
          const n = t.reason;
          return n instanceof Error ? e(n) : e(new Error(n));
        }

        function l(e, t) {
          i === null && (i = a.bind(void 0, t), e.addEventListener('unhandledrejection', i));
        }

        let c = !1;
        let s = 10;
        const f = 50;

        const p = [];
        const d = function () {
          typeof console !== 'undefined' && (console.reactStack = function (e) {
            return p.push(e);
          }, console.reactStackEnd = function (e) {
            return p.pop();
          });
        };
        const h = function () {
          typeof console !== 'undefined' && (console.reactStack = void 0, console.reactStackEnd = void 0);
        };
        const g = function (e, t) {
          if (typeof console !== 'undefined') {
            const n = console[e];
            typeof n === 'function' && (console[e] = function () {
              try {
                const e = arguments[0];
                typeof e === 'string' && p.length > 0 && t(e, p[p.length - 1]);
              } catch (e) {
                setTimeout(() => {
                  throw e;
                });
              }

              return n.apply(this, arguments);
            });
          }
        };

        function m(e, t) {
          return (m = Object.setPrototypeOf || function (e, t) {
            return e.__proto__ = t, e;
          })(e, t);
        }

        function v(e, t, n) {
          return (v = (function () {
            if (typeof Reflect === 'undefined' || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if (typeof Proxy === 'function') return !0;

            try {
              return Date.prototype.toString.call(Reflect.construct(Date, [], () => {})), !0;
            } catch (e) {
              return !1;
            }
          }()) ? Reflect.construct : function (e, t, n) {
              const r = [null];
              r.push.apply(r, t);
              const u = new (Function.bind.apply(e, r))();
              return n && m(u, n.prototype), u;
            }).apply(null, arguments);
        }

        function y(e) {
          return (function (e) {
            if (Array.isArray(e)) {
              for (var t = 0, n = new Array(e.length); t < e.length; t++) n[t] = e[t];

              return n;
            }
          }(e)) || (function (e) {
            if (Symbol.iterator in Object(e) || Object.prototype.toString.call(e) === '[object Arguments]') return Array.from(e);
          }(e)) || (function () {
            throw new TypeError('Invalid attempt to spread non-iterable instance');
          }());
        }

        function D(e, t) {
          for (let n = 0; n < t.length; n++) {
            const r = t[n];
            r.enumerable = r.enumerable || !1, r.configurable = !0, 'value' in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
          }
        }

        function b(e, t, n) {
          return t && D(e.prototype, t), n && D(e, n), e;
        }

        function E(e, t) {
          if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
        }

        const C = function e(t, n) {
          const r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          E(this, e), this.lineNumber = t, this.content = n, this.highlight = r;
        };
        const A = (function () {
          function e() {
            let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
            const n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
            const r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
            const u = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
            const o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null;
            const i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null;
            const a = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null;
            const l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null;
            const c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null;
            const s = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null;
            E(this, e), t && t.indexOf('Object.') === 0 && (t = t.slice('Object.'.length)), t !== 'friendlySyntaxErrorLabel' && t !== 'exports.__esModule' && t !== '<anonymous>' && t || (t = null), this.functionName = t, this.fileName = n, this.lineNumber = r, this.columnNumber = u, this._originalFunctionName = i, this._originalFileName = a, this._originalLineNumber = l, this._originalColumnNumber = c, this._scriptCode = o, this._originalScriptCode = s;
          }

          return b(e, [{
            key: 'getFunctionName',
            value() {
              return this.functionName || '(anonymous function)';
            },
          }, {
            key: 'getSource',
            value() {
              let e = '';
              return this.fileName != null && (e += `${this.fileName}:`), this.lineNumber != null && (e += `${this.lineNumber}:`), this.columnNumber != null && (e += `${this.columnNumber}:`), e.slice(0, -1);
            },
          }, {
            key: 'toString',
            value() {
              const e = this.getFunctionName();
              const t = this.getSource();
              return ''.concat(e).concat(t ? ' ('.concat(t, ')') : '');
            },
          }]), e;
        }());
        const w = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;

        function F(e) {
          return w.exec(e).slice(1).map(e => {
            const t = Number(e);
            return isNaN(t) ? e : t;
          });
        }

        const x = /^\s*(at|in)\s.+(:\d+)/;
        const k = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;

        function B(e) {
          return e.filter(e => x.test(e) || k.test(e)).map(e => {
            if (k.test(e)) {
              let t = !1;
              / > (eval|Function)/.test(e) && (e = e.replace(/ line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g, ':$1'), t = !0);
              const n = e.split(/[@]/g);
              const r = n.pop();
              return v(A, [n.join('@') || (t ? 'eval' : null)].concat(y(F(r))));
            }

            e.indexOf('(eval ') !== -1 && (e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, '')), e.indexOf('(at ') !== -1 && (e = e.replace(/\(at /, '('));
            const u = e.trim().split(/\s+/g).slice(1);
            const o = u.pop();
            return v(A, [u.join(' ') || null].concat(y(F(o))));
          });
        }

        function S(e) {
          if (e == null) throw new Error('You cannot pass a null object.');
          if (typeof e === 'string') return B(e.split('\n'));
          if (Array.isArray(e)) return B(e);
          if (typeof e.stack === 'string') return B(e.stack.split('\n'));
          throw new Error('The error you provided does not contain a stack trace.');
        }

        const _ = n(0);
        const T = n.n(_);
        const O = n(3);
        const P = (function () {
          function e(t) {
            E(this, e), this.__source_map = t;
          }

          return b(e, [{
            key: 'getOriginalPosition',
            value(e, t) {
              const n = this.__source_map.originalPositionFor({
                line: e,
                column: t,
              });

              return {
                line: n.line,
                column: n.column,
                source: n.source,
              };
            },
          }, {
            key: 'getGeneratedPosition',
            value(e, t, n) {
              const r = this.__source_map.generatedPositionFor({
                source: e,
                line: t,
                column: n,
              });

              return {
                line: r.line,
                column: r.column,
              };
            },
          }, {
            key: 'getSource',
            value(e) {
              return this.__source_map.sourceContentFor(e);
            },
          }, {
            key: 'getSources',
            value() {
              return this.__source_map.sources;
            },
          }]), e;
        }());

        function N(e, t) {
          for (var n = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm, r = null; ;) {
            const u = n.exec(t);
            if (u == null) break;
            r = u;
          }

          return r && r[1] ? Promise.resolve(r[1].toString()) : Promise.reject('Cannot find a source map directive for '.concat(e, '.'));
        }

        function L(e, t) {
          let n; let r; let u; let o; let i; let
            a;
          return T.a.async(l => {
            for (;;) {
              switch (l.prev = l.next) {
                case 0:
                  return l.next = 2, T.a.awrap(N(e, t));

                case 2:
                  if ((n = l.sent).indexOf('data:') !== 0) {
                    l.next = 14;
                    break;
                  }

                  if (r = /^data:application\/json;([\w=:"-]+;)*base64,/, u = n.match(r)) {
                    l.next = 8;
                    break;
                  }

                  throw new Error('Sorry, non-base64 inline source-map encoding is not supported.');

                case 8:
                  return n = n.substring(u[0].length), n = window.atob(n), n = JSON.parse(n), l.abrupt('return', new P(new O.SourceMapConsumer(n)));

                case 14:
                  return o = e.lastIndexOf('/'), i = e.substring(0, o + 1) + n, l.next = 18, T.a.awrap(fetch(i).then(e => e.json()));

                case 18:
                  return a = l.sent, l.abrupt('return', new P(new O.SourceMapConsumer(a)));

                case 20:
                case 'end':
                  return l.stop();
              }
            }
          });
        }

        function R(e, t, n) {
          typeof n === 'string' && (n = n.split('\n'));

          for (var r = [], u = Math.max(0, e - 1 - t); u <= Math.min(n.length - 1, e - 1 + t); ++u) r.push(new C(u + 1, n[u], u === e - 1));

          return r;
        }

        const M = n(7);

        function j(e) {
          let t;
          let n;
          let r;
          const u = arguments;
          return T.a.async(o => {
            for (;;) {
              switch (o.prev = o.next) {
                case 0:
                  return t = u.length > 1 && void 0 !== u[1] ? u[1] : 3, n = {}, r = [], e.forEach(e => {
                    const t = e.fileName;
                    t != null && r.indexOf(t) === -1 && r.push(t);
                  }), o.next = 6, T.a.awrap(Object(M.settle)(r.map(e => {
                    let t; let r; let
                      u;
                    return T.a.async(o => {
                      for (;;) {
                        switch (o.prev = o.next) {
                          case 0:
                            return t = e.indexOf('webpack-internal:') === 0 ? '/__get-internal-source?fileName='.concat(encodeURIComponent(e)) : e, o.next = 3, T.a.awrap(fetch(t).then(e => e.text()));

                          case 3:
                            return r = o.sent, o.next = 6, T.a.awrap(L(e, r));

                          case 6:
                            u = o.sent, n[e] = {
                              fileSource: r,
                              map: u,
                            };

                          case 8:
                          case 'end':
                            return o.stop();
                        }
                      }
                    });
                  })));

                case 6:
                  return o.abrupt('return', e.map(e => {
                    const r = e.functionName;
                    const u = e.fileName;
                    const o = e.lineNumber;
                    const i = e.columnNumber;
                    const a = n[u] || {};
                    const l = a.map;
                    const c = a.fileSource;
                    if (l == null || o == null) return e;
                    const s = l.getOriginalPosition(o, i);
                    const f = s.source;
                    const p = s.line;
                    const d = s.column;
                    const h = f == null ? [] : l.getSource(f);
                    return new A(r, u, o, i, R(o, t, c), r, f, p, d, R(p, t, h));
                  }));

                case 7:
                case 'end':
                  return o.stop();
              }
            }
          });
        }

        const I = n(2);
        const q = n.n(I);

        function U(e, t) {
          let n = -1;
          let r = -1;

          do {
            ++n, r = t.indexOf(e, r + 1);
          } while (r !== -1);

          return n;
        }

        function z(e, t) {
          let n;
          let r;
          let u;
          let o;
          const i = arguments;
          return T.a.async(a => {
            for (;;) {
              switch (a.prev = a.next) {
                case 0:
                  if (n = i.length > 2 && void 0 !== i[2] ? i[2] : 3, r = typeof e === 'object' ? e.contents : null, u = typeof e === 'object' ? e.uri : e, r != null) {
                    a.next = 7;
                    break;
                  }

                  return a.next = 6, T.a.awrap(fetch(u).then(e => e.text()));

                case 6:
                  r = a.sent;

                case 7:
                  return a.next = 9, T.a.awrap(L(u, r));

                case 9:
                  return o = a.sent, a.abrupt('return', t.map(e => {
                    const t = e.functionName;
                    const i = e.lineNumber;
                    const a = e.columnNumber;
                    if (e._originalLineNumber != null) return e;
                    let l = e.fileName;
                    if (l && (l = q.a.normalize(l.replace(/[\\]+/g, '/'))), l == null) return e;
                    const c = l;
                    const s = o.getSources().map(e => e.replace(/[\\]+/g, '/')).filter(e => {
                      const t = (e = q.a.normalize(e)).lastIndexOf(c);
                      return t !== -1 && t === e.length - c.length;
                    }).map(e => ({
                      token: e,
                      seps: U(q.a.sep, q.a.normalize(e)),
                      penalties: U('node_modules', e) + U('~', e),
                    }))
                      .sort((e, t) => {
                        const n = Math.sign(e.seps - t.seps);
                        return n !== 0 ? n : Math.sign(e.penalties - t.penalties);
                      });
                    if (s.length < 1 || i == null) return new A(null, null, null, null, null, t, c, i, a, null);
                    const f = s[0].token;
                    const p = o.getGeneratedPosition(f, i, a);
                    const d = p.line;
                    const h = p.column;
                    const g = o.getSource(f);
                    return new A(t, u, d, h || null, R(d, n, r || []), t, c, i, a, R(i, n, g));
                  }));

                case 11:
                case 'end':
                  return a.stop();
              }
            }
          });
        }

        const V = function (e) {
          arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          const t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3;
          const n = S(e);
          return (e.__unmap_source ? z(e.__unmap_source, n, t) : j(n, t)).then(e => (e.map(e => e._originalFileName).filter(e => e != null && e.indexOf('node_modules') === -1).length === 0 ? null : e.filter(e => {
            const t = e.functionName;
            return t == null || t.indexOf('__stack_frame_overlay_proxy_console__') === -1;
          })));
        };
        const H = function (e) {
          return function (t) {
            const n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            V(t, n, 3).then(r => {
              r != null && e({
                error: t,
                unhandledRejection: n,
                contextSize: 3,
                stackFrames: r,
              });
            }).catch(e => {
              console.log('Could not get the stack frames of error:', e);
            });
          };
        };

        function $(e) {
          const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : '/static/js/bundle.js';
          const n = H(e);
          return o(window, e => n(e, !1)), l(window, e => n(e, !0)), (function () {
            const e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f;
            if (!c) {
              try {
                s = Error.stackTraceLimit, Error.stackTraceLimit = e, c = !0;
              } catch (e) {}
            }
          }()), d(), g('error', (e, r) => {
            const u = (function (e, t) {
              for (var n, r, u = (function (e) {
                  return e.split('\n').filter(e => !e.match(/^\s*in/)).join('\n');
                }(e)), o = '', i = 0; i < t.length; ++i) {
                const a = t[i];
                const l = a.fileName;
                const c = a.lineNumber;

                if (l != null && c != null && !(l === n && typeof c === 'number' && typeof r === 'number' && Math.abs(c - r) < 3)) {
                  n = l, r = c;
                  let s = t[i].name;
                  o += 'in '.concat(s = s || '(anonymous function)', ' (at ').concat(l, ':').concat(c, ')\n');
                }
              }

              return {
                message: u,
                stack: o,
              };
            }(e, r));

            n({
              message: u.message,
              stack: u.stack,
              __unmap_source: t,
            }, !1);
          }), function () {
            let e;
            !(function () {
              if (c) {
                try {
                  Error.stackTraceLimit = s, c = !1;
                } catch (e) {}
              }
            }()), e = window, i !== null && (e.removeEventListener('unhandledrejection', i), i = null), (function (e) {
              r !== null && (e.removeEventListener('error', r), r = null);
            }(window)), h();
          };
        }

        const W = {
          position: 'fixed',
          top: '0',
          left: '0',
          width: '100%',
          height: '100%',
          border: 'none',
          'z-index': 2147483647,
        };
        const G = n(8);
        const Q = n.n(G);
        n.d(t, 'setEditorHandler', () => re), n.d(t, 'reportBuildError', () => ue), n.d(t, 'reportRuntimeError', () => oe), n.d(t, 'dismissBuildError', () => ie), n.d(t, 'startReportingRuntimeErrors', () => ae), n.d(t, 'dismissRuntimeErrors', () => ce), n.d(t, 'stopReportingRuntimeErrors', () => se);
        let K = null;
        let Y = !1;
        let J = !1;
        let X = null;
        let Z = null;
        let ee = [];
        let te = null;
        let ne = null;

        function re(e) {
          X = e, K && fe();
        }

        function ue(e) {
          Z = e, fe();
        }

        function oe(e) {
          const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          te = t, H(le(t))(e);
        }

        function ie() {
          Z = null, fe();
        }

        function ae(e) {
          if (ne !== null) throw new Error('Already listening');
          e.launchEditorEndpoint && console.warn('Warning: `startReportingRuntimeErrors` doesn’t accept `launchEditorEndpoint` argument anymore. Use `listenToOpenInEditor` instead with your own implementation to open errors in editor '), te = e, ne = $(le(e), e.filename);
        }

        var le = function (e) {
          return function (t) {
            try {
              typeof e.onError === 'function' && e.onError.call(null);
            } finally {
              if (ee.some(e => e.error === t.error)) return;
              ee = ee.concat([t]), fe();
            }
          };
        };

        function ce() {
          ee = [], fe();
        }

        function se() {
          if (ne === null) throw new Error('Not currently listening');
          te = null;

          try {
            ne();
          } finally {
            ne = null;
          }
        }

        function fe() {
          if (!Y) {
            if (J) pe(); else {
              Y = !0;
              const e = window.document.createElement('iframe');
              !(function (e, t) {
                for (const n in e.setAttribute('style', ''), t) t.hasOwnProperty(n) && (e.style[n] = t[n]);
              }(e, W)), e.onload = function () {
                const t = e.contentDocument;

                if (t != null && t.body != null) {
                  K = e;
                  const n = e.contentWindow.document.createElement('script');
                  n.type = 'text/javascript', n.innerHTML = Q.a, t.body.appendChild(n);
                }
              }, window.document.body.appendChild(e);
            }
          }
        }

        function pe() {
          if (!te) throw new Error('Expected options to be injected.');
          if (!K) throw new Error('Iframe has not been created yet.');
          K.contentWindow.updateContent({
            currentBuildError: Z,
            currentRuntimeErrorRecords: ee,
            dismissRuntimeErrors: ce,
            editorHandler: X,
          }) || (window.document.body.removeChild(K), K = null, J = !1);
        }

        window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ = window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ || {}, window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady = function () {
          J = !0, Y = !1, pe();
        }, false && false;
      }]))));
      /* WEBPACK VAR INJECTION */ }.call(this, __webpack_require__(/*! ./../../process/browser.js */ './node_modules/process/browser.js')));
    /***/ }),

  /***/ './node_modules/react-is/cjs/react-is.development.js':
  /*! ***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \********************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    if (true) {
      (function () {
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.

        const hasSymbol = typeof Symbol === 'function' && Symbol.for;
        const REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
        const REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
        const REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
        const REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
        const REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
        const REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
        const REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
        // (unstable) APIs that have been removed. Can we remove the symbols?

        const REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
        const REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
        const REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
        const REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
        const REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
        const REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
        const REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
        const REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
        const REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
        const REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
        const REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

        function isValidElementType(type) {
          return typeof type === 'string' || typeof type === 'function' // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }

        function typeOf(object) {
          if (typeof object === 'object' && object !== null) {
            const { $$typeof } = object;

            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var { type } = object;

                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;

                  default:
                    var $$typeofType = type && type.$$typeof;

                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;

                      default:
                        return $$typeof;
                    }
                }

              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }

          return undefined;
        } // AsyncMode is deprecated along with isAsyncMode

        const AsyncMode = REACT_ASYNC_MODE_TYPE;
        const ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        const ContextConsumer = REACT_CONTEXT_TYPE;
        const ContextProvider = REACT_PROVIDER_TYPE;
        const Element = REACT_ELEMENT_TYPE;
        const ForwardRef = REACT_FORWARD_REF_TYPE;
        const Fragment = REACT_FRAGMENT_TYPE;
        const Lazy = REACT_LAZY_TYPE;
        const Memo = REACT_MEMO_TYPE;
        const Portal = REACT_PORTAL_TYPE;
        const Profiler = REACT_PROFILER_TYPE;
        const StrictMode = REACT_STRICT_MODE_TYPE;
        const Suspense = REACT_SUSPENSE_TYPE;
        let hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

              console.warn('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }

        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }

        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }

        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }

        function isElement(object) {
          return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }

        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }

        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }

        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }

        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }

        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }

        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }

        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }

        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }

        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      }());
    }
    /***/ }),

  /***/ './node_modules/react-is/index.js':
  /*! ****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \*************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    if (false) {} else {
      module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ './node_modules/react-is/cjs/react-is.development.js');
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/components/Context.js':
  /*! ***********************************************************!*\
  !*** ./node_modules/react-redux/es/components/Context.js ***!
  \********************************************************** */
  /*! exports provided: ReactReduxContext, default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'ReactReduxContext', () => ReactReduxContext);
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

    var ReactReduxContext = /* #__PURE__ */react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(null);

    if (true) {
      ReactReduxContext.displayName = 'ReactRedux';
    }

    /* harmony default export */ __webpack_exports__.default = (ReactReduxContext);
    /***/ }),

  /***/ './node_modules/react-redux/es/components/Provider.js':
  /*! ************************************************************!*\
  !*** ./node_modules/react-redux/es/components/Provider.js ***!
  \*********************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ const prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ './node_modules/prop-types/index.js');
    /* harmony import */ const prop_types__WEBPACK_IMPORTED_MODULE_1___default = /* #__PURE__ */__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
    /* harmony import */ const _Context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Context */ './node_modules/react-redux/es/components/Context.js');
    /* harmony import */ const _utils_Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Subscription */ './node_modules/react-redux/es/utils/Subscription.js');

    function Provider(_ref) {
      const { store } = _ref;
      const { context } = _ref;
      const { children } = _ref;
      const contextValue = Object(react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
        const subscription = new _utils_Subscription__WEBPACK_IMPORTED_MODULE_3__.default(store);
        subscription.onStateChange = subscription.notifyNestedSubs;
        return {
          store,
          subscription,
        };
      }, [store]);
      const previousState = Object(react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => store.getState(), [store]);
      Object(react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        const { subscription } = contextValue;
        subscription.trySubscribe();

        if (previousState !== store.getState()) {
          subscription.notifyNestedSubs();
        }

        return function () {
          subscription.tryUnsubscribe();
          subscription.onStateChange = null;
        };
      }, [contextValue, previousState]);
      const Context = context || _Context__WEBPACK_IMPORTED_MODULE_2__.ReactReduxContext;
      return /* #__PURE__ */react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Context.Provider, {
        value: contextValue,
      }, children);
    }

    if (true) {
      Provider.propTypes = {
        store: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.shape({
          subscribe: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
          dispatch: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
          getState: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.func.isRequired,
        }),
        context: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.object,
        children: prop_types__WEBPACK_IMPORTED_MODULE_1___default.a.any,
      };
    }

    /* harmony default export */ __webpack_exports__.default = (Provider);
    /***/ }),

  /***/ './node_modules/react-redux/es/components/connectAdvanced.js':
  /*! *******************************************************************!*\
  !*** ./node_modules/react-redux/es/components/connectAdvanced.js ***!
  \****************************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => connectAdvanced);
    /* harmony import */ const _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ './node_modules/@babel/runtime/helpers/esm/extends.js');
    /* harmony import */ const _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ './node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
    /* harmony import */ const hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hoist-non-react-statics */ './node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js');
    /* harmony import */ const hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default = /* #__PURE__ */__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2__);
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_3___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
    /* harmony import */ const react_is__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-is */ './node_modules/react-is/index.js');
    /* harmony import */ const react_is__WEBPACK_IMPORTED_MODULE_4___default = /* #__PURE__ */__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_4__);
    /* harmony import */ const _utils_Subscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Subscription */ './node_modules/react-redux/es/utils/Subscription.js');
    /* harmony import */ const _utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/useIsomorphicLayoutEffect */ './node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js');
    /* harmony import */ const _Context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Context */ './node_modules/react-redux/es/components/Context.js');

    // Define some constant arrays just to avoid re-creating these

    const EMPTY_ARRAY = [];
    const NO_SUBSCRIPTION_ARRAY = [null, null];

    const stringifyComponent = function stringifyComponent(Comp) {
      try {
        return JSON.stringify(Comp);
      } catch (err) {
        return String(Comp);
      }
    };

    function storeStateUpdatesReducer(state, action) {
      const updateCount = state[1];
      return [action.payload, updateCount + 1];
    }

    function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
      Object(_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_6__.useIsomorphicLayoutEffect)(() => effectFunc.apply(void 0, effectArgs), dependencies);
    }

    function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
      // We want to capture the wrapper props and child props we used for later comparisons
      lastWrapperProps.current = wrapperProps;
      lastChildProps.current = actualChildProps;
      renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update

      if (childPropsFromStoreUpdate.current) {
        childPropsFromStoreUpdate.current = null;
        notifyNestedSubs();
      }
    }

    function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
      // If we're not subscribed to the store, nothing to do here
      if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts

      let didUnsubscribe = false;
      let lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component

      const checkForUpdates = function checkForUpdates() {
        if (didUnsubscribe) {
          // Don't run stale listeners.
          // Redux doesn't guarantee unsubscriptions happen until next dispatch.
          return;
        }

        const latestStoreState = store.getState();
        let newChildProps; let
          error;

        try {
          // Actually run the selector with the most recent store state and wrapper props
          // to determine what the child props should be
          newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
        } catch (e) {
          error = e;
          lastThrownError = e;
        }

        if (!error) {
          lastThrownError = null;
        } // If the child props haven't changed, nothing to do here - cascade the subscription update

        if (newChildProps === lastChildProps.current) {
          if (!renderIsScheduled.current) {
            notifyNestedSubs();
          }
        } else {
          // Save references to the new child props.  Note that we track the "child props from store update"
          // as a ref instead of a useState/useReducer because we need a way to determine if that value has
          // been processed.  If this went into useState/useReducer, we couldn't clear out the value without
          // forcing another re-render, which we don't want.
          lastChildProps.current = newChildProps;
          childPropsFromStoreUpdate.current = newChildProps;
          renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

          forceComponentUpdateDispatch({
            type: 'STORE_UPDATED',
            payload: {
              error,
            },
          });
        }
      }; // Actually subscribe to the nearest connected ancestor (or store)

      subscription.onStateChange = checkForUpdates;
      subscription.trySubscribe(); // Pull data from the store after first render in case the store has
      // changed since we began.

      checkForUpdates();

      const unsubscribeWrapper = function unsubscribeWrapper() {
        didUnsubscribe = true;
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;

        if (lastThrownError) {
          // It's possible that we caught an error due to a bad mapState function, but the
          // parent re-rendered without this component and we're about to unmount.
          // This shouldn't happen as long as we do top-down subscriptions correctly, but
          // if we ever do those wrong, this throw will surface the error in our tests.
          // In that case, throw the error from here so it doesn't get lost.
          throw lastThrownError;
        }
      };

      return unsubscribeWrapper;
    }

    const initStateUpdates = function initStateUpdates() {
      return [null, 0];
    };

    function connectAdvanced(
      /*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
      selectorFactory, // options object:
      _ref,
    ) {
      if (_ref === void 0) {
        _ref = {};
      }

      const _ref2 = _ref;
      const _ref2$getDisplayName = _ref2.getDisplayName;
      const getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
        return `ConnectAdvanced(${name})`;
      } : _ref2$getDisplayName;
      const _ref2$methodName = _ref2.methodName;
      const methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName;
      const _ref2$renderCountProp = _ref2.renderCountProp;
      const renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp;
      const _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges;
      const shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta;
      const _ref2$storeKey = _ref2.storeKey;
      const storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey;
      const _ref2$withRef = _ref2.withRef;
      const withRef = _ref2$withRef === void 0 ? false : _ref2$withRef;
      const _ref2$forwardRef = _ref2.forwardRef;
      const forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef;
      const _ref2$context = _ref2.context;
      const context = _ref2$context === void 0 ? _Context__WEBPACK_IMPORTED_MODULE_7__.ReactReduxContext : _ref2$context;
      const connectOptions = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__.default)(_ref2, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef', 'forwardRef', 'context']);

      if (true) {
        if (renderCountProp !== undefined) {
          throw new Error('renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension');
        }

        if (withRef) {
          throw new Error('withRef is removed. To access the wrapped instance, use a ref on the connected component');
        }

        const customStoreWarningMessage = 'To use a custom Redux store for specific components, create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';

        if (storeKey !== 'store') {
          throw new Error(`storeKey has been removed and does not do anything. ${customStoreWarningMessage}`);
        }
      }

      const Context = context;
      return function wrapWithConnect(WrappedComponent) {
        if (true && !Object(react_is__WEBPACK_IMPORTED_MODULE_4__.isValidElementType)(WrappedComponent)) {
          throw new Error(`You must pass a component to the function returned by ${methodName}. Instead received ${stringifyComponent(WrappedComponent)}`);
        }

        const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
        const displayName = getDisplayName(wrappedComponentName);

        const selectorFactoryOptions = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, connectOptions, {
          getDisplayName,
          methodName,
          renderCountProp,
          shouldHandleStateChanges,
          storeKey,
          displayName,
          wrappedComponentName,
          WrappedComponent,
        });

        const { pure } = connectOptions;

        function createChildSelector(store) {
          return selectorFactory(store.dispatch, selectorFactoryOptions);
        } // If we aren't running in "pure" mode, we don't want to memoize values.
        // To avoid conditionally calling hooks, we fall back to a tiny wrapper
        // that just executes the given callback immediately.

        const usePureOnlyMemo = pure ? react__WEBPACK_IMPORTED_MODULE_3__.useMemo : function (callback) {
          return callback();
        };

        function ConnectFunction(props) {
          const _useMemo = Object(react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {
            // Distinguish between actual "data" props that were passed to the wrapper component,
            // and values needed to control behavior (forwarded refs, alternate context instances).
            // To maintain the wrapperProps object reference, memoize this destructuring.
            const { reactReduxForwardedRef } = props;
            const wrapperProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__.default)(props, ['reactReduxForwardedRef']);

            return [props.context, reactReduxForwardedRef, wrapperProps];
          }, [props]);
          const propsContext = _useMemo[0];
          const reactReduxForwardedRef = _useMemo[1];
          const wrapperProps = _useMemo[2];

          const ContextToUse = Object(react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() =>
            // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.
            // Memoize the check that determines which context instance we should use.
            (propsContext && propsContext.Consumer && Object(react_is__WEBPACK_IMPORTED_MODULE_4__.isContextConsumer)(/* #__PURE__ */react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(propsContext.Consumer, null)) ? propsContext : Context),
          [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available

          const contextValue = Object(react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ContextToUse); // The store _must_ exist as either a prop or in context.
          // We'll check to see if it _looks_ like a Redux store first.
          // This allows us to pass through a `store` prop that is just a plain value.

          const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
          const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);

          if (true && !didStoreComeFromProps && !didStoreComeFromContext) {
            throw new Error('Could not find "store" in the context of ' + `"${displayName}". Either wrap the root component in a <Provider>, ` + 'or pass a custom React context provider to <Provider> and the corresponding ' + `React context consumer to ${displayName} in connect options.`);
          } // Based on the previous check, one of these must be true

          const store = didStoreComeFromProps ? props.store : contextValue.store;
          const childPropsSelector = Object(react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() =>
            // The child props selector needs the store reference as an input.
            // Re-create this selector whenever the store changes.
            createChildSelector(store),
          [store]);

          const _useMemo2 = Object(react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {
            if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component
            // connected to the store via props shouldn't use subscription from context, or vice versa.

            const subscription = new _utils_Subscription__WEBPACK_IMPORTED_MODULE_5__.default(store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
            // the middle of the notification loop, where `subscription` will then be null. This can
            // probably be avoided if Subscription's listeners logic is changed to not call listeners
            // that have been unsubscribed in the  middle of the notification loop.

            const notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
            return [subscription, notifyNestedSubs];
          }, [store, didStoreComeFromProps, contextValue]);
          const subscription = _useMemo2[0];
          const notifyNestedSubs = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,
          // and memoize that value to avoid unnecessary context updates.

          const overriddenContextValue = Object(react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {
            if (didStoreComeFromProps) {
              // This component is directly subscribed to a store from props.
              // We don't want descendants reading from this store - pass down whatever
              // the existing context value is from the nearest connected ancestor.
              return contextValue;
            } // Otherwise, put this component's subscription instance into context, so that
            // connected descendants won't update until after this component is done

            return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, contextValue, {
              subscription,
            });
          }, [didStoreComeFromProps, contextValue, subscription]); // We need to force this wrapper component to re-render whenever a Redux store update
          // causes a change to the calculated child component props (or we caught an error in mapState)

          const _useReducer = Object(react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates);
          const _useReducer$ = _useReducer[0];
          const previousStateUpdateResult = _useReducer$[0];
          const forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards

          if (previousStateUpdateResult && previousStateUpdateResult.error) {
            throw previousStateUpdateResult.error;
          } // Set up refs to coordinate values between the subscription effect and the render logic

          const lastChildProps = Object(react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
          const lastWrapperProps = Object(react__WEBPACK_IMPORTED_MODULE_3__.useRef)(wrapperProps);
          const childPropsFromStoreUpdate = Object(react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
          const renderIsScheduled = Object(react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);
          const actualChildProps = usePureOnlyMemo(() => {
            // Tricky logic here:
            // - This render may have been triggered by a Redux store update that produced new child props
            // - However, we may have gotten new wrapper props after that
            // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.
            // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.
            // So, we'll use the child props from store update only if the wrapper props are the same as last time.
            if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
              return childPropsFromStoreUpdate.current;
            } // TODO We're reading the store directly in render() here. Bad idea?
            // This will likely cause Bad Things (TM) to happen in Concurrent Mode.
            // Note that we do this because on renders _not_ caused by store updates, we need the latest store state
            // to determine what the child props should be.

            return childPropsSelector(store.getState(), wrapperProps);
          }, [store, previousStateUpdateResult, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns
          // about useLayoutEffect in SSR, so we try to detect environment and fall back to
          // just useEffect instead to avoid the warning, since neither will run anyway.

          useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]); // Our re-subscribe logic only runs when the store/subscription setup changes

          useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]); // Now that all that's done, we can finally try to actually render the child component.
          // We memoize the elements for the rendered child component as an optimization.

          const renderedWrappedComponent = Object(react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() =>
          /* #__PURE__ */react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(WrappedComponent, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, actualChildProps, {
              ref: reactReduxForwardedRef,
            })),
          [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering
          // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

          const renderedChild = Object(react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {
            if (shouldHandleStateChanges) {
              // If this component is subscribed to store updates, we need to pass its own
              // subscription instance down to our descendants. That means rendering the same
              // Context instance, and putting a different value into the context.
              return /* #__PURE__ */react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(ContextToUse.Provider, {
                value: overriddenContextValue,
              }, renderedWrappedComponent);
            }

            return renderedWrappedComponent;
          }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
          return renderedChild;
        } // If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

        const Connect = pure ? react__WEBPACK_IMPORTED_MODULE_3___default.a.memo(ConnectFunction) : ConnectFunction;
        Connect.WrappedComponent = WrappedComponent;
        Connect.displayName = displayName;

        if (forwardRef) {
          const forwarded = react__WEBPACK_IMPORTED_MODULE_3___default.a.forwardRef((props, ref) =>
          /* #__PURE__ */react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(Connect, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, props, {
              reactReduxForwardedRef: ref,
            })));
          forwarded.displayName = displayName;
          forwarded.WrappedComponent = WrappedComponent;
          return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default()(forwarded, WrappedComponent);
        }

        return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default()(Connect, WrappedComponent);
      };
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/connect/connect.js':
  /*! ********************************************************!*\
  !*** ./node_modules/react-redux/es/connect/connect.js ***!
  \******************************************************* */
  /*! exports provided: createConnect, default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createConnect', () => createConnect);
    /* harmony import */ const _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ './node_modules/@babel/runtime/helpers/esm/extends.js');
    /* harmony import */ const _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ './node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
    /* harmony import */ const _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/connectAdvanced */ './node_modules/react-redux/es/components/connectAdvanced.js');
    /* harmony import */ const _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/shallowEqual */ './node_modules/react-redux/es/utils/shallowEqual.js');
    /* harmony import */ const _mapDispatchToProps__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapDispatchToProps */ './node_modules/react-redux/es/connect/mapDispatchToProps.js');
    /* harmony import */ const _mapStateToProps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mapStateToProps */ './node_modules/react-redux/es/connect/mapStateToProps.js');
    /* harmony import */ const _mergeProps__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mergeProps */ './node_modules/react-redux/es/connect/mergeProps.js');
    /* harmony import */ const _selectorFactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./selectorFactory */ './node_modules/react-redux/es/connect/selectorFactory.js');

    /*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps

  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

    function match(arg, factories, name) {
      for (let i = factories.length - 1; i >= 0; i--) {
        const result = factories[i](arg);
        if (result) return result;
      }

      return function (dispatch, options) {
        throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`);
      };
    }

    function strictEqual(a, b) {
      return a === b;
    } // createConnect with default args builds the 'official' connect behavior. Calling it with
    // different options opens up some testing and extensibility scenarios

    function createConnect(_temp) {
      const _ref = _temp === void 0 ? {} : _temp;
      const _ref$connectHOC = _ref.connectHOC;
      const connectHOC = _ref$connectHOC === void 0 ? _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_2__.default : _ref$connectHOC;
      const _ref$mapStateToPropsF = _ref.mapStateToPropsFactories;
      const mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps__WEBPACK_IMPORTED_MODULE_5__.default : _ref$mapStateToPropsF;
      const _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories;
      const mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps__WEBPACK_IMPORTED_MODULE_4__.default : _ref$mapDispatchToPro;
      const _ref$mergePropsFactor = _ref.mergePropsFactories;
      const mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps__WEBPACK_IMPORTED_MODULE_6__.default : _ref$mergePropsFactor;
      const _ref$selectorFactory = _ref.selectorFactory;
      const selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory__WEBPACK_IMPORTED_MODULE_7__.default : _ref$selectorFactory;

      return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
        if (_ref2 === void 0) {
          _ref2 = {};
        }

        const _ref3 = _ref2;
        const _ref3$pure = _ref3.pure;
        const pure = _ref3$pure === void 0 ? true : _ref3$pure;
        const _ref3$areStatesEqual = _ref3.areStatesEqual;
        const areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual;
        const _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual;
        const areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__.default : _ref3$areOwnPropsEqua;
        const _ref3$areStatePropsEq = _ref3.areStatePropsEqual;
        const areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__.default : _ref3$areStatePropsEq;
        const _ref3$areMergedPropsE = _ref3.areMergedPropsEqual;
        const areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__.default : _ref3$areMergedPropsE;
        const extraOptions = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__.default)(_ref3, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

        const initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
        const initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
        const initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
        return connectHOC(selectorFactory, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({
          // used in error messages
          methodName: 'connect',
          // used to compute Connect's displayName from the wrapped component's displayName.
          getDisplayName: function getDisplayName(name) {
            return `Connect(${name})`;
          },
          // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
          shouldHandleStateChanges: Boolean(mapStateToProps),
          // passed through to selectorFactory
          initMapStateToProps,
          initMapDispatchToProps,
          initMergeProps,
          pure,
          areStatesEqual,
          areOwnPropsEqual,
          areStatePropsEqual,
          areMergedPropsEqual,
        }, extraOptions));
      };
    }
    /* harmony default export */ __webpack_exports__.default = (/* #__PURE__ */createConnect());
    /***/ }),

  /***/ './node_modules/react-redux/es/connect/mapDispatchToProps.js':
  /*! *******************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mapDispatchToProps.js ***!
  \****************************************************************** */
  /*! exports provided: whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject, default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'whenMapDispatchToPropsIsFunction', () => whenMapDispatchToPropsIsFunction);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'whenMapDispatchToPropsIsMissing', () => whenMapDispatchToPropsIsMissing);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'whenMapDispatchToPropsIsObject', () => whenMapDispatchToPropsIsObject);
    /* harmony import */ const redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ './node_modules/redux/es/redux.js');
    /* harmony import */ const _wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wrapMapToProps */ './node_modules/react-redux/es/connect/wrapMapToProps.js');

    function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
      return typeof mapDispatchToProps === 'function' ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
    }
    function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
      return !mapDispatchToProps ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__.wrapMapToPropsConstant)(dispatch => ({
        dispatch,
      })) : undefined;
    }
    function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
      return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__.wrapMapToPropsConstant)(dispatch => Object(redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators)(mapDispatchToProps, dispatch)) : undefined;
    }
    /* harmony default export */ __webpack_exports__.default = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);
    /***/ }),

  /***/ './node_modules/react-redux/es/connect/mapStateToProps.js':
  /*! ****************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mapStateToProps.js ***!
  \*************************************************************** */
  /*! exports provided: whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing, default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'whenMapStateToPropsIsFunction', () => whenMapStateToPropsIsFunction);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'whenMapStateToPropsIsMissing', () => whenMapStateToPropsIsMissing);
    /* harmony import */ const _wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wrapMapToProps */ './node_modules/react-redux/es/connect/wrapMapToProps.js');

    function whenMapStateToPropsIsFunction(mapStateToProps) {
      return typeof mapStateToProps === 'function' ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
    }
    function whenMapStateToPropsIsMissing(mapStateToProps) {
      return !mapStateToProps ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsConstant)(() => ({})) : undefined;
    }
    /* harmony default export */ __webpack_exports__.default = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);
    /***/ }),

  /***/ './node_modules/react-redux/es/connect/mergeProps.js':
  /*! ***********************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mergeProps.js ***!
  \********************************************************** */
  /*! exports provided: defaultMergeProps, wrapMergePropsFunc, whenMergePropsIsFunction, whenMergePropsIsOmitted, default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'defaultMergeProps', () => defaultMergeProps);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'wrapMergePropsFunc', () => wrapMergePropsFunc);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'whenMergePropsIsFunction', () => whenMergePropsIsFunction);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'whenMergePropsIsOmitted', () => whenMergePropsIsOmitted);
    /* harmony import */ const _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ './node_modules/@babel/runtime/helpers/esm/extends.js');
    /* harmony import */ const _utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/verifyPlainObject */ './node_modules/react-redux/es/utils/verifyPlainObject.js');

    function defaultMergeProps(stateProps, dispatchProps, ownProps) {
      return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, ownProps, stateProps, dispatchProps);
    }
    function wrapMergePropsFunc(mergeProps) {
      return function initMergePropsProxy(dispatch, _ref) {
        const { displayName } = _ref;
        const { pure } = _ref;
        const { areMergedPropsEqual } = _ref;
        let hasRunOnce = false;
        let mergedProps;
        return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
          const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

          if (hasRunOnce) {
            if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
          } else {
            hasRunOnce = true;
            mergedProps = nextMergedProps;
            if (true) Object(_utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_1__.default)(mergedProps, displayName, 'mergeProps');
          }

          return mergedProps;
        };
      };
    }
    function whenMergePropsIsFunction(mergeProps) {
      return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
    }
    function whenMergePropsIsOmitted(mergeProps) {
      return !mergeProps ? function () {
        return defaultMergeProps;
      } : undefined;
    }
    /* harmony default export */ __webpack_exports__.default = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);
    /***/ }),

  /***/ './node_modules/react-redux/es/connect/selectorFactory.js':
  /*! ****************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/selectorFactory.js ***!
  \*************************************************************** */
  /*! exports provided: impureFinalPropsSelectorFactory, pureFinalPropsSelectorFactory, default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'impureFinalPropsSelectorFactory', () => impureFinalPropsSelectorFactory);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'pureFinalPropsSelectorFactory', () => pureFinalPropsSelectorFactory);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => finalPropsSelectorFactory);
    /* harmony import */ const _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ './node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
    /* harmony import */ const _verifySubselectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./verifySubselectors */ './node_modules/react-redux/es/connect/verifySubselectors.js');

    function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
      return function impureFinalPropsSelector(state, ownProps) {
        return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
      };
    }
    function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
      const { areStatesEqual } = _ref;
      const { areOwnPropsEqual } = _ref;
      const { areStatePropsEqual } = _ref;
      let hasRunAtLeastOnce = false;
      let state;
      let ownProps;
      let stateProps;
      let dispatchProps;
      let mergedProps;

      function handleFirstCall(firstState, firstOwnProps) {
        state = firstState;
        ownProps = firstOwnProps;
        stateProps = mapStateToProps(state, ownProps);
        dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        hasRunAtLeastOnce = true;
        return mergedProps;
      }

      function handleNewPropsAndNewState() {
        stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }

      function handleNewProps() {
        if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }

      function handleNewState() {
        const nextStateProps = mapStateToProps(state, ownProps);
        const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
        stateProps = nextStateProps;
        if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }

      function handleSubsequentCalls(nextState, nextOwnProps) {
        const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
        const stateChanged = !areStatesEqual(nextState, state);
        state = nextState;
        ownProps = nextOwnProps;
        if (propsChanged && stateChanged) return handleNewPropsAndNewState();
        if (propsChanged) return handleNewProps();
        if (stateChanged) return handleNewState();
        return mergedProps;
      }

      return function pureFinalPropsSelector(nextState, nextOwnProps) {
        return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
      };
    } // TODO: Add more comments
    // If pure is true, the selector returned by selectorFactory will memoize its results,
    // allowing connectAdvanced's shouldComponentUpdate to return false if final
    // props have not changed. If false, the selector will always return a new
    // object and shouldComponentUpdate will always return true.

    function finalPropsSelectorFactory(dispatch, _ref2) {
      const { initMapStateToProps } = _ref2;
      const { initMapDispatchToProps } = _ref2;
      const { initMergeProps } = _ref2;
      const options = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__.default)(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

      const mapStateToProps = initMapStateToProps(dispatch, options);
      const mapDispatchToProps = initMapDispatchToProps(dispatch, options);
      const mergeProps = initMergeProps(dispatch, options);

      if (true) {
        Object(_verifySubselectors__WEBPACK_IMPORTED_MODULE_1__.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
      }

      const selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
      return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/connect/verifySubselectors.js':
  /*! *******************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/verifySubselectors.js ***!
  \****************************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => verifySubselectors);
    /* harmony import */ const _utils_warning__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/warning */ './node_modules/react-redux/es/utils/warning.js');

    function verify(selector, methodName, displayName) {
      if (!selector) {
        throw new Error(`Unexpected value for ${methodName} in ${displayName}.`);
      } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
        if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {
          Object(_utils_warning__WEBPACK_IMPORTED_MODULE_0__.default)(`The selector for ${methodName} of ${displayName} did not specify a value for dependsOnOwnProps.`);
        }
      }
    }

    function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
      verify(mapStateToProps, 'mapStateToProps', displayName);
      verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
      verify(mergeProps, 'mergeProps', displayName);
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/connect/wrapMapToProps.js':
  /*! ***************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/wrapMapToProps.js ***!
  \************************************************************** */
  /*! exports provided: wrapMapToPropsConstant, getDependsOnOwnProps, wrapMapToPropsFunc */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'wrapMapToPropsConstant', () => wrapMapToPropsConstant);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'getDependsOnOwnProps', () => getDependsOnOwnProps);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'wrapMapToPropsFunc', () => wrapMapToPropsFunc);
    /* harmony import */ const _utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/verifyPlainObject */ './node_modules/react-redux/es/utils/verifyPlainObject.js');

    function wrapMapToPropsConstant(getConstant) {
      return function initConstantSelector(dispatch, options) {
        const constant = getConstant(dispatch, options);

        function constantSelector() {
          return constant;
        }

        constantSelector.dependsOnOwnProps = false;
        return constantSelector;
      };
    } // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
    // to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
    // whether mapToProps needs to be invoked when props have changed.
    //
    // A length of one signals that mapToProps does not depend on props from the parent component.
    // A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
    // therefore not reporting its length accurately..

    function getDependsOnOwnProps(mapToProps) {
      return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
    } // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
    // this function wraps mapToProps in a proxy function which does several things:
    //
    //  * Detects whether the mapToProps function being called depends on props, which
    //    is used by selectorFactory to decide if it should reinvoke on props changes.
    //
    //  * On first call, handles mapToProps if returns another function, and treats that
    //    new function as the true mapToProps for subsequent calls.
    //
    //  * On first call, verifies the first result is a plain object, in order to warn
    //    the developer that their mapToProps function is not returning a valid result.
    //

    function wrapMapToPropsFunc(mapToProps, methodName) {
      return function initProxySelector(dispatch, _ref) {
        const { displayName } = _ref;

        var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
          return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
        }; // allow detectFactoryAndVerify to get ownProps

        proxy.dependsOnOwnProps = true;

        proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
          proxy.mapToProps = mapToProps;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
          let props = proxy(stateOrDispatch, ownProps);

          if (typeof props === 'function') {
            proxy.mapToProps = props;
            proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
            props = proxy(stateOrDispatch, ownProps);
          }

          if (true) Object(_utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_0__.default)(props, displayName, methodName);
          return props;
        };

        return proxy;
      };
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/hooks/useDispatch.js':
  /*! **********************************************************!*\
  !*** ./node_modules/react-redux/es/hooks/useDispatch.js ***!
  \********************************************************* */
  /*! exports provided: createDispatchHook, useDispatch */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createDispatchHook', () => createDispatchHook);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useDispatch', () => useDispatch);
    /* harmony import */ const _components_Context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Context */ './node_modules/react-redux/es/components/Context.js');
    /* harmony import */ const _useStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useStore */ './node_modules/react-redux/es/hooks/useStore.js');

    /**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

    function createDispatchHook(context) {
      if (context === void 0) {
        context = _components_Context__WEBPACK_IMPORTED_MODULE_0__.ReactReduxContext;
      }

      const useStore = context === _components_Context__WEBPACK_IMPORTED_MODULE_0__.ReactReduxContext ? _useStore__WEBPACK_IMPORTED_MODULE_1__.useStore : Object(_useStore__WEBPACK_IMPORTED_MODULE_1__.createStoreHook)(context);
      return function useDispatch() {
        const store = useStore();
        return store.dispatch;
      };
    }
    /**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

    var useDispatch = /* #__PURE__ */createDispatchHook();
    /***/ }),

  /***/ './node_modules/react-redux/es/hooks/useReduxContext.js':
  /*! **************************************************************!*\
  !*** ./node_modules/react-redux/es/hooks/useReduxContext.js ***!
  \************************************************************* */
  /*! exports provided: useReduxContext */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useReduxContext', () => useReduxContext);
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ const _components_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Context */ './node_modules/react-redux/es/components/Context.js');

    /**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

    function useReduxContext() {
      const contextValue = Object(react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext);

      if (true && !contextValue) {
        throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');
      }

      return contextValue;
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/hooks/useSelector.js':
  /*! **********************************************************!*\
  !*** ./node_modules/react-redux/es/hooks/useSelector.js ***!
  \********************************************************* */
  /*! exports provided: createSelectorHook, useSelector */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createSelectorHook', () => createSelectorHook);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useSelector', () => useSelector);
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ const _useReduxContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useReduxContext */ './node_modules/react-redux/es/hooks/useReduxContext.js');
    /* harmony import */ const _utils_Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Subscription */ './node_modules/react-redux/es/utils/Subscription.js');
    /* harmony import */ const _utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/useIsomorphicLayoutEffect */ './node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js');
    /* harmony import */ const _components_Context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/Context */ './node_modules/react-redux/es/components/Context.js');

    const refEquality = function refEquality(a, b) {
      return a === b;
    };

    function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
      const _useReducer = Object(react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(s => s + 1, 0);
      const forceRender = _useReducer[1];

      const subscription = Object(react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => new _utils_Subscription__WEBPACK_IMPORTED_MODULE_2__.default(store, contextSub), [store, contextSub]);
      const latestSubscriptionCallbackError = Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
      const latestSelector = Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
      const latestStoreState = Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
      const latestSelectedState = Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
      const storeState = store.getState();
      let selectedState;

      try {
        if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
          selectedState = selector(storeState);
        } else {
          selectedState = latestSelectedState.current;
        }
      } catch (err) {
        if (latestSubscriptionCallbackError.current) {
          err.message += `\nThe error may be correlated with this previous error:\n${latestSubscriptionCallbackError.current.stack}\n\n`;
        }

        throw err;
      }

      Object(_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(() => {
        latestSelector.current = selector;
        latestStoreState.current = storeState;
        latestSelectedState.current = selectedState;
        latestSubscriptionCallbackError.current = undefined;
      });
      Object(_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(() => {
        function checkForUpdates() {
          try {
            const newSelectedState = latestSelector.current(store.getState());

            if (equalityFn(newSelectedState, latestSelectedState.current)) {
              return;
            }

            latestSelectedState.current = newSelectedState;
          } catch (err) {
            // we ignore all errors here, since when the component
            // is re-rendered, the selectors are called again, and
            // will throw again, if neither props nor store state
            // changed
            latestSubscriptionCallbackError.current = err;
          }

          forceRender();
        }

        subscription.onStateChange = checkForUpdates;
        subscription.trySubscribe();
        checkForUpdates();
        return function () {
          return subscription.tryUnsubscribe();
        };
      }, [store, subscription]);
      return selectedState;
    }
    /**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

    function createSelectorHook(context) {
      if (context === void 0) {
        context = _components_Context__WEBPACK_IMPORTED_MODULE_4__.ReactReduxContext;
      }

      const useReduxContext = context === _components_Context__WEBPACK_IMPORTED_MODULE_4__.ReactReduxContext ? _useReduxContext__WEBPACK_IMPORTED_MODULE_1__.useReduxContext : function () {
        return Object(react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);
      };
      return function useSelector(selector, equalityFn) {
        if (equalityFn === void 0) {
          equalityFn = refEquality;
        }

        if (true && !selector) {
          throw new Error('You must pass a selector to useSelector');
        }

        const _useReduxContext = useReduxContext();
        const { store } = _useReduxContext;
        const contextSub = _useReduxContext.subscription;

        const selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
        Object(react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(selectedState);
        return selectedState;
      };
    }
    /**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

    var useSelector = /* #__PURE__ */createSelectorHook();
    /***/ }),

  /***/ './node_modules/react-redux/es/hooks/useStore.js':
  /*! *******************************************************!*\
  !*** ./node_modules/react-redux/es/hooks/useStore.js ***!
  \****************************************************** */
  /*! exports provided: createStoreHook, useStore */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createStoreHook', () => createStoreHook);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useStore', () => useStore);
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ const _components_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Context */ './node_modules/react-redux/es/components/Context.js');
    /* harmony import */ const _useReduxContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useReduxContext */ './node_modules/react-redux/es/hooks/useReduxContext.js');

    /**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

    function createStoreHook(context) {
      if (context === void 0) {
        context = _components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext;
      }

      const useReduxContext = context === _components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext ? _useReduxContext__WEBPACK_IMPORTED_MODULE_2__.useReduxContext : function () {
        return Object(react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);
      };
      return function useStore() {
        const _useReduxContext = useReduxContext();
        const { store } = _useReduxContext;

        return store;
      };
    }
    /**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

    var useStore = /* #__PURE__ */createStoreHook();
    /***/ }),

  /***/ './node_modules/react-redux/es/index.js':
  /*! **********************************************!*\
  !*** ./node_modules/react-redux/es/index.js ***!
  \********************************************* */
  /*! exports provided: Provider, connectAdvanced, ReactReduxContext, connect, batch, useDispatch, createDispatchHook, useSelector, createSelectorHook, useStore, createStoreHook, shallowEqual */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ const _components_Provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Provider */ './node_modules/react-redux/es/components/Provider.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'Provider', () => _components_Provider__WEBPACK_IMPORTED_MODULE_0__.default);

    /* harmony import */ const _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/connectAdvanced */ './node_modules/react-redux/es/components/connectAdvanced.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'connectAdvanced', () => _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_1__.default);

    /* harmony import */ const _components_Context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Context */ './node_modules/react-redux/es/components/Context.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'ReactReduxContext', () => _components_Context__WEBPACK_IMPORTED_MODULE_2__.ReactReduxContext);

    /* harmony import */ const _connect_connect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connect/connect */ './node_modules/react-redux/es/connect/connect.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'connect', () => _connect_connect__WEBPACK_IMPORTED_MODULE_3__.default);

    /* harmony import */ const _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks/useDispatch */ './node_modules/react-redux/es/hooks/useDispatch.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'useDispatch', () => _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__.useDispatch);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'createDispatchHook', () => _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__.createDispatchHook);

    /* harmony import */ const _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hooks/useSelector */ './node_modules/react-redux/es/hooks/useSelector.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'useSelector', () => _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__.useSelector);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'createSelectorHook', () => _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__.createSelectorHook);

    /* harmony import */ const _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useStore */ './node_modules/react-redux/es/hooks/useStore.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'useStore', () => _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__.useStore);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'createStoreHook', () => _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__.createStoreHook);

    /* harmony import */ const _utils_batch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/batch */ './node_modules/react-redux/es/utils/batch.js');
    /* harmony import */ const _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/reactBatchedUpdates */ './node_modules/react-redux/es/utils/reactBatchedUpdates.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'batch', () => _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_8__.unstable_batchedUpdates);

    /* harmony import */ const _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/shallowEqual */ './node_modules/react-redux/es/utils/shallowEqual.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'shallowEqual', () => _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_9__.default);

    Object(_utils_batch__WEBPACK_IMPORTED_MODULE_7__.setBatch)(_utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_8__.unstable_batchedUpdates);
    /***/ }),

  /***/ './node_modules/react-redux/es/utils/Subscription.js':
  /*! ***********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/Subscription.js ***!
  \********************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => Subscription);
    /* harmony import */ const _batch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batch */ './node_modules/react-redux/es/utils/batch.js');
    // encapsulates the subscription logic for connecting a component to the redux store, as
    // well as nesting subscriptions of descendant components, so that we can ensure the
    // ancestor components re-render before descendants

    const nullListeners = {
      notify: function notify() {},
    };

    function createListenerCollection() {
      const batch = Object(_batch__WEBPACK_IMPORTED_MODULE_0__.getBatch)();
      let first = null;
      let last = null;
      return {
        clear: function clear() {
          first = null;
          last = null;
        },
        notify: function notify() {
          batch(() => {
            let listener = first;

            while (listener) {
              listener.callback();
              listener = listener.next;
            }
          });
        },
        get: function get() {
          const listeners = [];
          let listener = first;

          while (listener) {
            listeners.push(listener);
            listener = listener.next;
          }

          return listeners;
        },
        subscribe: function subscribe(callback) {
          let isSubscribed = true;
          const listener = last = {
            callback,
            next: null,
            prev: last,
          };

          if (listener.prev) {
            listener.prev.next = listener;
          } else {
            first = listener;
          }

          return function unsubscribe() {
            if (!isSubscribed || first === null) return;
            isSubscribed = false;

            if (listener.next) {
              listener.next.prev = listener.prev;
            } else {
              last = listener.prev;
            }

            if (listener.prev) {
              listener.prev.next = listener.next;
            } else {
              first = listener.next;
            }
          };
        },
      };
    }

    var Subscription = /* #__PURE__ */(function () {
      function Subscription(store, parentSub) {
        this.store = store;
        this.parentSub = parentSub;
        this.unsubscribe = null;
        this.listeners = nullListeners;
        this.handleChangeWrapper = this.handleChangeWrapper.bind(this);
      }

      const _proto = Subscription.prototype;

      _proto.addNestedSub = function addNestedSub(listener) {
        this.trySubscribe();
        return this.listeners.subscribe(listener);
      };

      _proto.notifyNestedSubs = function notifyNestedSubs() {
        this.listeners.notify();
      };

      _proto.handleChangeWrapper = function handleChangeWrapper() {
        if (this.onStateChange) {
          this.onStateChange();
        }
      };

      _proto.isSubscribed = function isSubscribed() {
        return Boolean(this.unsubscribe);
      };

      _proto.trySubscribe = function trySubscribe() {
        if (!this.unsubscribe) {
          this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);
          this.listeners = createListenerCollection();
        }
      };

      _proto.tryUnsubscribe = function tryUnsubscribe() {
        if (this.unsubscribe) {
          this.unsubscribe();
          this.unsubscribe = null;
          this.listeners.clear();
          this.listeners = nullListeners;
        }
      };

      return Subscription;
    }());
    /***/ }),

  /***/ './node_modules/react-redux/es/utils/batch.js':
  /*! ****************************************************!*\
  !*** ./node_modules/react-redux/es/utils/batch.js ***!
  \*************************************************** */
  /*! exports provided: setBatch, getBatch */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'setBatch', () => setBatch);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'getBatch', () => getBatch);
    // Default to a dummy "batch" implementation that just runs the callback
    function defaultNoopBatch(callback) {
      callback();
    }

    let batch = defaultNoopBatch; // Allow injecting another batching function later

    var setBatch = function setBatch(newBatch) {
      return batch = newBatch;
    }; // Supply a getter just to skip dealing with ESM bindings

    var getBatch = function getBatch() {
      return batch;
    };
    /***/ }),

  /***/ './node_modules/react-redux/es/utils/isPlainObject.js':
  /*! ************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/isPlainObject.js ***!
  \*********************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => isPlainObject);
    /**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
    function isPlainObject(obj) {
      if (typeof obj !== 'object' || obj === null) return false;
      const proto = Object.getPrototypeOf(obj);
      if (proto === null) return true;
      let baseProto = proto;

      while (Object.getPrototypeOf(baseProto) !== null) {
        baseProto = Object.getPrototypeOf(baseProto);
      }

      return proto === baseProto;
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/utils/reactBatchedUpdates.js':
  /*! ******************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/reactBatchedUpdates.js ***!
  \***************************************************************** */
  /*! exports provided: unstable_batchedUpdates */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ const react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ './node_modules/react-dom/index.js');
    /* harmony import */ const react_dom__WEBPACK_IMPORTED_MODULE_0___default = /* #__PURE__ */__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'unstable_batchedUpdates', () => react_dom__WEBPACK_IMPORTED_MODULE_0__.unstable_batchedUpdates);

    /* eslint-disable import/no-unresolved */
    /***/ }),

  /***/ './node_modules/react-redux/es/utils/shallowEqual.js':
  /*! ***********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/shallowEqual.js ***!
  \********************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => shallowEqual);
    function is(x, y) {
      if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      }
      return x !== x && y !== y;
    }

    function shallowEqual(objA, objB) {
      if (is(objA, objB)) return true;

      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }

      const keysA = Object.keys(objA);
      const keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) return false;

      for (let i = 0; i < keysA.length; i++) {
        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js':
  /*! ************************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js ***!
  \*********************************************************************** */
  /*! exports provided: useIsomorphicLayoutEffect */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useIsomorphicLayoutEffect', () => useIsomorphicLayoutEffect);
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_0___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
    // React currently throws a warning when using useLayoutEffect on the server.
    // To get around it, we can conditionally useEffect on the server (no-op) and
    // useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
    // subscription callback always has the selector from the latest render commit
    // available, otherwise a store update may happen between render and the effect,
    // which may cause missed updates; we also must ensure the store subscription
    // is created synchronously, otherwise a store update may occur before the
    // subscription is created and an inconsistent state may be observed

    var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;
    /***/ }),

  /***/ './node_modules/react-redux/es/utils/verifyPlainObject.js':
  /*! ****************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/verifyPlainObject.js ***!
  \*************************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => verifyPlainObject);
    /* harmony import */ const _isPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isPlainObject */ './node_modules/react-redux/es/utils/isPlainObject.js');
    /* harmony import */ const _warning__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./warning */ './node_modules/react-redux/es/utils/warning.js');

    function verifyPlainObject(value, displayName, methodName) {
      if (!Object(_isPlainObject__WEBPACK_IMPORTED_MODULE_0__.default)(value)) {
        Object(_warning__WEBPACK_IMPORTED_MODULE_1__.default)(`${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`);
      }
    }
    /***/ }),

  /***/ './node_modules/react-redux/es/utils/warning.js':
  /*! ******************************************************!*\
  !*** ./node_modules/react-redux/es/utils/warning.js ***!
  \***************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => warning);
    /**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
    function warning(message) {
      /* eslint-disable no-console */
      if (typeof console !== 'undefined' && typeof console.error === 'function') {
        console.error(message);
      }
      /* eslint-enable no-console */

      try {
        // This error was thrown as a convenience so that if you enable
        // "break on all exceptions" in your console,
        // it would pause the execution at this line.
        throw new Error(message);
        /* eslint-disable no-empty */
      } catch (e) {}
      /* eslint-enable no-empty */
    }
    /***/ }),

  /***/ './node_modules/react-refresh/cjs/react-refresh-runtime.development.js':
  /*! *****************************************************************************!*\
  !*** ./node_modules/react-refresh/cjs/react-refresh-runtime.development.js ***!
  \**************************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /** @license React vundefined
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    if (true) {
      (function () {
        // ATTENTION
        // When adding new symbols to this file,
        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.

        let REACT_ELEMENT_TYPE = 0xeac7;
        let REACT_PORTAL_TYPE = 0xeaca;
        let REACT_FRAGMENT_TYPE = 0xeacb;
        let REACT_STRICT_MODE_TYPE = 0xeacc;
        let REACT_PROFILER_TYPE = 0xead2;
        let REACT_PROVIDER_TYPE = 0xeacd;
        let REACT_CONTEXT_TYPE = 0xeace;
        let REACT_FORWARD_REF_TYPE = 0xead0;
        let REACT_SUSPENSE_TYPE = 0xead1;
        let REACT_SUSPENSE_LIST_TYPE = 0xead8;
        let REACT_MEMO_TYPE = 0xead3;
        let REACT_LAZY_TYPE = 0xead4;
        let REACT_BLOCK_TYPE = 0xead9;
        let REACT_SERVER_BLOCK_TYPE = 0xeada;
        let REACT_FUNDAMENTAL_TYPE = 0xead5;
        let REACT_RESPONDER_TYPE = 0xead6;
        let REACT_SCOPE_TYPE = 0xead7;
        let REACT_OPAQUE_ID_TYPE = 0xeae0;
        let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
        let REACT_OFFSCREEN_TYPE = 0xeae2;
        let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

        if (typeof Symbol === 'function' && Symbol.for) {
          const symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor('react.element');
          REACT_PORTAL_TYPE = symbolFor('react.portal');
          REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
          REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
          REACT_PROFILER_TYPE = symbolFor('react.profiler');
          REACT_PROVIDER_TYPE = symbolFor('react.provider');
          REACT_CONTEXT_TYPE = symbolFor('react.context');
          REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
          REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
          REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
          REACT_MEMO_TYPE = symbolFor('react.memo');
          REACT_LAZY_TYPE = symbolFor('react.lazy');
          REACT_BLOCK_TYPE = symbolFor('react.block');
          REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
          REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
          REACT_RESPONDER_TYPE = symbolFor('react.responder');
          REACT_SCOPE_TYPE = symbolFor('react.scope');
          REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
          REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
          REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
        }

        const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
        // It's OK to reference families, but use WeakMap/Set for types.

        const allFamiliesByID = new Map();
        const allFamiliesByType = new PossiblyWeakMap();
        const allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
        // that have actually been edited here. This keeps checks fast.
        // $FlowIssue

        const updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
        // It is an array of [Family, NextType] tuples.

        let pendingUpdates = []; // This is injected by the renderer via DevTools global hook.

        const helpersByRendererID = new Map();
        const helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.

        const mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.

        const failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
        // It needs to be weak because we do this even for roots that failed to mount.
        // If there is no WeakMap, we won't attempt to do retrying.
        // $FlowIssue

        const rootElements = // $FlowIssue
    typeof WeakMap === 'function' ? new WeakMap() : null;
        let isPerformingRefresh = false;

        function computeFullKey(signature) {
          if (signature.fullKey !== null) {
            return signature.fullKey;
          }

          let fullKey = signature.ownKey;
          let hooks;

          try {
            hooks = signature.getCustomHooks();
          } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
          }

          for (let i = 0; i < hooks.length; i++) {
            const hook = hooks[i];

            if (typeof hook !== 'function') {
              // Something's wrong. Assume we need to remount.
              signature.forceReset = true;
              signature.fullKey = fullKey;
              return fullKey;
            }

            const nestedHookSignature = allSignaturesByType.get(hook);

            if (nestedHookSignature === undefined) {
              // No signature means Hook wasn't in the source code, e.g. in a library.
              // We'll skip it because we can assume it won't change during this session.
              continue;
            }

            const nestedHookKey = computeFullKey(nestedHookSignature);

            if (nestedHookSignature.forceReset) {
              signature.forceReset = true;
            }

            fullKey += `\n---\n${nestedHookKey}`;
          }

          signature.fullKey = fullKey;
          return fullKey;
        }

        function haveEqualSignatures(prevType, nextType) {
          const prevSignature = allSignaturesByType.get(prevType);
          const nextSignature = allSignaturesByType.get(nextType);

          if (prevSignature === undefined && nextSignature === undefined) {
            return true;
          }

          if (prevSignature === undefined || nextSignature === undefined) {
            return false;
          }

          if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {
            return false;
          }

          if (nextSignature.forceReset) {
            return false;
          }

          return true;
        }

        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }

        function canPreserveStateBetween(prevType, nextType) {
          if (isReactClass(prevType) || isReactClass(nextType)) {
            return false;
          }

          if (haveEqualSignatures(prevType, nextType)) {
            return true;
          }

          return false;
        }

        function resolveFamily(type) {
          // Only check updated types to keep lookups fast.
          return updatedFamiliesByType.get(type);
        } // If we didn't care about IE11, we could use new Map/Set(iterable).

        function cloneMap(map) {
          const clone = new Map();
          map.forEach((value, key) => {
            clone.set(key, value);
          });
          return clone;
        }

        function cloneSet(set) {
          const clone = new Set();
          set.forEach(value => {
            clone.add(value);
          });
          return clone;
        }

        function performReactRefresh() {
          if (pendingUpdates.length === 0) {
            return null;
          }

          if (isPerformingRefresh) {
            return null;
          }

          isPerformingRefresh = true;

          try {
            const staleFamilies = new Set();
            const updatedFamilies = new Set();
            const updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(_ref => {
              const family = _ref[0];
              const nextType = _ref[1]; // Now that we got a real edit, we can create associations
              // that will be read by the React reconciler.

              const prevType = family.current;
              updatedFamiliesByType.set(prevType, family);
              updatedFamiliesByType.set(nextType, family);
              family.current = nextType; // Determine whether this should be a re-render or a re-mount.

              if (canPreserveStateBetween(prevType, nextType)) {
                updatedFamilies.add(family);
              } else {
                staleFamilies.add(family);
              }
            }); // TODO: rename these fields to something more meaningful.

            const update = {
              updatedFamilies,
              // Families that will re-render preserving state
              staleFamilies, // Families that will be remounted

            };
            helpersByRendererID.forEach(helpers => {
              // Even if there are no roots, set the handler on first update.
              // This ensures that if *new* roots are mounted, they'll use the resolve handler.
              helpers.setRefreshHandler(resolveFamily);
            });
            let didError = false;
            let firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.

            const failedRootsSnapshot = cloneSet(failedRoots);
            const mountedRootsSnapshot = cloneSet(mountedRoots);
            const helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(root => {
              const helpers = helpersByRootSnapshot.get(root);

              if (helpers === undefined) {
                throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
              }

              if (!failedRoots.has(root)) { // No longer failed.
              }

              if (rootElements === null) {
                return;
              }

              if (!rootElements.has(root)) {
                return;
              }

              const element = rootElements.get(root);

              try {
                helpers.scheduleRoot(root, element);
              } catch (err) {
                if (!didError) {
                  didError = true;
                  firstError = err;
                } // Keep trying other roots.
              }
            });
            mountedRootsSnapshot.forEach(root => {
              const helpers = helpersByRootSnapshot.get(root);

              if (helpers === undefined) {
                throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
              }

              if (!mountedRoots.has(root)) { // No longer mounted.
              }

              try {
                helpers.scheduleRefresh(root, update);
              } catch (err) {
                if (!didError) {
                  didError = true;
                  firstError = err;
                } // Keep trying other roots.
              }
            });

            if (didError) {
              throw firstError;
            }

            return update;
          } finally {
            isPerformingRefresh = false;
          }
        }

        function register(type, id) {
          {
            if (type === null) {
              return;
            }

            if (typeof type !== 'function' && typeof type !== 'object') {
              return;
            } // This can happen in an edge case, e.g. if we register
            // return value of a HOC but it returns a cached component.
            // Ignore anything but the first registration for each type.

            if (allFamiliesByType.has(type)) {
              return;
            } // Create family or remember to update it.
            // None of this bookkeeping affects reconciliation
            // until the first performReactRefresh() call above.

            let family = allFamiliesByID.get(id);

            if (family === undefined) {
              family = {
                current: type,
              };
              allFamiliesByID.set(id, family);
            } else {
              pendingUpdates.push([family, type]);
            }

            allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.

            if (typeof type === 'object' && type !== null) {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  register(type.render, `${id}$render`);
                  break;

                case REACT_MEMO_TYPE:
                  register(type.type, `${id}$type`);
                  break;
              }
            }
          }
        }

        function setSignature(type, key) {
          const forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          const getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
          {
            allSignaturesByType.set(type, {
              forceReset,
              ownKey: key,
              fullKey: null,
              getCustomHooks: getCustomHooks || function () {
                return [];
              },
            });
          }
        } // This is lazily called during first render for a type.
        // It captures Hook list at that time so inline requires don't break comparisons.

        function collectCustomHooksForSignature(type) {
          {
            const signature = allSignaturesByType.get(type);

            if (signature !== undefined) {
              computeFullKey(signature);
            }
          }
        }

        function getFamilyByID(id) {
          {
            return allFamiliesByID.get(id);
          }
        }

        function getFamilyByType(type) {
          {
            return allFamiliesByType.get(type);
          }
        }

        function findAffectedHostInstances(families) {
          {
            const affectedInstances = new Set();
            mountedRoots.forEach(root => {
              const helpers = helpersByRoot.get(root);

              if (helpers === undefined) {
                throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
              }

              const instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
              instancesForRoot.forEach(inst => {
                affectedInstances.add(inst);
              });
            });
            return affectedInstances;
          }
        }

        function injectIntoGlobalHook(globalObject) {
          {
            // For React Native, the global hook will be set up by require('react-devtools-core').
            // That code will run before us. So we need to monkeypatch functions on existing hook.
            // For React Web, the global hook will be set up by the extension.
            // This will also run before us.
            let hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;

            if (hook === undefined) {
              // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
              // Note that in this case it's important that renderer code runs *after* this method call.
              // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
              let nextID = 0;
              globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject(injected) {
                  return nextID++;
                },
                onScheduleFiberRoot(id, root, children) {},
                onCommitFiberRoot(id, root, maybePriorityLevel, didError) {},
                onCommitFiberUnmount() {},
              };
            } // Here, we just want to get a reference to scheduleRefresh.

            const oldInject = hook.inject;

            hook.inject = function (injected) {
              const id = oldInject.apply(this, arguments);

              if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
                // This version supports React Refresh.
                helpersByRendererID.set(id, injected);
              }

              return id;
            }; // Do the same for any already injected roots.
            // This is useful if ReactDOM has already been initialized.
            // https://github.com/facebook/react/issues/17626

            hook.renderers.forEach((injected, id) => {
              if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
                // This version supports React Refresh.
                helpersByRendererID.set(id, injected);
              }
            }); // We also want to track currently mounted roots.

            const oldOnCommitFiberRoot = hook.onCommitFiberRoot;

            const oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function () {};

            hook.onScheduleFiberRoot = function (id, root, children) {
              if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);

                if (rootElements !== null) {
                  rootElements.set(root, children);
                }
              }

              return oldOnScheduleFiberRoot.apply(this, arguments);
            };

            hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {
              const helpers = helpersByRendererID.get(id);

              if (helpers === undefined) {
                return;
              }

              helpersByRoot.set(root, helpers);
              const { current } = root;
              const { alternate } = current; // We need to determine whether this root has just (un)mounted.
              // This logic is copy-pasted from similar logic in the DevTools backend.
              // If this breaks with some refactoring, you'll want to update DevTools too.

              if (alternate !== null) {
                const wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                const isMounted = current.memoizedState != null && current.memoizedState.element != null;

                if (!wasMounted && isMounted) {
                  // Mount a new root.
                  mountedRoots.add(root);
                  failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;else if (wasMounted && !isMounted) {
                  // Unmount an existing root.
                  mountedRoots.delete(root);

                  if (didError) {
                    // We'll remount it on future edits.
                    failedRoots.add(root);
                  } else {
                    helpersByRoot.delete(root);
                  }
                } else if (!wasMounted && !isMounted) {
                  if (didError) {
                    // We'll remount it on future edits.
                    failedRoots.add(root);
                  }
                }
              } else {
                // Mount a new root.
                mountedRoots.add(root);
              }

              return oldOnCommitFiberRoot.apply(this, arguments);
            };
          }
        }

        function hasUnrecoverableErrors() {
          // TODO: delete this after removing dependency in RN.
          return false;
        } // Exposed for testing.

        function _getMountedRootCount() {
          {
            return mountedRoots.size;
          }
        } // This is a wrapper over more primitive functions for setting signature.
        // Signatures let us decide whether the Hook order has changed on refresh.
        //
        // This function is intended to be used as a transform target, e.g.:
        // var _s = createSignatureFunctionForTransform()
        //
        // function Hello() {
        //   const [foo, setFoo] = useState(0);
        //   const value = useCustomHook();
        //   _s(); /* Second call triggers collecting the custom Hook list.
        //          * This doesn't happen during the module evaluation because we
        //          * don't want to change the module order with inline requires.
        //          * Next calls are noops. */
        //   return <h1>Hi</h1>;
        // }
        //
        // /* First call specifies the signature: */
        // _s(
        //   Hello,
        //   'useState{[foo, setFoo]}(0)',
        //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
        // );

        function createSignatureFunctionForTransform() {
          {
            // We'll fill in the signature in two steps.
            // First, we'll know the signature itself. This happens outside the component.
            // Then, we'll know the references to custom Hooks. This happens inside the component.
            // After that, the returned function will be a fast path no-op.
            let status = 'needsSignature';
            let savedType;
            let hasCustomHooks;
            return function (type, key, forceReset, getCustomHooks) {
              switch (status) {
                case 'needsSignature':
                  if (type !== undefined) {
                    // If we received an argument, this is the initial registration call.
                    savedType = type;
                    hasCustomHooks = typeof getCustomHooks === 'function';
                    setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.

                    status = 'needsCustomHooks';
                  }

                  break;

                case 'needsCustomHooks':
                  if (hasCustomHooks) {
                    collectCustomHooksForSignature(savedType);
                  }

                  status = 'resolved';
                  break;
              }

              return type;
            };
          }
        }

        function isLikelyComponentType(type) {
          {
            switch (typeof type) {
              case 'function':
              {
              // First, deal with classes.
                if (type.prototype != null) {
                  if (type.prototype.isReactComponent) {
                  // React class.
                    return true;
                  }

                  const ownNames = Object.getOwnPropertyNames(type.prototype);

                  if (ownNames.length > 1 || ownNames[0] !== 'constructor') {
                  // This looks like a class.
                    return false;
                  } // eslint-disable-next-line no-proto

                  if (type.prototype.__proto__ !== Object.prototype) {
                  // It has a superclass.
                    return false;
                  } // Pass through.
                  // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.

                const name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
              }

              case 'object':
              {
                if (type != null) {
                  switch (type.$$typeof) {
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                    // Definitely React components.
                      return true;

                    default:
                      return false;
                  }
                }

                return false;
              }

              default:
              {
                return false;
              }
            }
          }
        }

        exports._getMountedRootCount = _getMountedRootCount;
        exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
        exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
        exports.findAffectedHostInstances = findAffectedHostInstances;
        exports.getFamilyByID = getFamilyByID;
        exports.getFamilyByType = getFamilyByType;
        exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
        exports.injectIntoGlobalHook = injectIntoGlobalHook;
        exports.isLikelyComponentType = isLikelyComponentType;
        exports.performReactRefresh = performReactRefresh;
        exports.register = register;
        exports.setSignature = setSignature;
      }());
    }
    /***/ }),

  /***/ './node_modules/react-refresh/runtime.js':
  /*! ***********************************************!*\
  !*** ./node_modules/react-refresh/runtime.js ***!
  \********************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    if (false) {} else {
      module.exports = __webpack_require__(/*! ./cjs/react-refresh-runtime.development.js */ './node_modules/react-refresh/cjs/react-refresh-runtime.development.js');
    }
    /***/ }),

  /***/ './node_modules/react-router-dom/esm/react-router-dom.js':
  /*! ***************************************************************!*\
  !*** ./node_modules/react-router-dom/esm/react-router-dom.js ***!
  \************************************************************** */
  /*! exports provided: MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter, BrowserRouter, HashRouter, Link, NavLink */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'BrowserRouter', () => BrowserRouter);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'HashRouter', () => HashRouter);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'Link', () => Link);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'NavLink', () => NavLink);
    /* harmony import */ const react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-router */ './node_modules/react-router/esm/react-router.js');
    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'MemoryRouter', () => react_router__WEBPACK_IMPORTED_MODULE_0__.MemoryRouter);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'Prompt', () => react_router__WEBPACK_IMPORTED_MODULE_0__.Prompt);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'Redirect', () => react_router__WEBPACK_IMPORTED_MODULE_0__.Redirect);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'Route', () => react_router__WEBPACK_IMPORTED_MODULE_0__.Route);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'Router', () => react_router__WEBPACK_IMPORTED_MODULE_0__.Router);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'StaticRouter', () => react_router__WEBPACK_IMPORTED_MODULE_0__.StaticRouter);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'Switch', () => react_router__WEBPACK_IMPORTED_MODULE_0__.Switch);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'generatePath', () => react_router__WEBPACK_IMPORTED_MODULE_0__.generatePath);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'matchPath', () => react_router__WEBPACK_IMPORTED_MODULE_0__.matchPath);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'useHistory', () => react_router__WEBPACK_IMPORTED_MODULE_0__.useHistory);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'useLocation', () => react_router__WEBPACK_IMPORTED_MODULE_0__.useLocation);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'useParams', () => react_router__WEBPACK_IMPORTED_MODULE_0__.useParams);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'useRouteMatch', () => react_router__WEBPACK_IMPORTED_MODULE_0__.useRouteMatch);

    /* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, 'withRouter', () => react_router__WEBPACK_IMPORTED_MODULE_0__.withRouter);

    /* harmony import */ const _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ './node_modules/@babel/runtime/helpers/esm/inheritsLoose.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_2___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
    /* harmony import */ const history__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! history */ './node_modules/history/esm/history.js');
    /* harmony import */ const prop_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prop-types */ './node_modules/prop-types/index.js');
    /* harmony import */ const prop_types__WEBPACK_IMPORTED_MODULE_4___default = /* #__PURE__ */__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__);
    /* harmony import */ const tiny_warning__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tiny-warning */ './node_modules/tiny-warning/dist/tiny-warning.esm.js');
    /* harmony import */ const _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ './node_modules/@babel/runtime/helpers/esm/extends.js');
    /* harmony import */ const _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ './node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
    /* harmony import */ const tiny_invariant__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tiny-invariant */ './node_modules/tiny-invariant/dist/tiny-invariant.esm.js');

    /**
 * The public API for a <Router> that uses HTML5 history.
 */

    var BrowserRouter = /* #__PURE__ */(function (_React$Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__.default)(BrowserRouter, _React$Component);

      function BrowserRouter() {
        let _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__.createBrowserHistory)(_this.props);
        return _this;
      }

      const _proto = BrowserRouter.prototype;

      _proto.render = function render() {
        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.Router, {
          history: this.history,
          children: this.props.children,
        });
      };

      return BrowserRouter;
    }(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component));

    if (true) {
      BrowserRouter.propTypes = {
        basename: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
        children: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.node,
        forceRefresh: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
        getUserConfirmation: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
        keyLength: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.number,
      };

      BrowserRouter.prototype.componentDidMount = function () {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_5__.default)(!this.props.history, '<BrowserRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { BrowserRouter as Router }`.') : undefined;
      };
    }
    /**
 * The public API for a <Router> that uses window.location.hash.
 */

    var HashRouter = /* #__PURE__ */(function (_React$Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__.default)(HashRouter, _React$Component);

      function HashRouter() {
        let _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__.createHashHistory)(_this.props);
        return _this;
      }

      const _proto = HashRouter.prototype;

      _proto.render = function render() {
        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.Router, {
          history: this.history,
          children: this.props.children,
        });
      };

      return HashRouter;
    }(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component));

    if (true) {
      HashRouter.propTypes = {
        basename: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
        children: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.node,
        getUserConfirmation: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
        hashType: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOf(['hashbang', 'noslash', 'slash']),
      };

      HashRouter.prototype.componentDidMount = function () {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_5__.default)(!this.props.history, '<HashRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { HashRouter as Router }`.') : undefined;
      };
    }

    const resolveToLocation = function resolveToLocation(to, currentLocation) {
      return typeof to === 'function' ? to(currentLocation) : to;
    };

    const normalizeToLocation = function normalizeToLocation(to, currentLocation) {
      return typeof to === 'string' ? Object(history__WEBPACK_IMPORTED_MODULE_3__.createLocation)(to, null, null, currentLocation) : to;
    };

    const forwardRefShim = function forwardRefShim(C) {
      return C;
    };

    let { forwardRef } = react__WEBPACK_IMPORTED_MODULE_2___default.a;

    if (typeof forwardRef === 'undefined') {
      forwardRef = forwardRefShim;
    }

    function isModifiedEvent(event) {
      return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    }

    const LinkAnchor = forwardRef((_ref, forwardedRef) => {
      const { innerRef } = _ref;
      const { navigate } = _ref;
      const _onClick = _ref.onClick;
      const rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__.default)(_ref, ['innerRef', 'navigate', 'onClick']);

      const { target } = rest;

      const props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__.default)({}, rest, {
        onClick: function onClick(event) {
          try {
            if (_onClick) _onClick(event);
          } catch (ex) {
            event.preventDefault();
            throw ex;
          }

          if (!event.defaultPrevented // onClick prevented default
      && event.button === 0 && ( // ignore everything but left clicks
            !target || target === '_self') // let browser handle "target=_blank" etc.
      && !isModifiedEvent(event) // ignore clicks with modifier keys
          ) {
            event.preventDefault();
            navigate();
          }
        },
      }); // React 15 compat

      if (forwardRefShim !== forwardRef) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.ref = innerRef;
      }
      /* eslint-disable-next-line jsx-a11y/anchor-has-content */

      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement('a', props);
    });

    if (true) {
      LinkAnchor.displayName = 'LinkAnchor';
    }
    /**
 * The public API for rendering a history-aware <a>.
 */

    var Link = forwardRef((_ref2, forwardedRef) => {
      const _ref2$component = _ref2.component;
      const component = _ref2$component === void 0 ? LinkAnchor : _ref2$component;
      const { replace } = _ref2;
      const { to } = _ref2;
      const { innerRef } = _ref2;
      const rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__.default)(_ref2, ['component', 'replace', 'to', 'innerRef']);

      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.__RouterContext.Consumer, null, context => {
        !context ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_8__.default)(false, 'You should not use <Link> outside a <Router>') : undefined : void 0;
        const { history } = context;
        const location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
        const href = location ? history.createHref(location) : '';

        const props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__.default)({}, rest, {
          href,
          navigate: function navigate() {
            const location = resolveToLocation(to, context.location);
            const method = replace ? history.replace : history.push;
            method(location);
          },
        }); // React 15 compat

        if (forwardRefShim !== forwardRef) {
          props.ref = forwardedRef || innerRef;
        } else {
          props.innerRef = innerRef;
        }

        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(component, props);
      });
    });

    if (true) {
      const toType = prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func]);
      const refType = prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.shape({
        current: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.any,
      })]);
      Link.displayName = 'Link';
      Link.propTypes = {
        innerRef: refType,
        onClick: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
        replace: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
        target: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
        to: toType.isRequired,
      };
    }

    const forwardRefShim$1 = function forwardRefShim(C) {
      return C;
    };

    let forwardRef$1 = react__WEBPACK_IMPORTED_MODULE_2___default.a.forwardRef;

    if (typeof forwardRef$1 === 'undefined') {
      forwardRef$1 = forwardRefShim$1;
    }

    function joinClassnames() {
      for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
        classnames[_key] = arguments[_key];
      }

      return classnames.filter(i => i).join(' ');
    }
    /**
 * A <Link> wrapper that knows if it's "active" or not.
 */

    var NavLink = forwardRef$1((_ref, forwardedRef) => {
      const _ref$ariaCurrent = _ref['aria-current'];
      const ariaCurrent = _ref$ariaCurrent === void 0 ? 'page' : _ref$ariaCurrent;
      const _ref$activeClassName = _ref.activeClassName;
      const activeClassName = _ref$activeClassName === void 0 ? 'active' : _ref$activeClassName;
      const { activeStyle } = _ref;
      const classNameProp = _ref.className;
      const { exact } = _ref;
      const isActiveProp = _ref.isActive;
      const locationProp = _ref.location;
      const { sensitive } = _ref;
      const { strict } = _ref;
      const styleProp = _ref.style;
      const { to } = _ref;
      const { innerRef } = _ref;
      const rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__.default)(_ref, ['aria-current', 'activeClassName', 'activeStyle', 'className', 'exact', 'isActive', 'location', 'sensitive', 'strict', 'style', 'to', 'innerRef']);

      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.__RouterContext.Consumer, null, context => {
        !context ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_8__.default)(false, 'You should not use <NavLink> outside a <Router>') : undefined : void 0;
        const currentLocation = locationProp || context.location;
        const toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
        const path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

        const escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
        const match = escapedPath ? Object(react_router__WEBPACK_IMPORTED_MODULE_0__.matchPath)(currentLocation.pathname, {
          path: escapedPath,
          exact,
          sensitive,
          strict,
        }) : null;
        const isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
        const className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
        const style = isActive ? Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__.default)({}, styleProp, {}, activeStyle) : styleProp;

        const props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__.default)({
          'aria-current': isActive && ariaCurrent || null,
          className,
          style,
          to: toLocation,
        }, rest); // React 15 compat

        if (forwardRefShim$1 !== forwardRef$1) {
          props.ref = forwardedRef || innerRef;
        } else {
          props.innerRef = innerRef;
        }

        return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Link, props);
      });
    });

    if (true) {
      NavLink.displayName = 'NavLink';
      const ariaCurrentType = prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOf(['page', 'step', 'location', 'date', 'time', 'true']);
      NavLink.propTypes = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__.default)({}, Link.propTypes, {
        'aria-current': ariaCurrentType,
        activeClassName: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
        activeStyle: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object,
        className: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
        exact: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
        isActive: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
        location: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object,
        sensitive: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
        strict: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
        style: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object,
      });
    }
    /***/ }),

  /***/ './node_modules/react-router/esm/react-router.js':
  /*! *******************************************************!*\
  !*** ./node_modules/react-router/esm/react-router.js ***!
  \****************************************************** */
  /*! exports provided: MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, __HistoryContext, __RouterContext, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'MemoryRouter', () => MemoryRouter);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'Prompt', () => Prompt);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'Redirect', () => Redirect);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'Route', () => Route);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'Router', () => Router);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'StaticRouter', () => StaticRouter);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'Switch', () => Switch);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__HistoryContext', () => historyContext);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__RouterContext', () => context);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'generatePath', () => generatePath);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'matchPath', () => matchPath);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useHistory', () => useHistory);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useLocation', () => useLocation);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useParams', () => useParams);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'useRouteMatch', () => useRouteMatch);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'withRouter', () => withRouter);
    /* harmony import */ const _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ './node_modules/@babel/runtime/helpers/esm/inheritsLoose.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ './node_modules/react/index.js');
    /* harmony import */ const react__WEBPACK_IMPORTED_MODULE_1___default = /* #__PURE__ */__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
    /* harmony import */ const prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ './node_modules/prop-types/index.js');
    /* harmony import */ const prop_types__WEBPACK_IMPORTED_MODULE_2___default = /* #__PURE__ */__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
    /* harmony import */ const history__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! history */ './node_modules/history/esm/history.js');
    /* harmony import */ const tiny_warning__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tiny-warning */ './node_modules/tiny-warning/dist/tiny-warning.esm.js');
    /* harmony import */ const mini_create_react_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! mini-create-react-context */ './node_modules/mini-create-react-context/dist/esm/index.js');
    /* harmony import */ const tiny_invariant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tiny-invariant */ './node_modules/tiny-invariant/dist/tiny-invariant.esm.js');
    /* harmony import */ const _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ './node_modules/@babel/runtime/helpers/esm/extends.js');
    /* harmony import */ const path_to_regexp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! path-to-regexp */ './node_modules/react-router/node_modules/path-to-regexp/index.js');
    /* harmony import */ const path_to_regexp__WEBPACK_IMPORTED_MODULE_8___default = /* #__PURE__ */__webpack_require__.n(path_to_regexp__WEBPACK_IMPORTED_MODULE_8__);
    /* harmony import */ const react_is__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-is */ './node_modules/react-is/index.js');
    /* harmony import */ const react_is__WEBPACK_IMPORTED_MODULE_9___default = /* #__PURE__ */__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_9__);
    /* harmony import */ const _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ './node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
    /* harmony import */ const hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! hoist-non-react-statics */ './node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js');
    /* harmony import */ const hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_11___default = /* #__PURE__ */__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_11__);

    // TODO: Replace with React.createContext once we can assume React 16+

    const createNamedContext = function createNamedContext(name) {
      const context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_5__.default)();
      context.displayName = name;
      return context;
    };

    var historyContext = /* #__PURE__ */createNamedContext('Router-History'); // TODO: Replace with React.createContext once we can assume React 16+

    const createNamedContext$1 = function createNamedContext(name) {
      const context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_5__.default)();
      context.displayName = name;
      return context;
    };

    var context = /* #__PURE__ */createNamedContext$1('Router');
    /**
 * The public API for putting history on context.
 */

    var Router = /* #__PURE__ */(function (_React$Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(Router, _React$Component);

      Router.computeRootMatch = function computeRootMatch(pathname) {
        return {
          path: '/',
          url: '/',
          params: {},
          isExact: pathname === '/',
        };
      };

      function Router(props) {
        let _this;

        _this = _React$Component.call(this, props) || this;
        _this.state = {
          location: props.history.location,
        }; // This is a bit of a hack. We have to start listening for location
        // changes here in the constructor in case there are any <Redirect>s
        // on the initial render. If there are, they will replace/push when
        // they mount and since cDM fires in children before parents, we may
        // get a new location before the <Router> is mounted.

        _this._isMounted = false;
        _this._pendingLocation = null;

        if (!props.staticContext) {
          _this.unlisten = props.history.listen(location => {
            if (_this._isMounted) {
              _this.setState({
                location,
              });
            } else {
              _this._pendingLocation = location;
            }
          });
        }

        return _this;
      }

      const _proto = Router.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this._isMounted = true;

        if (this._pendingLocation) {
          this.setState({
            location: this._pendingLocation,
          });
        }
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.unlisten) this.unlisten();
      };

      _proto.render = function render() {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Provider, {
          value: {
            history: this.props.history,
            location: this.state.location,
            match: Router.computeRootMatch(this.state.location.pathname),
            staticContext: this.props.staticContext,
          },
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(historyContext.Provider, {
          children: this.props.children || null,
          value: this.props.history,
        }));
      };

      return Router;
    }(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));

    if (true) {
      Router.propTypes = {
        children: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.node,
        history: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object.isRequired,
        staticContext: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
      };

      Router.prototype.componentDidUpdate = function (prevProps) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(prevProps.history === this.props.history, 'You cannot change <Router history>') : undefined;
      };
    }
    /**
 * The public API for a <Router> that stores location in memory.
 */

    var MemoryRouter = /* #__PURE__ */(function (_React$Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(MemoryRouter, _React$Component);

      function MemoryRouter() {
        let _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__.createMemoryHistory)(_this.props);
        return _this;
      }

      const _proto = MemoryRouter.prototype;

      _proto.render = function render() {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Router, {
          history: this.history,
          children: this.props.children,
        });
      };

      return MemoryRouter;
    }(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));

    if (true) {
      MemoryRouter.propTypes = {
        initialEntries: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array,
        initialIndex: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number,
        getUserConfirmation: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
        keyLength: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.number,
        children: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.node,
      };

      MemoryRouter.prototype.componentDidMount = function () {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!this.props.history, '<MemoryRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { MemoryRouter as Router }`.') : undefined;
      };
    }

    const Lifecycle = /* #__PURE__ */(function (_React$Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(Lifecycle, _React$Component);

      function Lifecycle() {
        return _React$Component.apply(this, arguments) || this;
      }

      const _proto = Lifecycle.prototype;

      _proto.componentDidMount = function componentDidMount() {
        if (this.props.onMount) this.props.onMount.call(this, this);
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.props.onUnmount) this.props.onUnmount.call(this, this);
      };

      _proto.render = function render() {
        return null;
      };

      return Lifecycle;
    }(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));
    /**
 * The public API for prompting the user before navigating away from a screen.
 */

    function Prompt(_ref) {
      const { message } = _ref;
      const _ref$when = _ref.when;
      const when = _ref$when === void 0 ? true : _ref$when;
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, context => {
        !context ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You should not use <Prompt> outside a <Router>') : undefined : void 0;
        if (!when || context.staticContext) return null;
        const method = context.history.block;
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Lifecycle, {
          onMount: function onMount(self) {
            self.release = method(message);
          },
          onUpdate: function onUpdate(self, prevProps) {
            if (prevProps.message !== message) {
              self.release();
              self.release = method(message);
            }
          },
          onUnmount: function onUnmount(self) {
            self.release();
          },
          message,
        });
      });
    }

    if (true) {
      const messageType = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string]);
      Prompt.propTypes = {
        when: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
        message: messageType.isRequired,
      };
    }

    const cache = {};
    const cacheLimit = 10000;
    let cacheCount = 0;

    function compilePath(path) {
      if (cache[path]) return cache[path];
      const generator = path_to_regexp__WEBPACK_IMPORTED_MODULE_8___default.a.compile(path);

      if (cacheCount < cacheLimit) {
        cache[path] = generator;
        cacheCount++;
      }

      return generator;
    }
    /**
 * Public API for generating a URL pathname from a path and parameters.
 */

    function generatePath(path, params) {
      if (path === void 0) {
        path = '/';
      }

      if (params === void 0) {
        params = {};
      }

      return path === '/' ? path : compilePath(path)(params, {
        pretty: true,
      });
    }
    /**
 * The public API for navigating programmatically with a component.
 */

    function Redirect(_ref) {
      const { computedMatch } = _ref;
      const { to } = _ref;
      const _ref$push = _ref.push;
      const push = _ref$push === void 0 ? false : _ref$push;
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, context => {
        !context ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You should not use <Redirect> outside a <Router>') : undefined : void 0;
        const { history } = context;
        const { staticContext } = context;
        const method = push ? history.push : history.replace;
        const location = Object(history__WEBPACK_IMPORTED_MODULE_3__.createLocation)(computedMatch ? typeof to === 'string' ? generatePath(to, computedMatch.params) : Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__.default)({}, to, {
          pathname: generatePath(to.pathname, computedMatch.params),
        }) : to); // When rendering in a static context,
        // set the new location immediately.

        if (staticContext) {
          method(location);
          return null;
        }

        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Lifecycle, {
          onMount: function onMount() {
            method(location);
          },
          onUpdate: function onUpdate(self, prevProps) {
            const prevLocation = Object(history__WEBPACK_IMPORTED_MODULE_3__.createLocation)(prevProps.to);

            if (!Object(history__WEBPACK_IMPORTED_MODULE_3__.locationsAreEqual)(prevLocation, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__.default)({}, location, {
              key: prevLocation.key,
            }))) {
              method(location);
            }
          },
          to,
        });
      });
    }

    if (true) {
      Redirect.propTypes = {
        push: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
        from: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
        to: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object]).isRequired,
      };
    }

    const cache$1 = {};
    const cacheLimit$1 = 10000;
    let cacheCount$1 = 0;

    function compilePath$1(path, options) {
      const cacheKey = `${options.end}${options.strict}${options.sensitive}`;
      const pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
      if (pathCache[path]) return pathCache[path];
      const keys = [];
      const regexp = path_to_regexp__WEBPACK_IMPORTED_MODULE_8___default()(path, keys, options);
      const result = {
        regexp,
        keys,
      };

      if (cacheCount$1 < cacheLimit$1) {
        pathCache[path] = result;
        cacheCount$1++;
      }

      return result;
    }
    /**
 * Public API for matching a URL pathname to a path.
 */

    function matchPath(pathname, options) {
      if (options === void 0) {
        options = {};
      }

      if (typeof options === 'string' || Array.isArray(options)) {
        options = {
          path: options,
        };
      }

      const _options = options;
      const { path } = _options;
      const _options$exact = _options.exact;
      const exact = _options$exact === void 0 ? false : _options$exact;
      const _options$strict = _options.strict;
      const strict = _options$strict === void 0 ? false : _options$strict;
      const _options$sensitive = _options.sensitive;
      const sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
      const paths = [].concat(path);
      return paths.reduce((matched, path) => {
        if (!path && path !== '') return null;
        if (matched) return matched;

        const _compilePath = compilePath$1(path, {
          end: exact,
          strict,
          sensitive,
        });
        const { regexp } = _compilePath;
        const { keys } = _compilePath;

        const match = regexp.exec(pathname);
        if (!match) return null;
        const url = match[0];
        const values = match.slice(1);
        const isExact = pathname === url;
        if (exact && !isExact) return null;
        return {
          path,
          // the path used to match
          url: path === '/' && url === '' ? '/' : url,
          // the matched portion of the URL
          isExact,
          // whether or not we matched exactly
          params: keys.reduce((memo, key, index) => {
            memo[key.name] = values[index];
            return memo;
          }, {}),
        };
      }, null);
    }

    function isEmptyChildren(children) {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.count(children) === 0;
    }

    function evalChildrenDev(children, props, path) {
      const value = children(props);
      true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(value !== undefined, 'You returned `undefined` from the `children` function of ' + `<Route${path ? ` path="${path}"` : ''}>, but you ` + 'should have returned a React element or `null`') : undefined;
      return value || null;
    }
    /**
 * The public API for matching a single path and rendering.
 */

    var Route = /* #__PURE__ */(function (_React$Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(Route, _React$Component);

      function Route() {
        return _React$Component.apply(this, arguments) || this;
      }

      const _proto = Route.prototype;

      _proto.render = function render() {
        const _this = this;

        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, context$1 => {
          !context$1 ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You should not use <Route> outside a <Router>') : undefined : void 0;
          const location = _this.props.location || context$1.location;
          const match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
            : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;

          const props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__.default)({}, context$1, {
            location,
            match,
          });

          const _this$props = _this.props;
          let { children } = _this$props;
          const { component } = _this$props;
          const { render } = _this$props; // Preact uses an empty array as children by
          // default, so use null if that's the case.

          if (Array.isArray(children) && children.length === 0) {
            children = null;
          }

          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Provider, {
            value: props,
          }, props.match ? children ? typeof children === 'function' ? true ? evalChildrenDev(children, props, _this.props.path) : undefined : children : component ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(component, props) : render ? render(props) : null : typeof children === 'function' ? true ? evalChildrenDev(children, props, _this.props.path) : undefined : null);
        });
      };

      return Route;
    }(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));

    if (true) {
      Route.propTypes = {
        children: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.node]),
        component: function component(props, propName) {
          if (props[propName] && !Object(react_is__WEBPACK_IMPORTED_MODULE_9__.isValidElementType)(props[propName])) {
            return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
          }
        },
        exact: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
        location: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
        path: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string)]),
        render: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
        sensitive: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
        strict: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.bool,
      };

      Route.prototype.componentDidMount = function () {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), 'You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored') : undefined;
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), 'You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored') : undefined;
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!(this.props.component && this.props.render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored') : undefined;
      };

      Route.prototype.componentDidUpdate = function (prevProps) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : undefined;
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : undefined;
      };
    }

    function addLeadingSlash(path) {
      return path.charAt(0) === '/' ? path : `/${path}`;
    }

    function addBasename(basename, location) {
      if (!basename) return location;
      return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__.default)({}, location, {
        pathname: addLeadingSlash(basename) + location.pathname,
      });
    }

    function stripBasename(basename, location) {
      if (!basename) return location;
      const base = addLeadingSlash(basename);
      if (location.pathname.indexOf(base) !== 0) return location;
      return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__.default)({}, location, {
        pathname: location.pathname.substr(base.length),
      });
    }

    function createURL(location) {
      return typeof location === 'string' ? location : Object(history__WEBPACK_IMPORTED_MODULE_3__.createPath)(location);
    }

    function staticHandler(methodName) {
      return function () {
        true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You cannot %s with <StaticRouter>', methodName) : undefined;
      };
    }

    function noop() {}
    /**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

    var StaticRouter = /* #__PURE__ */(function (_React$Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(StaticRouter, _React$Component);

      function StaticRouter() {
        let _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

        _this.handlePush = function (location) {
          return _this.navigateTo(location, 'PUSH');
        };

        _this.handleReplace = function (location) {
          return _this.navigateTo(location, 'REPLACE');
        };

        _this.handleListen = function () {
          return noop;
        };

        _this.handleBlock = function () {
          return noop;
        };

        return _this;
      }

      const _proto = StaticRouter.prototype;

      _proto.navigateTo = function navigateTo(location, action) {
        const _this$props = this.props;
        const _this$props$basename = _this$props.basename;
        const basename = _this$props$basename === void 0 ? '' : _this$props$basename;
        const _this$props$context = _this$props.context;
        const context = _this$props$context === void 0 ? {} : _this$props$context;
        context.action = action;
        context.location = addBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_3__.createLocation)(location));
        context.url = createURL(context.location);
      };

      _proto.render = function render() {
        const _this$props2 = this.props;
        const _this$props2$basename = _this$props2.basename;
        const basename = _this$props2$basename === void 0 ? '' : _this$props2$basename;
        const _this$props2$context = _this$props2.context;
        const context = _this$props2$context === void 0 ? {} : _this$props2$context;
        const _this$props2$location = _this$props2.location;
        const location = _this$props2$location === void 0 ? '/' : _this$props2$location;
        const rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__.default)(_this$props2, ['basename', 'context', 'location']);

        const history = {
          createHref: function createHref(path) {
            return addLeadingSlash(basename + createURL(path));
          },
          action: 'POP',
          location: stripBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_3__.createLocation)(location)),
          push: this.handlePush,
          replace: this.handleReplace,
          go: staticHandler('go'),
          goBack: staticHandler('goBack'),
          goForward: staticHandler('goForward'),
          listen: this.handleListen,
          block: this.handleBlock,
        };
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Router, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__.default)({}, rest, {
          history,
          staticContext: context,
        }));
      };

      return StaticRouter;
    }(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));

    if (true) {
      StaticRouter.propTypes = {
        basename: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
        context: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
        location: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object]),
      };

      StaticRouter.prototype.componentDidMount = function () {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!this.props.history, '<StaticRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { StaticRouter as Router }`.') : undefined;
      };
    }
    /**
 * The public API for rendering the first <Route> that matches.
 */

    var Switch = /* #__PURE__ */(function (_React$Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(Switch, _React$Component);

      function Switch() {
        return _React$Component.apply(this, arguments) || this;
      }

      const _proto = Switch.prototype;

      _proto.render = function render() {
        const _this = this;

        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, context => {
          !context ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You should not use <Switch> outside a <Router>') : undefined : void 0;
          const location = _this.props.location || context.location;
          let element; let
            match; // We use React.Children.forEach instead of React.Children.toArray().find()
          // here because toArray adds keys to all child elements and we do not want
          // to trigger an unmount/remount for two <Route>s that render the same
          // component at different URLs.

          react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.forEach(_this.props.children, child => {
            if (match == null && react__WEBPACK_IMPORTED_MODULE_1___default.a.isValidElement(child)) {
              element = child;
              const path = child.props.path || child.props.from;
              match = path ? matchPath(location.pathname, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__.default)({}, child.props, {
                path,
              })) : context.match;
            }
          });
          return match ? react__WEBPACK_IMPORTED_MODULE_1___default.a.cloneElement(element, {
            location,
            computedMatch: match,
          }) : null;
        });
      };

      return Switch;
    }(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));

    if (true) {
      Switch.propTypes = {
        children: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.node,
        location: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
      };

      Switch.prototype.componentDidUpdate = function (prevProps) {
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : undefined;
        true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__.default)(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : undefined;
      };
    }
    /**
 * A public higher-order component to access the imperative API
 */

    function withRouter(Component) {
      const displayName = `withRouter(${Component.displayName || Component.name})`;

      const C = function C(props) {
        const { wrappedComponentRef } = props;
        const remainingProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__.default)(props, ['wrappedComponentRef']);

        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(context.Consumer, null, context => {
          !context ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, `You should not use <${displayName} /> outside a <Router>`) : undefined : void 0;
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Component, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_7__.default)({}, remainingProps, context, {
            ref: wrappedComponentRef,
          }));
        });
      };

      C.displayName = displayName;
      C.WrappedComponent = Component;

      if (true) {
        C.propTypes = {
          wrappedComponentRef: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func, prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object]),
        };
      }

      return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_11___default()(C, Component);
    }

    const { useContext } = react__WEBPACK_IMPORTED_MODULE_1___default.a;

    function useHistory() {
      if (true) {
        !(typeof useContext === 'function') ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You must use React >= 16.8 in order to use useHistory()') : undefined : void 0;
      }

      return useContext(historyContext);
    }

    function useLocation() {
      if (true) {
        !(typeof useContext === 'function') ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You must use React >= 16.8 in order to use useLocation()') : undefined : void 0;
      }

      return useContext(context).location;
    }

    function useParams() {
      if (true) {
        !(typeof useContext === 'function') ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You must use React >= 16.8 in order to use useParams()') : undefined : void 0;
      }

      const { match } = useContext(context);
      return match ? match.params : {};
    }

    function useRouteMatch(path) {
      if (true) {
        !(typeof useContext === 'function') ? true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__.default)(false, 'You must use React >= 16.8 in order to use useRouteMatch()') : undefined : void 0;
      }

      const location = useLocation();
      const { match } = useContext(context);
      return path ? matchPath(location.pathname, path) : match;
    }

    if (true) {
      if (typeof window !== 'undefined') {
        const global = window;
        const key = '__react_router_build__';
        const buildNames = {
          cjs: 'CommonJS',
          esm: 'ES modules',
          umd: 'UMD',
        };

        if (global[key] && global[key] !== 'esm') {
          const initialBuildName = buildNames[global[key]];
          const secondaryBuildName = buildNames.esm; // TODO: Add link to article that explains in detail how to avoid
          // loading 2 different builds.

          throw new Error(`You are loading the ${secondaryBuildName} build of React Router ` + `on a page that is already running the ${initialBuildName} ` + 'build, so things won\'t work right.');
        }

        global[key] = 'esm';
      }
    }
    /***/ }),

  /***/ './node_modules/react-router/node_modules/isarray/index.js':
  /*! *****************************************************************!*\
  !*** ./node_modules/react-router/node_modules/isarray/index.js ***!
  \**************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports) {
    module.exports = Array.isArray || function (arr) {
      return Object.prototype.toString.call(arr) == '[object Array]';
    };
    /***/ }),

  /***/ './node_modules/react-router/node_modules/path-to-regexp/index.js':
  /*! ************************************************************************!*\
  !*** ./node_modules/react-router/node_modules/path-to-regexp/index.js ***!
  \*********************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const isarray = __webpack_require__(/*! isarray */ './node_modules/react-router/node_modules/isarray/index.js');
    /**
 * Expose `pathToRegexp`.
 */

    module.exports = pathToRegexp;
    module.exports.parse = parse;
    module.exports.compile = compile;
    module.exports.tokensToFunction = tokensToFunction;
    module.exports.tokensToRegExp = tokensToRegExp;
    /**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

    const PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      '(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
      // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
      // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
      '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
    /**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

    function parse(str, options) {
      const tokens = [];
      let key = 0;
      let index = 0;
      let path = '';
      const defaultDelimiter = options && options.delimiter || '/';
      let res;

      while ((res = PATH_REGEXP.exec(str)) != null) {
        const m = res[0];
        const escaped = res[1];
        const offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length; // Ignore already escaped sequences.

        if (escaped) {
          path += escaped[1];
          continue;
        }

        const next = str[index];
        const prefix = res[2];
        const name = res[3];
        const capture = res[4];
        const group = res[5];
        const modifier = res[6];
        const asterisk = res[7]; // Push the current path onto the tokens.

        if (path) {
          tokens.push(path);
          path = '';
        }

        const partial = prefix != null && next != null && next !== prefix;
        const repeat = modifier === '+' || modifier === '*';
        const optional = modifier === '?' || modifier === '*';
        const delimiter = res[2] || defaultDelimiter;
        const pattern = capture || group;
        tokens.push({
          name: name || key++,
          prefix: prefix || '',
          delimiter,
          optional,
          repeat,
          partial,
          asterisk: !!asterisk,
          pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : `[^${escapeString(delimiter)}]+?`,
        });
      } // Match any characters still remaining.

      if (index < str.length) {
        path += str.substr(index);
      } // If the path exists, push it onto the end.

      if (path) {
        tokens.push(path);
      }

      return tokens;
    }
    /**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

    function compile(str, options) {
      return tokensToFunction(parse(str, options), options);
    }
    /**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

    function encodeURIComponentPretty(str) {
      return encodeURI(str).replace(/[\/?#]/g, c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    }
    /**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

    function encodeAsterisk(str) {
      return encodeURI(str).replace(/[?#]/g, c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    }
    /**
 * Expose a method for transforming tokens into the path function.
 */

    function tokensToFunction(tokens, options) {
      // Compile all the tokens into regexps.
      const matches = new Array(tokens.length); // Compile all the patterns before compilation.

      for (let i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
          matches[i] = new RegExp(`^(?:${tokens[i].pattern})$`, flags(options));
        }
      }

      return function (obj, opts) {
        let path = '';
        const data = obj || {};
        const options = opts || {};
        const encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

        for (let i = 0; i < tokens.length; i++) {
          const token = tokens[i];

          if (typeof token === 'string') {
            path += token;
            continue;
          }

          const value = data[token.name];
          var segment;

          if (value == null) {
            if (token.optional) {
              // Prepend partial segment prefixes.
              if (token.partial) {
                path += token.prefix;
              }

              continue;
            } else {
              throw new TypeError(`Expected "${token.name}" to be defined`);
            }
          }

          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError(`Expected "${token.name}" to not repeat, but received \`${JSON.stringify(value)}\``);
            }

            if (value.length === 0) {
              if (token.optional) {
                continue;
              } else {
                throw new TypeError(`Expected "${token.name}" to not be empty`);
              }
            }

            for (let j = 0; j < value.length; j++) {
              segment = encode(value[j]);

              if (!matches[i].test(segment)) {
                throw new TypeError(`Expected all "${token.name}" to match "${token.pattern}", but received \`${JSON.stringify(segment)}\``);
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue;
          }

          segment = token.asterisk ? encodeAsterisk(value) : encode(value);

          if (!matches[i].test(segment)) {
            throw new TypeError(`Expected "${token.name}" to match "${token.pattern}", but received "${segment}"`);
          }

          path += token.prefix + segment;
        }

        return path;
      };
    }
    /**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

    function escapeString(str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
    }
    /**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

    function escapeGroup(group) {
      return group.replace(/([=!:$\/()])/g, '\\$1');
    }
    /**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

    function attachKeys(re, keys) {
      re.keys = keys;
      return re;
    }
    /**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

    function flags(options) {
      return options && options.sensitive ? '' : 'i';
    }
    /**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

    function regexpToRegexp(path, keys) {
      // Use a negative lookahead to match only capturing groups.
      const groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (let i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            asterisk: false,
            pattern: null,
          });
        }
      }

      return attachKeys(path, keys);
    }
    /**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

    function arrayToRegexp(path, keys, options) {
      const parts = [];

      for (let i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
      }

      const regexp = new RegExp(`(?:${parts.join('|')})`, flags(options));
      return attachKeys(regexp, keys);
    }
    /**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

    function stringToRegexp(path, keys, options) {
      return tokensToRegExp(parse(path, options), keys, options);
    }
    /**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

    function tokensToRegExp(tokens, keys, options) {
      if (!isarray(keys)) {
        options =
    /** @type {!Object} */
    keys || options;
        keys = [];
      }

      options = options || {};
      const { strict } = options;
      const end = options.end !== false;
      let route = ''; // Iterate over the tokens and create our regexp string.

      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString(token);
        } else {
          const prefix = escapeString(token.prefix);
          let capture = `(?:${token.pattern})`;
          keys.push(token);

          if (token.repeat) {
            capture += `(?:${prefix}${capture})*`;
          }

          if (token.optional) {
            if (!token.partial) {
              capture = `(?:${prefix}(${capture}))?`;
            } else {
              capture = `${prefix}(${capture})?`;
            }
          } else {
            capture = `${prefix}(${capture})`;
          }

          route += capture;
        }
      }

      const delimiter = escapeString(options.delimiter || '/');
      const endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
      // match already ends with a slash, we remove it for consistency. The slash
      // is valid at the end of a path match, not in the middle. This is important
      // in non-ending mode, where "/test/" shouldn't match "/test//route".

      if (!strict) {
        route = `${endsWithDelimiter ? route.slice(0, -delimiter.length) : route}(?:${delimiter}(?=$))?`;
      }

      if (end) {
        route += '$';
      } else {
        // In non-ending mode, we need the capturing groups to match as much as
        // possible by using a positive lookahead to the end or next path segment.
        route += strict && endsWithDelimiter ? '' : `(?=${delimiter}|$)`;
      }

      return attachKeys(new RegExp(`^${route}`, flags(options)), keys);
    }
    /**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

    function pathToRegexp(path, keys, options) {
      if (!isarray(keys)) {
        options =
    /** @type {!Object} */
    keys || options;
        keys = [];
      }

      options = options || {};

      if (path instanceof RegExp) {
        return regexpToRegexp(path,
          /** @type {!Array} */
          keys);
      }

      if (isarray(path)) {
        return arrayToRegexp(
          /** @type {!Array} */
          path,
          /** @type {!Array} */
          keys, options,
        );
      }

      return stringToRegexp(
        /** @type {string} */
        path,
        /** @type {!Array} */
        keys, options,
      );
    }
    /***/ }),

  /***/ './node_modules/react/cjs/react-jsx-dev-runtime.development.js':
  /*! *********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \******************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /** @license React v17.0.1
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    if (true) {
      (function () {
        const React = __webpack_require__(/*! react */ './node_modules/react/index.js');

        const _assign = __webpack_require__(/*! object-assign */ './node_modules/object-assign/index.js'); // ATTENTION
        // When adding new symbols to this file,
        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.

        let REACT_ELEMENT_TYPE = 0xeac7;
        let REACT_PORTAL_TYPE = 0xeaca;
        exports.Fragment = 0xeacb;
        let REACT_STRICT_MODE_TYPE = 0xeacc;
        let REACT_PROFILER_TYPE = 0xead2;
        let REACT_PROVIDER_TYPE = 0xeacd;
        let REACT_CONTEXT_TYPE = 0xeace;
        let REACT_FORWARD_REF_TYPE = 0xead0;
        let REACT_SUSPENSE_TYPE = 0xead1;
        let REACT_SUSPENSE_LIST_TYPE = 0xead8;
        let REACT_MEMO_TYPE = 0xead3;
        let REACT_LAZY_TYPE = 0xead4;
        let REACT_BLOCK_TYPE = 0xead9;
        let REACT_SERVER_BLOCK_TYPE = 0xeada;
        let REACT_FUNDAMENTAL_TYPE = 0xead5;
        let REACT_SCOPE_TYPE = 0xead7;
        let REACT_OPAQUE_ID_TYPE = 0xeae0;
        let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
        let REACT_OFFSCREEN_TYPE = 0xeae2;
        let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

        if (typeof Symbol === 'function' && Symbol.for) {
          const symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor('react.element');
          REACT_PORTAL_TYPE = symbolFor('react.portal');
          exports.Fragment = symbolFor('react.fragment');
          REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
          REACT_PROFILER_TYPE = symbolFor('react.profiler');
          REACT_PROVIDER_TYPE = symbolFor('react.provider');
          REACT_CONTEXT_TYPE = symbolFor('react.context');
          REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
          REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
          REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
          REACT_MEMO_TYPE = symbolFor('react.memo');
          REACT_LAZY_TYPE = symbolFor('react.lazy');
          REACT_BLOCK_TYPE = symbolFor('react.block');
          REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
          REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
          REACT_SCOPE_TYPE = symbolFor('react.scope');
          REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
          REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
          REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
        }

        const MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        const FAUX_ITERATOR_SYMBOL = '@@iterator';

        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== 'object') {
            return null;
          }

          const maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

          if (typeof maybeIterator === 'function') {
            return maybeIterator;
          }

          return null;
        }

        const ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            printWarning('error', format, args);
          }
        }

        function printWarning(level, format, args) {
          // When changing this logic, you might want to also
          // update consoleWithStackDev.www.js as well.
          {
            const { ReactDebugCurrentFrame } = ReactSharedInternals;
            const stack = ReactDebugCurrentFrame.getStackAddendum();

            if (stack !== '') {
              format += '%s';
              args = args.concat([stack]);
            }

            const argsWithFormat = args.map(item => `${item}`); // Careful: RN currently depends on this prefix

            argsWithFormat.unshift(`Warning: ${format}`); // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging

            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        } // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

        const enableScopeAPI = false; // Experimental Create Event Handle API.

        function isValidElementType(type) {
          if (typeof type === 'string' || typeof type === 'function') {
            return true;
          } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

          if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }

          if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }

          return false;
        }

        function getWrappedName(outerType, innerType, wrapperName) {
          const functionName = innerType.displayName || innerType.name || '';
          return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
        }

        function getContextName(type) {
          return type.displayName || 'Context';
        }

        function getComponentName(type) {
          if (type == null) {
            // Host root, text node or just invalid type.
            return null;
          }

          {
            if (typeof type.tag === 'number') {
              error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
            }
          }

          if (typeof type === 'function') {
            return type.displayName || type.name || null;
          }

          if (typeof type === 'string') {
            return type;
          }

          switch (type) {
            case exports.Fragment:
              return 'Fragment';

            case REACT_PORTAL_TYPE:
              return 'Portal';

            case REACT_PROFILER_TYPE:
              return 'Profiler';

            case REACT_STRICT_MODE_TYPE:
              return 'StrictMode';

            case REACT_SUSPENSE_TYPE:
              return 'Suspense';

            case REACT_SUSPENSE_LIST_TYPE:
              return 'SuspenseList';
          }

          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return `${getContextName(context)}.Consumer`;

              case REACT_PROVIDER_TYPE:
                var provider = type;
                return `${getContextName(provider._context)}.Provider`;

              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');

              case REACT_MEMO_TYPE:
                return getComponentName(type.type);

              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);

              case REACT_LAZY_TYPE:
              {
                const lazyComponent = type;
                const payload = lazyComponent._payload;
                const init = lazyComponent._init;

                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }

          return null;
        } // Helpers to patch console.logs to avoid logging during side-effect free
        // replaying on render function. This currently only patches the object
        // lazily which won't cover if the log function was extracted eagerly.
        // We could also eagerly patch the method.

        let disabledDepth = 0;
        let prevLog;
        let prevInfo;
        let prevWarn;
        let prevError;
        let prevGroup;
        let prevGroupCollapsed;
        let prevGroupEnd;

        function disabledLog() {}

        disabledLog.__reactDisabledLog = true;

        function disableLogs() {
          {
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

              const props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              });
              /* eslint-enable react-internal/no-production-logging */
            }

            disabledDepth++;
          }
        }

        function reenableLogs() {
          {
            disabledDepth--;

            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              const props = {
                configurable: true,
                enumerable: true,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog,
                }),
                info: _assign({}, props, {
                  value: prevInfo,
                }),
                warn: _assign({}, props, {
                  value: prevWarn,
                }),
                error: _assign({}, props, {
                  value: prevError,
                }),
                group: _assign({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd,
                }),
              });
              /* eslint-enable react-internal/no-production-logging */
            }

            if (disabledDepth < 0) {
              error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
            }
          }
        }

        const { ReactCurrentDispatcher } = ReactSharedInternals;
        let prefix;

        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === undefined) {
              // Extract the VM specific prefix used by each line.
              try {
                throw Error();
              } catch (x) {
                const match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || '';
              }
            } // We use the prefix to ensure our stacks line up with native stack frames.

            return `\n${prefix}${name}`;
          }
        }

        let reentry = false;
        let componentFrameCache;
        {
          const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }

        function describeNativeComponentFrame(fn, construct) {
          // If something asked for a stack inside a fake render, it should get ignored.
          if (!fn || reentry) {
            return '';
          }

          {
            const frame = componentFrameCache.get(fn);

            if (frame !== undefined) {
              return frame;
            }
          }
          let control;
          reentry = true;
          const previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

          Error.prepareStackTrace = undefined;
          let previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
            // for warnings.

            ReactCurrentDispatcher.current = null;
            disableLogs();
          }

          try {
            // This should throw.
            if (construct) {
              // Something should be setting the props in the constructor.
              const Fake = function () {
                throw Error();
              }; // $FlowFixMe

              Object.defineProperty(Fake.prototype, 'props', {
                set() {
                  // We use a throwing setter instead of frozen or non-writable props
                  // because that won't throw in a non-strict mode function.
                  throw Error();
                },
              });

              if (typeof Reflect === 'object' && Reflect.construct) {
                // We construct a different control for this case to include any extra
                // frames added by the construct call.
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }

                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }

                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }

              fn();
            }
          } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
              // This extracts the first frame from the sample that isn't also in the control.
              // Skipping one frame that we assume is the frame that calls the two.
              const sampleLines = sample.stack.split('\n');
              const controlLines = control.stack.split('\n');
              let s = sampleLines.length - 1;
              let c = controlLines.length - 1;

              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                // We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
              }

              for (; s >= 1 && c >= 0; s--, c--) {
                // Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                  // In V8, the first line is describing the message but other VMs don't.
                  // If we're about to return the first line, and the control is also on the same
                  // line, that's a pretty good indicator that our sample threw at same line as
                  // the control. I.e. before we entered the sample frame. So we ignore this result.
                  // This can happen if you passed a class to function component, or non-function.
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--; // We may still have similar intermediate frames from the construct call.
                      // The next one that isn't the same should be our match though.

                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                        const _frame = `\n${sampleLines[s].replace(' at new ', ' at ')}`;

                        {
                          if (typeof fn === 'function') {
                            componentFrameCache.set(fn, _frame);
                          }
                        } // Return the line we found.

                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }

                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          } // Fallback to just using the name if we couldn't make it throw.

          const name = fn ? fn.displayName || fn.name : '';
          const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
          {
            if (typeof fn === 'function') {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }

        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }

        function shouldConstruct(Component) {
          const { prototype } = Component;
          return !!(prototype && prototype.isReactComponent);
        }

        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return '';
          }

          if (typeof type === 'function') {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }

          if (typeof type === 'string') {
            return describeBuiltInComponentFrame(type);
          }

          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame('Suspense');

            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame('SuspenseList');
          }

          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);

              case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);

              case REACT_LAZY_TYPE:
              {
                const lazyComponent = type;
                const payload = lazyComponent._payload;
                const init = lazyComponent._init;

                try {
                // Lazy may contain any component type so we recursively resolve it.
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
              }
            }
          }

          return '';
        }

        const loggedTypeFailures = {};
        const { ReactDebugCurrentFrame } = ReactSharedInternals;

        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              const owner = element._owner;
              const stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }

        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            // $FlowFixMe This is okay but Flow doesn't know it.
            const has = Function.call.bind(Object.prototype.hasOwnProperty);

            for (const typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                let error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.

                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== 'function') {
                    const err = Error(`${componentName || 'React class'}: ${location} type \`${typeSpecName}\` is invalid; ` + `it must be a function, usually from the \`prop-types\` package, but received \`${typeof typeSpecs[typeSpecName]}\`.` + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                  }

                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                } catch (ex) {
                  error$1 = ex;
                }

                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }

                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error('Failed %s type: %s', location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }

        const { ReactCurrentOwner } = ReactSharedInternals;
        const { hasOwnProperty } = Object.prototype;
        const RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true,
        };
        let specialPropKeyWarningShown;
        let specialPropRefWarningShown;
        let didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }

        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, 'ref')) {
              const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== undefined;
        }

        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, 'key')) {
              const getter = Object.getOwnPropertyDescriptor(config, 'key').get;

              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== undefined;
        }

        function warnIfStringRefCannotBeAutoConverted(config, self) {
          {
            if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
              const componentName = getComponentName(ReactCurrentOwner.current.type);

              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }

        function defineKeyPropWarningGetter(props, displayName) {
          {
            const warnAboutAccessingKey = function () {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
              }
            };

            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, 'key', {
              get: warnAboutAccessingKey,
              configurable: true,
            });
          }
        }

        function defineRefPropWarningGetter(props, displayName) {
          {
            const warnAboutAccessingRef = function () {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
              }
            };

            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, 'ref', {
              get: warnAboutAccessingRef,
              configurable: true,
            });
          }
        }
        /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, instanceof check
     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} props
     * @param {*} key
     * @param {string|object} ref
     * @param {*} owner
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @internal
     */

        const ReactElement = function (type, key, ref, self, source, owner, props) {
          const element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner,
          };
          {
            // The validation flag is currently mutative. We put it on
            // an external backing store so that we can freeze the whole object.
            // This can be replaced with a WeakMap once they are implemented in
            // commonly used development environments.
            element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
            // the validation flag non-enumerable (where possible, which should
            // include every environment we run tests in), so the test framework
            // ignores it.

            Object.defineProperty(element._store, 'validated', {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false,
            }); // self and source are DEV only properties.

            Object.defineProperty(element, '_self', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self,
            }); // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.

            Object.defineProperty(element, '_source', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source,
            });

            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        /**
     * https://github.com/reactjs/rfcs/pull/107
     * @param {*} type
     * @param {object} props
     * @param {string} key
     */

        function jsxDEV(type, config, maybeKey, source, self) {
          {
            let propName; // Reserved names are extracted

            const props = {};
            let key = null;
            let ref = null; // Currently, key can be spread in as a prop. This causes a potential
            // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
            // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
            // but as an intermediary step, we will use jsxDEV for everything except
            // <div {...props} key="Hi" />, because we aren't currently able to tell if
            // key is explicitly declared to be undefined or not.

            if (maybeKey !== undefined) {
              key = `${maybeKey}`;
            }

            if (hasValidKey(config)) {
              key = `${config.key}`;
            }

            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self);
            } // Remaining properties are added to a new props object

            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            } // Resolve default props

            if (type && type.defaultProps) {
              const { defaultProps } = type;

              for (propName in defaultProps) {
                if (props[propName] === undefined) {
                  props[propName] = defaultProps[propName];
                }
              }
            }

            if (key || ref) {
              const displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }

            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
        }

        const ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        const ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              const owner = element._owner;
              const stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }

        let propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */

        function isValidElement(object) {
          {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }

        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              const name = getComponentName(ReactCurrentOwner$1.current.type);

              if (name) {
                return `\n\nCheck the render method of \`${name}\`.`;
              }
            }

            return '';
          }
        }

        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== undefined) {
              const fileName = source.fileName.replace(/^.*[\\\/]/, '');
              const { lineNumber } = source;
              return `\n\nCheck your code at ${fileName}:${lineNumber}.`;
            }

            return '';
          }
        }
        /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */

        const ownerHasKeyUseWarning = {};

        function getCurrentComponentErrorInfo(parentType) {
          {
            let info = getDeclarationErrorAddendum();

            if (!info) {
              const parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

              if (parentName) {
                info = `\n\nCheck the top-level render call using <${parentName}>.`;
              }
            }

            return info;
          }
        }
        /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */

        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }

            element._store.validated = true;
            const currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }

            ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
            // property, it may be the creator of the child that's responsible for
            // assigning it a key.

            let childOwner = '';

            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              // Give the component that originally created this child.
              childOwner = ` It was passed a child from ${getComponentName(element._owner.type)}.`;
            }

            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */

        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== 'object') {
              return;
            }

            if (Array.isArray(node)) {
              for (let i = 0; i < node.length; i++) {
                const child = node[i];

                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              // This element was passed in a valid location.
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              const iteratorFn = getIteratorFn(node);

              if (typeof iteratorFn === 'function') {
                // Entry iterators used to provide implicit keys,
                // but now we print a separate warning for them later.
                if (iteratorFn !== node.entries) {
                  const iterator = iteratorFn.call(node);
                  let step;

                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */

        function validatePropTypes(element) {
          {
            const { type } = element;

            if (type === null || type === undefined || typeof type === 'string') {
              return;
            }

            let propTypes;

            if (typeof type === 'function') {
              propTypes = type.propTypes;
            } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }

            if (propTypes) {
              // Intentionally inside to avoid triggering lazy initializers:
              const name = getComponentName(type);
              checkPropTypes(propTypes, element.props, 'prop', name, element);
            } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

              const _name = getComponentName(type);

              error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
            }

            if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
              error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
            }
          }
        }
        /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */

        function validateFragmentProps(fragment) {
          {
            const keys = Object.keys(fragment.props);

            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];

              if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }

            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error('Invalid attribute `ref` supplied to `React.Fragment`.');
              setCurrentlyValidatingElement$1(null);
            }
          }
        }

        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
          {
            const validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
            // succeed and there will likely be errors in render.

            if (!validType) {
              let info = '';

              if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
              }

              const sourceInfo = getSourceInfoErrorAddendum(source);

              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }

              let typeString;

              if (type === null) {
                typeString = 'null';
              } else if (Array.isArray(type)) {
                typeString = 'array';
              } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = `<${getComponentName(type.type) || 'Unknown'} />`;
                info = ' Did you accidentally export a JSX literal instead of a component?';
              } else {
                typeString = typeof type;
              }

              error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
            }

            const element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
            // TODO: Drop this when these are no longer allowed as the type argument.

            if (element == null) {
              return element;
            } // Skip key warning if the type isn't valid since our key validation logic
            // doesn't expect a non-string/function type and can throw confusing errors.
            // We don't want exception behavior to differ between dev and prod.
            // (Rendering will throw with a helpful message and as soon as the type is
            // fixed, the key warnings will appear.)

            if (validType) {
              const { children } = props;

              if (children !== undefined) {
                if (isStaticChildren) {
                  if (Array.isArray(children)) {
                    for (let i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }

                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }

            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }

            return element;
          }
        } // These two functions exist to still get child warnings in dev

        const jsxDEV$1 = jsxWithValidation;
        exports.jsxDEV = jsxDEV$1;
      }());
    }
    /***/ }),

  /***/ './node_modules/react/cjs/react.development.js':
  /*! *****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \**************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /** @license React v17.0.1
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    if (true) {
      (function () {
        const _assign = __webpack_require__(/*! object-assign */ './node_modules/object-assign/index.js'); // TODO: this is special because it gets imported during build.

        const ReactVersion = '17.0.1'; // ATTENTION
        // When adding new symbols to this file,
        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.

        let REACT_ELEMENT_TYPE = 0xeac7;
        let REACT_PORTAL_TYPE = 0xeaca;
        exports.Fragment = 0xeacb;
        exports.StrictMode = 0xeacc;
        exports.Profiler = 0xead2;
        let REACT_PROVIDER_TYPE = 0xeacd;
        let REACT_CONTEXT_TYPE = 0xeace;
        let REACT_FORWARD_REF_TYPE = 0xead0;
        exports.Suspense = 0xead1;
        let REACT_SUSPENSE_LIST_TYPE = 0xead8;
        let REACT_MEMO_TYPE = 0xead3;
        let REACT_LAZY_TYPE = 0xead4;
        let REACT_BLOCK_TYPE = 0xead9;
        let REACT_SERVER_BLOCK_TYPE = 0xeada;
        let REACT_FUNDAMENTAL_TYPE = 0xead5;
        let REACT_SCOPE_TYPE = 0xead7;
        let REACT_OPAQUE_ID_TYPE = 0xeae0;
        let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
        let REACT_OFFSCREEN_TYPE = 0xeae2;
        let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

        if (typeof Symbol === 'function' && Symbol.for) {
          const symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor('react.element');
          REACT_PORTAL_TYPE = symbolFor('react.portal');
          exports.Fragment = symbolFor('react.fragment');
          exports.StrictMode = symbolFor('react.strict_mode');
          exports.Profiler = symbolFor('react.profiler');
          REACT_PROVIDER_TYPE = symbolFor('react.provider');
          REACT_CONTEXT_TYPE = symbolFor('react.context');
          REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
          exports.Suspense = symbolFor('react.suspense');
          REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
          REACT_MEMO_TYPE = symbolFor('react.memo');
          REACT_LAZY_TYPE = symbolFor('react.lazy');
          REACT_BLOCK_TYPE = symbolFor('react.block');
          REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
          REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
          REACT_SCOPE_TYPE = symbolFor('react.scope');
          REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
          REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
          REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
        }

        const MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        const FAUX_ITERATOR_SYMBOL = '@@iterator';

        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== 'object') {
            return null;
          }

          const maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

          if (typeof maybeIterator === 'function') {
            return maybeIterator;
          }

          return null;
        }
        /**
     * Keeps track of the current dispatcher.
     */

        const ReactCurrentDispatcher = {
          /**
       * @internal
       * @type {ReactComponent}
       */
          current: null,
        };
        /**
     * Keeps track of the current batch's configuration such as how long an update
     * should suspend for if it needs to.
     */

        const ReactCurrentBatchConfig = {
          transition: 0,
        };
        /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */

        const ReactCurrentOwner = {
          /**
       * @internal
       * @type {ReactComponent}
       */
          current: null,
        };
        const ReactDebugCurrentFrame = {};
        let currentExtraStackFrame = null;

        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }

        {
          ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
            {
              currentExtraStackFrame = stack;
            }
          }; // Stack implementation injected by the current renderer.

          ReactDebugCurrentFrame.getCurrentStack = null;

          ReactDebugCurrentFrame.getStackAddendum = function () {
            let stack = ''; // Add an extra top frame while an element is being validated

            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            } // Delegate to the injected renderer-specific implementation

            const impl = ReactDebugCurrentFrame.getCurrentStack;

            if (impl) {
              stack += impl() || '';
            }

            return stack;
          };
        }
        /**
     * Used by act() to track whether you're inside an act() scope.
     */

        const IsSomeRendererActing = {
          current: false,
        };
        const ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          // Used by renderers to avoid bundling object-assign twice in UMD bundles:
          assign: _assign,
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        } // by calls to these methods by a Babel plugin.
        //
        // In PROD (or in packages without access to React internals),
        // they are left as they are instead.

        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            printWarning('warn', format, args);
          }
        }

        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            printWarning('error', format, args);
          }
        }

        function printWarning(level, format, args) {
          // When changing this logic, you might want to also
          // update consoleWithStackDev.www.js as well.
          {
            const { ReactDebugCurrentFrame } = ReactSharedInternals;
            const stack = ReactDebugCurrentFrame.getStackAddendum();

            if (stack !== '') {
              format += '%s';
              args = args.concat([stack]);
            }

            const argsWithFormat = args.map(item => `${item}`); // Careful: RN currently depends on this prefix

            argsWithFormat.unshift(`Warning: ${format}`); // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging

            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }

        const didWarnStateUpdateForUnmountedComponent = {};

        function warnNoop(publicInstance, callerName) {
          {
            const _constructor = publicInstance.constructor;
            const componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
            const warningKey = `${componentName}.${callerName}`;

            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }

            error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        /**
     * This is the abstract API for an update queue.
     */

        const ReactNoopUpdateQueue = {
          /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
          isMounted(publicInstance) {
            return false;
          },

          /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
          enqueueForceUpdate(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
          },

          /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
          enqueueReplaceState(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
          },

          /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
          enqueueSetState(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
          },
        };
        const emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        /**
     * Base class helpers for the updating state of a component.
     */

        function Component(props, context, updater) {
          this.props = props;
          this.context = context; // If a component has string refs, we will assign a different object later.

          this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
          // renderer.

          this.updater = updater || ReactNoopUpdateQueue;
        }

        Component.prototype.isReactComponent = {};
        /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

        Component.prototype.setState = function (partialState, callback) {
          if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
            {
              throw Error('setState(...): takes an object of state variables to update or a function which returns an object of state variables.');
            }
          }

          this.updater.enqueueSetState(this, partialState, callback, 'setState');
        };
        /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */

        Component.prototype.forceUpdate = function (callback) {
          this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
        };
        /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */

        {
          const deprecatedAPIs = {
            isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
            replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
          };

          const defineDeprecationWarning = function (methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
              },
            });
          };

          for (const fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }

        function ComponentDummy() {}

        ComponentDummy.prototype = Component.prototype;
        /**
     * Convenience component with default shallow equality check for sCU.
     */

        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context; // If a component has string refs, we will assign a different object later.

          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }

        const pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

        _assign(pureComponentPrototype, Component.prototype);

        pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

        function createRef() {
          const refObject = {
            current: null,
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }

        function getWrappedName(outerType, innerType, wrapperName) {
          const functionName = innerType.displayName || innerType.name || '';
          return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
        }

        function getContextName(type) {
          return type.displayName || 'Context';
        }

        function getComponentName(type) {
          if (type == null) {
            // Host root, text node or just invalid type.
            return null;
          }

          {
            if (typeof type.tag === 'number') {
              error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
            }
          }

          if (typeof type === 'function') {
            return type.displayName || type.name || null;
          }

          if (typeof type === 'string') {
            return type;
          }

          switch (type) {
            case exports.Fragment:
              return 'Fragment';

            case REACT_PORTAL_TYPE:
              return 'Portal';

            case exports.Profiler:
              return 'Profiler';

            case exports.StrictMode:
              return 'StrictMode';

            case exports.Suspense:
              return 'Suspense';

            case REACT_SUSPENSE_LIST_TYPE:
              return 'SuspenseList';
          }

          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return `${getContextName(context)}.Consumer`;

              case REACT_PROVIDER_TYPE:
                var provider = type;
                return `${getContextName(provider._context)}.Provider`;

              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');

              case REACT_MEMO_TYPE:
                return getComponentName(type.type);

              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);

              case REACT_LAZY_TYPE:
              {
                const lazyComponent = type;
                const payload = lazyComponent._payload;
                const init = lazyComponent._init;

                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }

          return null;
        }

        const { hasOwnProperty } = Object.prototype;
        const RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true,
        };
        let specialPropKeyWarningShown; let specialPropRefWarningShown; let
          didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }

        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, 'ref')) {
              const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== undefined;
        }

        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, 'key')) {
              const getter = Object.getOwnPropertyDescriptor(config, 'key').get;

              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== undefined;
        }

        function defineKeyPropWarningGetter(props, displayName) {
          const warnAboutAccessingKey = function () {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
              }
            }
          };

          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true,
          });
        }

        function defineRefPropWarningGetter(props, displayName) {
          const warnAboutAccessingRef = function () {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
              }
            }
          };

          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true,
          });
        }

        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              const componentName = getComponentName(ReactCurrentOwner.current.type);

              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, instanceof check
     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} props
     * @param {*} key
     * @param {string|object} ref
     * @param {*} owner
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @internal
     */

        const ReactElement = function (type, key, ref, self, source, owner, props) {
          const element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner,
          };
          {
            // The validation flag is currently mutative. We put it on
            // an external backing store so that we can freeze the whole object.
            // This can be replaced with a WeakMap once they are implemented in
            // commonly used development environments.
            element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
            // the validation flag non-enumerable (where possible, which should
            // include every environment we run tests in), so the test framework
            // ignores it.

            Object.defineProperty(element._store, 'validated', {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false,
            }); // self and source are DEV only properties.

            Object.defineProperty(element, '_self', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self,
            }); // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.

            Object.defineProperty(element, '_source', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source,
            });

            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */

        function createElement(type, config, children) {
          let propName; // Reserved names are extracted

          const props = {};
          let key = null;
          let ref = null;
          let self = null;
          let source = null;

          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }

            if (hasValidKey(config)) {
              key = `${config.key}`;
            }

            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          } // Children can be more than one argument, and those are transferred onto
          // the newly allocated props object.

          const childrenLength = arguments.length - 2;

          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            const childArray = Array(childrenLength);

            for (let i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }

            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          } // Resolve default props

          if (type && type.defaultProps) {
            const { defaultProps } = type;

            for (propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }
          }

          {
            if (key || ref) {
              const displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }

        function cloneAndReplaceKey(oldElement, newKey) {
          const newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */

        function cloneElement(element, config, children) {
          if (element === null || element === undefined) {
            {
              throw Error(`React.cloneElement(...): The argument must be a React element, but you passed ${element}.`);
            }
          }

          let propName; // Original props are copied

          const props = _assign({}, element.props); // Reserved names are extracted

          let { key } = element;
          let { ref } = element; // Self is preserved since the owner is preserved.

          const self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
          // transpiler, and the original source is probably a better indicator of the
          // true owner.

          const source = element._source; // Owner will be preserved, unless ref is overridden

          let owner = element._owner;

          if (config != null) {
            if (hasValidRef(config)) {
              // Silently steal the ref from the parent.
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }

            if (hasValidKey(config)) {
              key = `${config.key}`;
            } // Remaining properties override existing props

            let defaultProps;

            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }

            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) {
                  // Resolve default props
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          } // Children can be more than one argument, and those are transferred onto
          // the newly allocated props object.

          const childrenLength = arguments.length - 2;

          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            const childArray = Array(childrenLength);

            for (let i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }

            props.children = childArray;
          }

          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */

        function isValidElement(object) {
          return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }

        const SEPARATOR = '.';
        const SUBSEPARATOR = ':';
        /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

        function escape(key) {
          const escapeRegex = /[=:]/g;
          const escaperLookup = {
            '=': '=0',
            ':': '=2',
          };
          const escapedString = key.replace(escapeRegex, match => escaperLookup[match]);
          return `$${escapedString}`;
        }
        /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

        let didWarnAboutMaps = false;
        const userProvidedKeyEscapeRegex = /\/+/g;

        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, '$&/');
        }
        /**
     * Generate a key string that identifies a element within a set.
     *
     * @param {*} element A element that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */

        function getElementKey(element, index) {
          // Do some typechecking here since we call this blindly. We want to ensure
          // that we don't block potential future ES APIs.
          if (typeof element === 'object' && element !== null && element.key != null) {
            // Explicit key
            return escape(`${element.key}`);
          } // Implicit key determined by the index in the set

          return index.toString(36);
        }

        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          const type = typeof children;

          if (type === 'undefined' || type === 'boolean') {
            // All of the above are perceived as null.
            children = null;
          }

          let invokeCallback = false;

          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case 'string':
              case 'number':
                invokeCallback = true;
                break;

              case 'object':
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }

          if (invokeCallback) {
            const _child = children;
            let mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:

            const childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

            if (Array.isArray(mappedChild)) {
              let escapedChildKey = '';

              if (childKey != null) {
                escapedChildKey = `${escapeUserProvidedKey(childKey)}/`;
              }

              mapIntoArray(mappedChild, array, escapedChildKey, '', c => c);
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    mappedChild.key && (!_child || _child.key !== mappedChild.key) // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      ? `${escapeUserProvidedKey(`${mappedChild.key}`)}/` : '') + childKey);
              }

              array.push(mappedChild);
            }

            return 1;
          }

          let child;
          let nextName;
          let subtreeCount = 0; // Count of children found in the current subtree.

          const nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

          if (Array.isArray(children)) {
            for (let i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            const iteratorFn = getIteratorFn(children);

            if (typeof iteratorFn === 'function') {
              const iterableChildren = children;
              {
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                  }

                  didWarnAboutMaps = true;
                }
              }
              const iterator = iteratorFn.call(iterableChildren);
              let step;
              let ii = 0;

              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === 'object') {
              const childrenString = `${children}`;
              {
                {
                  throw Error(`Objects are not valid as a React child (found: ${childrenString === '[object Object]' ? `object with keys {${Object.keys(children).join(', ')}}` : childrenString}). If you meant to render a collection of children, use an array instead.`);
                }
              }
            }
          }

          return subtreeCount;
        }
        /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */

        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }

          const result = [];
          let count = 0;
          mapIntoArray(children, result, '', '', child => func.call(context, child, count++));
          return result;
        }
        /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */

        function countChildren(children) {
          let n = 0;
          mapChildren(children, () => {
            n++; // Don't return anything
          });
          return n;
        }
        /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */

        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function () {
            forEachFunc.apply(this, arguments); // Don't return anything.
          }, forEachContext);
        }
        /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */

        function toArray(children) {
          return mapChildren(children, child => child) || [];
        }
        /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */

        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error('React.Children.only expected to receive a single React element child.');
            }
          }

          return children;
        }

        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === undefined) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
                error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
              }
            }
          }

          const context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context,
          };
          let hasWarnedAboutUsingNestedContextConsumers = false;
          let hasWarnedAboutUsingConsumerProvider = false;
          let hasWarnedAboutDisplayNameOnConsumer = false;
          {
            // A separate object, but proxies back to the original context object for
            // backwards compatibility. It has a different $$typeof, so we can properly
            // warn for the incorrect usage of Context as a Consumer.
            const Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits,
            }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

            Object.defineProperties(Consumer, {
              Provider: {
                get() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
                  }

                  return context.Provider;
                },
                set(_Provider) {
                  context.Provider = _Provider;
                },
              },
              _currentValue: {
                get() {
                  return context._currentValue;
                },
                set(_currentValue) {
                  context._currentValue = _currentValue;
                },
              },
              _currentValue2: {
                get() {
                  return context._currentValue2;
                },
                set(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                },
              },
              _threadCount: {
                get() {
                  return context._threadCount;
                },
                set(_threadCount) {
                  context._threadCount = _threadCount;
                },
              },
              Consumer: {
                get() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                  }

                  return context.Consumer;
                },
              },
              displayName: {
                get() {
                  return context.displayName;
                },
                set(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                },
              },
            }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }

        const Uninitialized = -1;
        const Pending = 0;
        const Resolved = 1;
        const Rejected = 2;

        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            const ctor = payload._result;
            const thenable = ctor(); // Transition to the next state.

            const pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(moduleObject => {
              if (payload._status === Pending) {
                const defaultExport = moduleObject.default;
                {
                  if (defaultExport === undefined) {
                    error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' // Break up imports to avoid accidentally parsing them as dependencies.
                + 'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
                  }
                } // Transition to the next state.

                const resolved = payload;
                resolved._status = Resolved;
                resolved._result = defaultExport;
              }
            }, error => {
              if (payload._status === Pending) {
                // Transition to the next state.
                const rejected = payload;
                rejected._status = Rejected;
                rejected._result = error;
              }
            });
          }

          if (payload._status === Resolved) {
            return payload._result;
          }
          throw payload._result;
        }

        function lazy(ctor) {
          const payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor,
          };
          const lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer,
          };
          {
            // In production, this would just set it on the object.
            let defaultProps;
            let propTypes; // $FlowFixMe

            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get() {
                  return defaultProps;
                },
                set(newDefaultProps) {
                  error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                  defaultProps = newDefaultProps; // Match production behavior more closely:
                  // $FlowFixMe

                  Object.defineProperty(lazyType, 'defaultProps', {
                    enumerable: true,
                  });
                },
              },
              propTypes: {
                configurable: true,
                get() {
                  return propTypes;
                },
                set(newPropTypes) {
                  error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                  propTypes = newPropTypes; // Match production behavior more closely:
                  // $FlowFixMe

                  Object.defineProperty(lazyType, 'propTypes', {
                    enumerable: true,
                  });
                },
              },
            });
          }
          return lazyType;
        }

        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
            } else if (typeof render !== 'function') {
              error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
            } else if (render.length !== 0 && render.length !== 2) {
              error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
            }

            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
              }
            }
          }
          const elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render,
          };
          {
            let ownName;
            Object.defineProperty(elementType, 'displayName', {
              enumerable: false,
              configurable: true,
              get() {
                return ownName;
              },
              set(name) {
                ownName = name;

                if (render.displayName == null) {
                  render.displayName = name;
                }
              },
            });
          }
          return elementType;
        } // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

        const enableScopeAPI = false; // Experimental Create Event Handle API.

        function isValidElementType(type) {
          if (typeof type === 'string' || typeof type === 'function') {
            return true;
          } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

          if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }

          if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }

          return false;
        }

        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
            }
          }
          const elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === undefined ? null : compare,
          };
          {
            let ownName;
            Object.defineProperty(elementType, 'displayName', {
              enumerable: false,
              configurable: true,
              get() {
                return ownName;
              },
              set(name) {
                ownName = name;

                if (type.displayName == null) {
                  type.displayName = name;
                }
              },
            });
          }
          return elementType;
        }

        function resolveDispatcher() {
          const dispatcher = ReactCurrentDispatcher.current;

          if (!(dispatcher !== null)) {
            {
              throw Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
            }
          }

          return dispatcher;
        }

        function useContext(Context, unstable_observedBits) {
          const dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== undefined) {
              error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
            } // TODO: add a more generic warning for invalid values.

            if (Context._context !== undefined) {
              const realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
              // and nobody should be using this in existing code.

              if (realContext.Consumer === Context) {
                error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
              } else if (realContext.Provider === Context) {
                error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }

        function useState(initialState) {
          const dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }

        function useReducer(reducer, initialArg, init) {
          const dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }

        function useRef(initialValue) {
          const dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }

        function useEffect(create, deps) {
          const dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }

        function useLayoutEffect(create, deps) {
          const dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }

        function useCallback(callback, deps) {
          const dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }

        function useMemo(create, deps) {
          const dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }

        function useImperativeHandle(ref, create, deps) {
          const dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }

        function useDebugValue(value, formatterFn) {
          {
            const dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        } // Helpers to patch console.logs to avoid logging during side-effect free
        // replaying on render function. This currently only patches the object
        // lazily which won't cover if the log function was extracted eagerly.
        // We could also eagerly patch the method.

        let disabledDepth = 0;
        let prevLog;
        let prevInfo;
        let prevWarn;
        let prevError;
        let prevGroup;
        let prevGroupCollapsed;
        let prevGroupEnd;

        function disabledLog() {}

        disabledLog.__reactDisabledLog = true;

        function disableLogs() {
          {
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

              const props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              });
              /* eslint-enable react-internal/no-production-logging */
            }

            disabledDepth++;
          }
        }

        function reenableLogs() {
          {
            disabledDepth--;

            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              const props = {
                configurable: true,
                enumerable: true,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog,
                }),
                info: _assign({}, props, {
                  value: prevInfo,
                }),
                warn: _assign({}, props, {
                  value: prevWarn,
                }),
                error: _assign({}, props, {
                  value: prevError,
                }),
                group: _assign({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd,
                }),
              });
              /* eslint-enable react-internal/no-production-logging */
            }

            if (disabledDepth < 0) {
              error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
            }
          }
        }

        const ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        let prefix;

        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === undefined) {
              // Extract the VM specific prefix used by each line.
              try {
                throw Error();
              } catch (x) {
                const match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || '';
              }
            } // We use the prefix to ensure our stacks line up with native stack frames.

            return `\n${prefix}${name}`;
          }
        }

        let reentry = false;
        let componentFrameCache;
        {
          const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }

        function describeNativeComponentFrame(fn, construct) {
          // If something asked for a stack inside a fake render, it should get ignored.
          if (!fn || reentry) {
            return '';
          }

          {
            const frame = componentFrameCache.get(fn);

            if (frame !== undefined) {
              return frame;
            }
          }
          let control;
          reentry = true;
          const previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

          Error.prepareStackTrace = undefined;
          let previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
            // for warnings.

            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }

          try {
            // This should throw.
            if (construct) {
              // Something should be setting the props in the constructor.
              const Fake = function () {
                throw Error();
              }; // $FlowFixMe

              Object.defineProperty(Fake.prototype, 'props', {
                set() {
                  // We use a throwing setter instead of frozen or non-writable props
                  // because that won't throw in a non-strict mode function.
                  throw Error();
                },
              });

              if (typeof Reflect === 'object' && Reflect.construct) {
                // We construct a different control for this case to include any extra
                // frames added by the construct call.
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }

                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }

                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }

              fn();
            }
          } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
              // This extracts the first frame from the sample that isn't also in the control.
              // Skipping one frame that we assume is the frame that calls the two.
              const sampleLines = sample.stack.split('\n');
              const controlLines = control.stack.split('\n');
              let s = sampleLines.length - 1;
              let c = controlLines.length - 1;

              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                // We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
              }

              for (; s >= 1 && c >= 0; s--, c--) {
                // Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                  // In V8, the first line is describing the message but other VMs don't.
                  // If we're about to return the first line, and the control is also on the same
                  // line, that's a pretty good indicator that our sample threw at same line as
                  // the control. I.e. before we entered the sample frame. So we ignore this result.
                  // This can happen if you passed a class to function component, or non-function.
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--; // We may still have similar intermediate frames from the construct call.
                      // The next one that isn't the same should be our match though.

                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                        const _frame = `\n${sampleLines[s].replace(' at new ', ' at ')}`;

                        {
                          if (typeof fn === 'function') {
                            componentFrameCache.set(fn, _frame);
                          }
                        } // Return the line we found.

                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }

                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          } // Fallback to just using the name if we couldn't make it throw.

          const name = fn ? fn.displayName || fn.name : '';
          const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
          {
            if (typeof fn === 'function') {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }

        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }

        function shouldConstruct(Component) {
          const { prototype } = Component;
          return !!(prototype && prototype.isReactComponent);
        }

        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return '';
          }

          if (typeof type === 'function') {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }

          if (typeof type === 'string') {
            return describeBuiltInComponentFrame(type);
          }

          switch (type) {
            case exports.Suspense:
              return describeBuiltInComponentFrame('Suspense');

            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame('SuspenseList');
          }

          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);

              case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);

              case REACT_LAZY_TYPE:
              {
                const lazyComponent = type;
                const payload = lazyComponent._payload;
                const init = lazyComponent._init;

                try {
                // Lazy may contain any component type so we recursively resolve it.
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
              }
            }
          }

          return '';
        }

        const loggedTypeFailures = {};
        const ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              const owner = element._owner;
              const stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }

        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            // $FlowFixMe This is okay but Flow doesn't know it.
            const has = Function.call.bind(Object.prototype.hasOwnProperty);

            for (const typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                let error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.

                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== 'function') {
                    const err = Error(`${componentName || 'React class'}: ${location} type \`${typeSpecName}\` is invalid; ` + `it must be a function, usually from the \`prop-types\` package, but received \`${typeof typeSpecs[typeSpecName]}\`.` + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                  }

                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                } catch (ex) {
                  error$1 = ex;
                }

                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }

                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error('Failed %s type: %s', location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }

        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              const owner = element._owner;
              const stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }

        let propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }

        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            const name = getComponentName(ReactCurrentOwner.current.type);

            if (name) {
              return `\n\nCheck the render method of \`${name}\`.`;
            }
          }

          return '';
        }

        function getSourceInfoErrorAddendum(source) {
          if (source !== undefined) {
            const fileName = source.fileName.replace(/^.*[\\\/]/, '');
            const { lineNumber } = source;
            return `\n\nCheck your code at ${fileName}:${lineNumber}.`;
          }

          return '';
        }

        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== undefined) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }

          return '';
        }
        /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */

        const ownerHasKeyUseWarning = {};

        function getCurrentComponentErrorInfo(parentType) {
          let info = getDeclarationErrorAddendum();

          if (!info) {
            const parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

            if (parentName) {
              info = `\n\nCheck the top-level render call using <${parentName}>.`;
            }
          }

          return info;
        }
        /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */

        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }

          element._store.validated = true;
          const currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
          // property, it may be the creator of the child that's responsible for
          // assigning it a key.

          let childOwner = '';

          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            // Give the component that originally created this child.
            childOwner = ` It was passed a child from ${getComponentName(element._owner.type)}.`;
          }

          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */

        function validateChildKeys(node, parentType) {
          if (typeof node !== 'object') {
            return;
          }

          if (Array.isArray(node)) {
            for (let i = 0; i < node.length; i++) {
              const child = node[i];

              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            // This element was passed in a valid location.
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            const iteratorFn = getIteratorFn(node);

            if (typeof iteratorFn === 'function') {
              // Entry iterators used to provide implicit keys,
              // but now we print a separate warning for them later.
              if (iteratorFn !== node.entries) {
                const iterator = iteratorFn.call(node);
                let step;

                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */

        function validatePropTypes(element) {
          {
            const { type } = element;

            if (type === null || type === undefined || typeof type === 'string') {
              return;
            }

            let propTypes;

            if (typeof type === 'function') {
              propTypes = type.propTypes;
            } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }

            if (propTypes) {
              // Intentionally inside to avoid triggering lazy initializers:
              const name = getComponentName(type);
              checkPropTypes(propTypes, element.props, 'prop', name, element);
            } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

              const _name = getComponentName(type);

              error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
            }

            if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
              error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
            }
          }
        }
        /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */

        function validateFragmentProps(fragment) {
          {
            const keys = Object.keys(fragment.props);

            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];

              if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }

            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error('Invalid attribute `ref` supplied to `React.Fragment`.');
              setCurrentlyValidatingElement$1(null);
            }
          }
        }

        function createElementWithValidation(type, props, children) {
          const validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
          // succeed and there will likely be errors in render.

          if (!validType) {
            let info = '';

            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
            }

            const sourceInfo = getSourceInfoErrorAddendumForProps(props);

            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }

            let typeString;

            if (type === null) {
              typeString = 'null';
            } else if (Array.isArray(type)) {
              typeString = 'array';
            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = `<${getComponentName(type.type) || 'Unknown'} />`;
              info = ' Did you accidentally export a JSX literal instead of a component?';
            } else {
              typeString = typeof type;
            }

            {
              error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
            }
          }

          const element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
          // TODO: Drop this when these are no longer allowed as the type argument.

          if (element == null) {
            return element;
          } // Skip key warning if the type isn't valid since our key validation logic
          // doesn't expect a non-string/function type and can throw confusing errors.
          // We don't want exception behavior to differ between dev and prod.
          // (Rendering will throw with a helpful message and as soon as the type is
          // fixed, the key warnings will appear.)

          if (validType) {
            for (let i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }

          if (type === exports.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }

          return element;
        }

        let didWarnAboutDeprecatedCreateFactory = false;

        function createFactoryWithValidation(type) {
          const validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
            } // Legacy hook: remove it

            Object.defineProperty(validatedFactory, 'type', {
              enumerable: false,
              get() {
                warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
                Object.defineProperty(this, 'type', {
                  value: type,
                });
                return type;
              },
            });
          }
          return validatedFactory;
        }

        function cloneElementWithValidation(element, props, children) {
          const newElement = cloneElement.apply(this, arguments);

          for (let i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }

          validatePropTypes(newElement);
          return newElement;
        }

        {
          try {
            const frozenObject = Object.freeze({});
            /* eslint-disable no-new */

            new Map([[frozenObject, null]]);
            new Set([frozenObject]);
            /* eslint-enable no-new */
          } catch (e) {}
        }
        const createElement$1 = createElementWithValidation;
        const cloneElement$1 = cloneElementWithValidation;
        const createFactory = createFactoryWithValidation;
        const Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild,
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.PureComponent = PureComponent;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.version = ReactVersion;
      }());
    }
    /***/ }),

  /***/ './node_modules/react/index.js':
  /*! *************************************!*\
  !*** ./node_modules/react/index.js ***!
  \************************************ */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    if (false) {} else {
      module.exports = __webpack_require__(/*! ./cjs/react.development.js */ './node_modules/react/cjs/react.development.js');
    }
    /***/ }),

  /***/ './node_modules/react/jsx-dev-runtime.js':
  /*! ***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \********************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    if (false) {} else {
      module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ './node_modules/react/cjs/react-jsx-dev-runtime.development.js');
    }
    /***/ }),

  /***/ './node_modules/redux/es/redux.js':
  /*! ****************************************!*\
  !*** ./node_modules/redux/es/redux.js ***!
  \*************************************** */
  /*! exports provided: __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, '__DO_NOT_USE__ActionTypes', () => ActionTypes);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'applyMiddleware', () => applyMiddleware);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'bindActionCreators', () => bindActionCreators);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'combineReducers', () => combineReducers);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'compose', () => compose);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'createStore', () => createStore);
    /* harmony import */ const symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! symbol-observable */ './node_modules/symbol-observable/es/index.js');

    /**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

    const randomString = function randomString() {
      return Math.random().toString(36).substring(7).split('')
        .join('.');
    };

    var ActionTypes = {
      INIT: `@@redux/INIT${randomString()}`,
      REPLACE: `@@redux/REPLACE${randomString()}`,
      PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`;
      },
    };
    /**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

    function isPlainObject(obj) {
      if (typeof obj !== 'object' || obj === null) return false;
      let proto = obj;

      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }

      return Object.getPrototypeOf(obj) === proto;
    }
    /**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

    function createStore(reducer, preloadedState, enhancer) {
      let _ref2;

      if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
        throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');
      }

      if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
        enhancer = preloadedState;
        preloadedState = undefined;
      }

      if (typeof enhancer !== 'undefined') {
        if (typeof enhancer !== 'function') {
          throw new Error('Expected the enhancer to be a function.');
        }

        return enhancer(createStore)(reducer, preloadedState);
      }

      if (typeof reducer !== 'function') {
        throw new Error('Expected the reducer to be a function.');
      }

      let currentReducer = reducer;
      let currentState = preloadedState;
      let currentListeners = [];
      let nextListeners = currentListeners;
      let isDispatching = false;
      /**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = currentListeners.slice();
        }
      }
      /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

      function getState() {
        if (isDispatching) {
          throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
        }

        return currentState;
      }
      /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

      function subscribe(listener) {
        if (typeof listener !== 'function') {
          throw new Error('Expected the listener to be a function.');
        }

        if (isDispatching) {
          throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
        }

        let isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }

          if (isDispatching) {
            throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
          }

          isSubscribed = false;
          ensureCanMutateNextListeners();
          const index = nextListeners.indexOf(listener);
          nextListeners.splice(index, 1);
          currentListeners = null;
        };
      }
      /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

      function dispatch(action) {
        if (!isPlainObject(action)) {
          throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
        }

        if (typeof action.type === 'undefined') {
          throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
        }

        if (isDispatching) {
          throw new Error('Reducers may not dispatch actions.');
        }

        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }

        const listeners = currentListeners = nextListeners;

        for (let i = 0; i < listeners.length; i++) {
          const listener = listeners[i];
          listener();
        }

        return action;
      }
      /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== 'function') {
          throw new Error('Expected the nextReducer to be a function.');
        }

        currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
        // Any reducers that existed in both the new and old rootReducer
        // will receive the previous state. This effectively populates
        // the new state tree with any relevant data from the old one.

        dispatch({
          type: ActionTypes.REPLACE,
        });
      }
      /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

      function observable() {
        let _ref;

        const outerSubscribe = subscribe;
        return _ref = {
          /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
          subscribe: function subscribe(observer) {
            if (typeof observer !== 'object' || observer === null) {
              throw new TypeError('Expected the observer to be an object.');
            }

            function observeState() {
              if (observer.next) {
                observer.next(getState());
              }
            }

            observeState();
            const unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe,
            };
          },
        }, _ref[symbol_observable__WEBPACK_IMPORTED_MODULE_0__.default] = function () {
          return this;
        }, _ref;
      } // When a store is created, an "INIT" action is dispatched so that every
      // reducer returns their initial state. This effectively populates
      // the initial state tree.

      dispatch({
        type: ActionTypes.INIT,
      });
      return _ref2 = {
        dispatch,
        subscribe,
        getState,
        replaceReducer,
      }, _ref2[symbol_observable__WEBPACK_IMPORTED_MODULE_0__.default] = observable, _ref2;
    }
    /**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

    function warning(message) {
      /* eslint-disable no-console */
      if (typeof console !== 'undefined' && typeof console.error === 'function') {
        console.error(message);
      }
      /* eslint-enable no-console */

      try {
        // This error was thrown as a convenience so that if you enable
        // "break on all exceptions" in your console,
        // it would pause the execution at this line.
        throw new Error(message);
      } catch (e) {} // eslint-disable-line no-empty
    }

    function getUndefinedStateErrorMessage(key, action) {
      const actionType = action && action.type;
      const actionDescription = actionType && `action "${String(actionType)}"` || 'an action';
      return `Given ${actionDescription}, reducer "${key}" returned undefined. ` + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
    }

    function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
      const reducerKeys = Object.keys(reducers);
      const argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

      if (reducerKeys.length === 0) {
        return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
      }

      if (!isPlainObject(inputState)) {
        return `The ${argumentName} has unexpected type of "${{}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1]}". Expected argument to be an object with the following ` + `keys: "${reducerKeys.join('", "')}"`;
      }

      const unexpectedKeys = Object.keys(inputState).filter(key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);
      unexpectedKeys.forEach(key => {
        unexpectedKeyCache[key] = true;
      });
      if (action && action.type === ActionTypes.REPLACE) return;

      if (unexpectedKeys.length > 0) {
        return `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` + `"${unexpectedKeys.join('", "')}" found in ${argumentName}. ` + 'Expected to find one of the known reducer keys instead: ' + `"${reducerKeys.join('", "')}". Unexpected keys will be ignored.`;
      }
    }

    function assertReducerShape(reducers) {
      Object.keys(reducers).forEach(key => {
        const reducer = reducers[key];
        const initialState = reducer(undefined, {
          type: ActionTypes.INIT,
        });

        if (typeof initialState === 'undefined') {
          throw new Error(`Reducer "${key}" returned undefined during initialization. ` + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
        }

        if (typeof reducer(undefined, {
          type: ActionTypes.PROBE_UNKNOWN_ACTION(),
        }) === 'undefined') {
          throw new Error(`Reducer "${key}" returned undefined when probed with a random type. ` + `Don't try to handle ${ActionTypes.INIT} or other actions in "redux/*" ` + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
        }
      });
    }
    /**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

    function combineReducers(reducers) {
      const reducerKeys = Object.keys(reducers);
      const finalReducers = {};

      for (let i = 0; i < reducerKeys.length; i++) {
        const key = reducerKeys[i];

        if (true) {
          if (typeof reducers[key] === 'undefined') {
            warning(`No reducer provided for key "${key}"`);
          }
        }

        if (typeof reducers[key] === 'function') {
          finalReducers[key] = reducers[key];
        }
      }

      const finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
      // keys multiple times.

      let unexpectedKeyCache;

      if (true) {
        unexpectedKeyCache = {};
      }

      let shapeAssertionError;

      try {
        assertReducerShape(finalReducers);
      } catch (e) {
        shapeAssertionError = e;
      }

      return function combination(state, action) {
        if (state === void 0) {
          state = {};
        }

        if (shapeAssertionError) {
          throw shapeAssertionError;
        }

        if (true) {
          const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

          if (warningMessage) {
            warning(warningMessage);
          }
        }

        let hasChanged = false;
        const nextState = {};

        for (let _i = 0; _i < finalReducerKeys.length; _i++) {
          const _key = finalReducerKeys[_i];
          const reducer = finalReducers[_key];
          const previousStateForKey = state[_key];
          const nextStateForKey = reducer(previousStateForKey, action);

          if (typeof nextStateForKey === 'undefined') {
            const errorMessage = getUndefinedStateErrorMessage(_key, action);
            throw new Error(errorMessage);
          }

          nextState[_key] = nextStateForKey;
          hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }

        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
      };
    }

    function bindActionCreator(actionCreator, dispatch) {
      return function () {
        return dispatch(actionCreator.apply(this, arguments));
      };
    }
    /**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

    function bindActionCreators(actionCreators, dispatch) {
      if (typeof actionCreators === 'function') {
        return bindActionCreator(actionCreators, dispatch);
      }

      if (typeof actionCreators !== 'object' || actionCreators === null) {
        throw new Error(`bindActionCreators expected an object or a function, instead received ${actionCreators === null ? 'null' : typeof actionCreators}. ` + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
      }

      const boundActionCreators = {};

      for (const key in actionCreators) {
        const actionCreator = actionCreators[key];

        if (typeof actionCreator === 'function') {
          boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
      }

      return boundActionCreators;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true,
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function ownKeys(object, enumerableOnly) {
      let keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        keys.push.apply(keys, Object.getOwnPropertySymbols(object));
      }

      if (enumerableOnly) {
        keys = keys.filter(sym => Object.getOwnPropertyDescriptor(object, sym).enumerable);
      }
      return keys;
    }

    function _objectSpread2(target) {
      for (let i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(source, true).forEach(key => {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(source).forEach(key => {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }
    /**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

    function compose() {
      for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }

      if (funcs.length === 0) {
        return function (arg) {
          return arg;
        };
      }

      if (funcs.length === 1) {
        return funcs[0];
      }

      return funcs.reduce((a, b) => function () {
        return a(b.apply(void 0, arguments));
      });
    }
    /**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

    function applyMiddleware() {
      for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
        middlewares[_key] = arguments[_key];
      }

      return function (createStore) {
        return function () {
          const store = createStore.apply(void 0, arguments);

          let _dispatch = function dispatch() {
            throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
          };

          const middlewareAPI = {
            getState: store.getState,
            dispatch: function dispatch() {
              return _dispatch.apply(void 0, arguments);
            },
          };
          const chain = middlewares.map(middleware => middleware(middlewareAPI));
          _dispatch = compose.apply(void 0, chain)(store.dispatch);
          return _objectSpread2({}, store, {
            dispatch: _dispatch,
          });
        };
      };
    }
    /*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

    function isCrushed() {}

    if (true && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
      warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
    }
    /***/ }),

  /***/ './node_modules/resolve-pathname/esm/resolve-pathname.js':
  /*! ***************************************************************!*\
  !*** ./node_modules/resolve-pathname/esm/resolve-pathname.js ***!
  \************************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    function isAbsolute(pathname) {
      return pathname.charAt(0) === '/';
    } // About 1.5x faster than the two-arg version of Array#splice()

    function spliceOne(list, index) {
      for (let i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
        list[i] = list[k];
      }

      list.pop();
    } // This implementation is based heavily on node's url.parse

    function resolvePathname(to, from) {
      if (from === undefined) from = '';
      const toParts = to && to.split('/') || [];
      let fromParts = from && from.split('/') || [];
      const isToAbs = to && isAbsolute(to);
      const isFromAbs = from && isAbsolute(from);
      const mustEndAbs = isToAbs || isFromAbs;

      if (to && isAbsolute(to)) {
        // to is absolute
        fromParts = toParts;
      } else if (toParts.length) {
        // to is relative, drop the filename
        fromParts.pop();
        fromParts = fromParts.concat(toParts);
      }

      if (!fromParts.length) return '/';
      let hasTrailingSlash;

      if (fromParts.length) {
        const last = fromParts[fromParts.length - 1];
        hasTrailingSlash = last === '.' || last === '..' || last === '';
      } else {
        hasTrailingSlash = false;
      }

      let up = 0;

      for (let i = fromParts.length; i >= 0; i--) {
        const part = fromParts[i];

        if (part === '.') {
          spliceOne(fromParts, i);
        } else if (part === '..') {
          spliceOne(fromParts, i);
          up++;
        } else if (up) {
          spliceOne(fromParts, i);
          up--;
        }
      }

      if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');
      if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
      let result = fromParts.join('/');
      if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
      return result;
    }

    /* harmony default export */ __webpack_exports__.default = (resolvePathname);
    /***/ }),

  /***/ './node_modules/scheduler/cjs/scheduler-tracing.development.js':
  /*! *********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \******************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /** @license React v0.20.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    if (true) {
      (function () {
        const DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

        let interactionIDCounter = 0;
        let threadIDCounter = 0; // Set of currently traced interactions.
        // Interactions "stack"–
        // Meaning that newly traced interactions are appended to the previously active set.
        // When an interaction goes out of scope, the previous set (if any) is restored.

        exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: new Set(),
          };
          exports.__subscriberRef = {
            current: null,
          };
        }

        function unstable_clear(callback) {
          const prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();

          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }

        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }

        function unstable_getThreadID() {
          return ++threadIDCounter;
        }

        function unstable_trace(name, timestamp, callback) {
          const threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
          const interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp,
          };
          const prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
          // To do that, clone the current interactions.
          // The previous set will be restored upon completion.

          const interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          const subscriber = exports.__subscriberRef.current;
          let returnValue;

          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;

                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--; // If no async work was scheduled for this interaction,
                  // Notify subscribers that it's completed.

                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }

          return returnValue;
        }

        function unstable_wrap(callback) {
          const threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
          const wrappedInteractions = exports.__interactionsRef.current;
          let subscriber = exports.__subscriberRef.current;

          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          } // Update the pending async work count for the current interactions.
          // Update after calling subscribers in case of error.

          wrappedInteractions.forEach(interaction => {
            interaction.__count++;
          });
          let hasRun = false;

          function wrapped() {
            const prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;

            try {
              let returnValue;

              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(undefined, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;

                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }

              return returnValue;
            } finally {
              if (!hasRun) {
                // We only expect a wrapped function to be executed once,
                // But in the event that it's executed more than once–
                // Only decrement the outstanding interaction counts once.
                hasRun = true; // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.

                wrappedInteractions.forEach(interaction => {
                  interaction.__count--;

                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }

          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;

            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              // Update pending async counts for all wrapped interactions.
              // If this was the last scheduled async work for any of them,
              // Mark them as completed.
              wrappedInteractions.forEach(interaction => {
                interaction.__count--;

                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };

          return wrapped;
        }

        let subscribers = null;
        {
          subscribers = new Set();
        }

        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);

            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped,
              };
            }
          }
        }

        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);

            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }

        function onInteractionTraced(interaction) {
          let didCatchError = false;
          let caughtError = null;
          subscribers.forEach(subscriber => {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onInteractionScheduledWorkCompleted(interaction) {
          let didCatchError = false;
          let caughtError = null;
          subscribers.forEach(subscriber => {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onWorkScheduled(interactions, threadID) {
          let didCatchError = false;
          let caughtError = null;
          subscribers.forEach(subscriber => {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onWorkStarted(interactions, threadID) {
          let didCatchError = false;
          let caughtError = null;
          subscribers.forEach(subscriber => {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onWorkStopped(interactions, threadID) {
          let didCatchError = false;
          let caughtError = null;
          subscribers.forEach(subscriber => {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        function onWorkCanceled(interactions, threadID) {
          let didCatchError = false;
          let caughtError = null;
          subscribers.forEach(subscriber => {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });

          if (didCatchError) {
            throw caughtError;
          }
        }

        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      }());
    }
    /***/ }),

  /***/ './node_modules/scheduler/cjs/scheduler.development.js':
  /*! *************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \************************************************************ */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /** @license React v0.20.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

    if (true) {
      (function () {
        const enableSchedulerDebugging = false;
        const enableProfiling = true;
        let requestHostCallback;
        let requestHostTimeout;
        let cancelHostTimeout;
        let requestPaint;
        const hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

        if (hasPerformanceNow) {
          const localPerformance = performance;

          exports.unstable_now = function () {
            return localPerformance.now();
          };
        } else {
          const localDate = Date;
          const initialTime = localDate.now();

          exports.unstable_now = function () {
            return localDate.now() - initialTime;
          };
        }

        if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
        // implementation using setTimeout.
          typeof window === 'undefined' // Check if MessageChannel is supported, too.
    || typeof MessageChannel !== 'function') {
          // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
          // fallback to a naive implementation.
          let _callback = null;
          let _timeoutID = null;

          var _flushCallback = function () {
            if (_callback !== null) {
              try {
                const currentTime = exports.unstable_now();
                const hasRemainingTime = true;

                _callback(hasRemainingTime, currentTime);

                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };

          requestHostCallback = function (cb) {
            if (_callback !== null) {
              // Protect against re-entrancy.
              setTimeout(requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };

          requestHostTimeout = function (cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          };

          cancelHostTimeout = function () {
            clearTimeout(_timeoutID);
          };

          exports.unstable_shouldYield = function () {
            return false;
          };

          requestPaint = exports.unstable_forceFrameRate = function () {};
        } else {
          // Capture local references to native APIs, in case a polyfill overrides them.
          const _setTimeout = window.setTimeout;
          const _clearTimeout = window.clearTimeout;

          if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            const { requestAnimationFrame } = window;
            const { cancelAnimationFrame } = window;

            if (typeof requestAnimationFrame !== 'function') {
              // Using console['error'] to evade Babel and ESLint
              console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
            }

            if (typeof cancelAnimationFrame !== 'function') {
              // Using console['error'] to evade Babel and ESLint
              console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
            }
          }

          let isMessageLoopRunning = false;
          let scheduledHostCallback = null;
          let taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
          // thread, like user events. By default, it yields multiple times per frame.
          // It does not attempt to align with frame boundaries, since most tasks don't
          // need to be frame aligned; for those that do, use requestAnimationFrame.

          let yieldInterval = 5;
          let deadline = 0; // TODO: Make this configurable

          {
            // `isInputPending` is not available. Since we have no way of knowing if
            // there's pending input, always yield at the end of the frame.
            exports.unstable_shouldYield = function () {
              return exports.unstable_now() >= deadline;
            }; // Since we yield every frame regardless, `requestPaint` has no effect.

            requestPaint = function () {};
          }

          exports.unstable_forceFrameRate = function (fps) {
            if (fps < 0 || fps > 125) {
              // Using console['error'] to evade Babel and ESLint
              console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
              return;
            }

            if (fps > 0) {
              yieldInterval = Math.floor(1000 / fps);
            } else {
              // reset the framerate
              yieldInterval = 5;
            }
          };

          const performWorkUntilDeadline = function () {
            if (scheduledHostCallback !== null) {
              const currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
              // cycle. This means there's always time remaining at the beginning of
              // the message event.

              deadline = currentTime + yieldInterval;
              const hasTimeRemaining = true;

              try {
                const hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  // If there's more work, schedule the next message event at the end
                  // of the preceding one.
                  port.postMessage(null);
                }
              } catch (error) {
                // If a scheduler task throws, exit the current browser task so the
                // error can be observed.
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            } // Yielding to the browser will give it a chance to paint, so we can
          };

          const channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;

          requestHostCallback = function (callback) {
            scheduledHostCallback = callback;

            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };

          requestHostTimeout = function (callback, ms) {
            taskTimeoutID = _setTimeout(() => {
              callback(exports.unstable_now());
            }, ms);
          };

          cancelHostTimeout = function () {
            _clearTimeout(taskTimeoutID);

            taskTimeoutID = -1;
          };
        }

        function push(heap, node) {
          const index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }

        function peek(heap) {
          const first = heap[0];
          return first === undefined ? null : first;
        }

        function pop(heap) {
          const first = heap[0];

          if (first !== undefined) {
            const last = heap.pop();

            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }

            return first;
          }
          return null;
        }

        function siftUp(heap, node, i) {
          let index = i;

          while (true) {
            const parentIndex = index - 1 >>> 1;
            const parent = heap[parentIndex];

            if (parent !== undefined && compare(parent, node) > 0) {
              // The parent is larger. Swap positions.
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              // The parent is smaller. Exit.
              return;
            }
          }
        }

        function siftDown(heap, node, i) {
          let index = i;
          const { length } = heap;

          while (index < length) {
            const leftIndex = (index + 1) * 2 - 1;
            const left = heap[leftIndex];
            const rightIndex = leftIndex + 1;
            const right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

            if (left !== undefined && compare(left, node) < 0) {
              if (right !== undefined && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (right !== undefined && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              // Neither child is smaller. Exit.
              return;
            }
          }
        }

        function compare(a, b) {
          // Compare sort index first, then task id.
          const diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        } // TODO: Use symbols?

        const NoPriority = 0;
        const ImmediatePriority = 1;
        const UserBlockingPriority = 2;
        const NormalPriority = 3;
        const LowPriority = 4;
        const IdlePriority = 5;
        let runIdCounter = 0;
        let mainThreadIdCounter = 0;
        const profilingStateSize = 4;
        const sharedProfilingBuffer = // $FlowFixMe Flow doesn't know about SharedArrayBuffer
    typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) // $FlowFixMe Flow doesn't know about ArrayBuffer
      : typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
    ;
        const profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

        const PRIORITY = 0;
        const CURRENT_TASK_ID = 1;
        const CURRENT_RUN_ID = 2;
        const QUEUE_SIZE = 3;
        {
          profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
          // array might include canceled tasks.

          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        } // Bytes per element is 4

        const INITIAL_EVENT_LOG_SIZE = 131072;
        const MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

        let eventLogSize = 0;
        let eventLogBuffer = null;
        let eventLog = null;
        let eventLogIndex = 0;
        const TaskStartEvent = 1;
        const TaskCompleteEvent = 2;
        const TaskErrorEvent = 3;
        const TaskCancelEvent = 4;
        const TaskRunEvent = 5;
        const TaskYieldEvent = 6;
        const SchedulerSuspendEvent = 7;
        const SchedulerResumeEvent = 8;

        function logEvent(entries) {
          if (eventLog !== null) {
            const offset = eventLogIndex;
            eventLogIndex += entries.length;

            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;

              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                // Using console['error'] to evade Babel and ESLint
                console.error("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
                stopLoggingProfilingEvents();
                return;
              }

              const newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }

            eventLog.set(entries, offset);
          }
        }

        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }

        function stopLoggingProfilingEvents() {
          const buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }

        function markTaskStart(task, ms) {
          {
            profilingState[QUEUE_SIZE]++;

            if (eventLog !== null) {
              // performance.now returns a float, representing milliseconds. When the
              // event is logged, it's coerced to an int. Convert to microseconds to
              // maintain extra degrees of precision.
              logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
            }
          }
        }

        function markTaskCompleted(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;

            if (eventLog !== null) {
              logEvent([TaskCompleteEvent, ms * 1000, task.id]);
            }
          }
        }

        function markTaskCanceled(task, ms) {
          {
            profilingState[QUEUE_SIZE]--;

            if (eventLog !== null) {
              logEvent([TaskCancelEvent, ms * 1000, task.id]);
            }
          }
        }

        function markTaskErrored(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;

            if (eventLog !== null) {
              logEvent([TaskErrorEvent, ms * 1000, task.id]);
            }
          }
        }

        function markTaskRun(task, ms) {
          {
            runIdCounter++;
            profilingState[PRIORITY] = task.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;

            if (eventLog !== null) {
              logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
            }
          }
        }

        function markTaskYield(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;

            if (eventLog !== null) {
              logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
            }
          }
        }

        function markSchedulerSuspended(ms) {
          {
            mainThreadIdCounter++;

            if (eventLog !== null) {
              logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
            }
          }
        }

        function markSchedulerUnsuspended(ms) {
          {
            if (eventLog !== null) {
              logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
            }
          }
        }
        /* eslint-disable no-var */
        // Math.pow(2, 30) - 1
        // 0b111111111111111111111111111111

        var maxSigned31BitInt = 1073741823; // Times out immediately

        var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5000;
        var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

        var taskQueue = [];
        var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

        var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.

        var currentTask = null;
        var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;

        function advanceTimers(currentTime) {
          // Check for tasks that are no longer delayed and add them to the queue.
          var timer = peek(timerQueue);

          while (timer !== null) {
            if (timer.callback === null) {
              // Timer was cancelled.
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              // Timer fired. Transfer to the task queue.
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              // Remaining timers are pending.
              return;
            }

            timer = peek(timerQueue);
          }
        }

        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);

          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);

              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }

        function flushWork(hasTimeRemaining, initialTime) {
          {
            markSchedulerUnsuspended(initialTime);
          } // We'll need a host callback the next time work is scheduled.

          isHostCallbackScheduled = false;

          if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }

          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;

          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }

                throw error;
              }
            } else {
              // No catch in prod code path.
              return workLoop(hasTimeRemaining, initialTime);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            {
              var _currentTime = exports.unstable_now();

              markSchedulerSuspended(_currentTime);
            }
          }
        }

        function workLoop(hasTimeRemaining, initialTime) {
          var currentTime = initialTime;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);

          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
              // This currentTask hasn't expired, and we've reached the deadline.
              break;
            }

            var { callback } = currentTask;

            if (typeof callback === 'function') {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();

              if (typeof continuationCallback === 'function') {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }

                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }

              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }

            currentTask = peek(taskQueue);
          } // Return whether there's additional work

          if (currentTask !== null) {
            return true;
          }
          var firstTimer = peek(timerQueue);

          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }

          return false;
        }

        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;

            default:
              priorityLevel = NormalPriority;
          }

          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;

          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }

        function unstable_next(eventHandler) {
          var priorityLevel;

          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              // Shift down to normal priority
              priorityLevel = NormalPriority;
              break;

            default:
              // Anything lower than normal priority should remain at the current level.
              priorityLevel = currentPriorityLevel;
              break;
          }

          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;

          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }

        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function () {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;

            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }

        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;

          if (typeof options === 'object' && options !== null) {
            var { delay } = options;

            if (typeof delay === 'number' && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
          } else {
            startTime = currentTime;
          }

          var timeout;

          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;

            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;

            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;

            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;

            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }

          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1,
          };
          {
            newTask.isQueued = false;
          }

          if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);

            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              // All tasks are delayed, and this is the task with the earliest delay.
              if (isHostTimeoutScheduled) {
                // Cancel an existing timeout.
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              } // Schedule a timeout.

              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            } // Schedule a host callback, if needed. If we're already performing work,
            // wait until the next time we yield.

            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }

          return newTask;
        }

        function unstable_pauseExecution() {}

        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }

        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }

        function unstable_cancelCallback(task) {
          {
            if (task.isQueued) {
              var currentTime = exports.unstable_now();
              markTaskCanceled(task, currentTime);
              task.isQueued = false;
            }
          } // Null out the callback to indicate the task has been canceled. (Can't
          // remove from the queue because you can't remove arbitrary nodes from an
          // array based heap, only the first one.)

          task.callback = null;
        }

        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }

        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = {
          startLoggingProfilingEvents,
          stopLoggingProfilingEvents,
          sharedProfilingBuffer,
        };
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      }());
    }
    /***/ }),

  /***/ './node_modules/scheduler/index.js':
  /*! *****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \**************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    if (false) {} else {
      module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ './node_modules/scheduler/cjs/scheduler.development.js');
    }
    /***/ }),

  /***/ './node_modules/scheduler/tracing.js':
  /*! *******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \****************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    if (false) {} else {
      module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ './node_modules/scheduler/cjs/scheduler-tracing.development.js');
    }
    /***/ }),

  /***/ './node_modules/strip-ansi/index.js':
  /*! ******************************************!*\
  !*** ./node_modules/strip-ansi/index.js ***!
  \***************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    const ansiRegex = __webpack_require__(/*! ansi-regex */ './node_modules/ansi-regex/index.js');

    module.exports = string => (typeof string === 'string' ? string.replace(ansiRegex(), '') : string);
    /***/ }),

  /***/ './node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js':
  /*! ****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*************************************************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    var isOldIE = (function isOldIE() {
      var memo;
      return function memorize() {
        if (typeof memo === 'undefined') {
          // Test for IE <= 9 as proposed by Browserhacks
          // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
          // Tests for existence of standard globals is to allow style-loader
          // to operate correctly into non-standard environments
          // @see https://github.com/webpack-contrib/style-loader/issues/177
          memo = Boolean(window && document && document.all && !window.atob);
        }

        return memo;
      };
    }());

    var getTarget = (function getTarget() {
      var memo = {};
      return function memorize(target) {
        if (typeof memo[target] === 'undefined') {
          var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

          if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
            try {
              // This will throw an exception if access to iframe is blocked
              // due to cross-origin restrictions
              styleTarget = styleTarget.contentDocument.head;
            } catch (e) {
              // istanbul ignore next
              styleTarget = null;
            }
          }

          memo[target] = styleTarget;
        }

        return memo[target];
      };
    }());

    var stylesInDom = [];

    function getIndexByIdentifier(identifier) {
      var result = -1;

      for (var i = 0; i < stylesInDom.length; i++) {
        if (stylesInDom[i].identifier === identifier) {
          result = i;
          break;
        }
      }

      return result;
    }

    function modulesToDom(list, options) {
      var idCountMap = {};
      var identifiers = [];

      for (var i = 0; i < list.length; i++) {
        var item = list[i];
        var id = options.base ? item[0] + options.base : item[0];
        var count = idCountMap[id] || 0;
        var identifier = ''.concat(id, ' ').concat(count);
        idCountMap[id] = count + 1;
        var index = getIndexByIdentifier(identifier);
        var obj = {
          css: item[1],
          media: item[2],
          sourceMap: item[3],
        };

        if (index !== -1) {
          stylesInDom[index].references++;
          stylesInDom[index].updater(obj);
        } else {
          stylesInDom.push({
            identifier,
            updater: addStyle(obj, options),
            references: 1,
          });
        }

        identifiers.push(identifier);
      }

      return identifiers;
    }

    function insertStyleElement(options) {
      var style = document.createElement('style');
      var attributes = options.attributes || {};

      if (typeof attributes.nonce === 'undefined') {
        var nonce = true ? __webpack_require__.nc : undefined;

        if (nonce) {
          attributes.nonce = nonce;
        }
      }

      Object.keys(attributes).forEach(key => {
        style.setAttribute(key, attributes[key]);
      });

      if (typeof options.insert === 'function') {
        options.insert(style);
      } else {
        var target = getTarget(options.insert || 'head');

        if (!target) {
          throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
        }

        target.appendChild(style);
      }

      return style;
    }

    function removeStyleElement(style) {
      // istanbul ignore if
      if (style.parentNode === null) {
        return false;
      }

      style.parentNode.removeChild(style);
    }
    /* istanbul ignore next  */

    var replaceText = (function replaceText() {
      var textStore = [];
      return function replace(index, replacement) {
        textStore[index] = replacement;
        return textStore.filter(Boolean).join('\n');
      };
    }());

    function applyToSingletonTag(style, index, remove, obj) {
      var css = remove ? '' : obj.media ? '@media '.concat(obj.media, ' {').concat(obj.css, '}') : obj.css; // For old IE

      /* istanbul ignore if  */

      if (style.styleSheet) {
        style.styleSheet.cssText = replaceText(index, css);
      } else {
        var cssNode = document.createTextNode(css);
        var { childNodes } = style;

        if (childNodes[index]) {
          style.removeChild(childNodes[index]);
        }

        if (childNodes.length) {
          style.insertBefore(cssNode, childNodes[index]);
        } else {
          style.appendChild(cssNode);
        }
      }
    }

    function applyToTag(style, options, obj) {
      var { css } = obj;
      var { media } = obj;
      var { sourceMap } = obj;

      if (media) {
        style.setAttribute('media', media);
      } else {
        style.removeAttribute('media');
      }

      if (sourceMap && typeof btoa !== 'undefined') {
        css += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), ' */');
      } // For old IE

      /* istanbul ignore if  */

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        while (style.firstChild) {
          style.removeChild(style.firstChild);
        }

        style.appendChild(document.createTextNode(css));
      }
    }

    var singleton = null;
    var singletonCounter = 0;

    function addStyle(obj, options) {
      var style;
      var update;
      var remove;

      if (options.singleton) {
        var styleIndex = singletonCounter++;
        style = singleton || (singleton = insertStyleElement(options));
        update = applyToSingletonTag.bind(null, style, styleIndex, false);
        remove = applyToSingletonTag.bind(null, style, styleIndex, true);
      } else {
        style = insertStyleElement(options);
        update = applyToTag.bind(null, style, options);

        remove = function remove() {
          removeStyleElement(style);
        };
      }

      update(obj);
      return function updateStyle(newObj) {
        if (newObj) {
          if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
            return;
          }

          update(obj = newObj);
        } else {
          remove();
        }
      };
    }

    module.exports = function (list, options) {
      options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
      // tags it will allow on a page

      if (!options.singleton && typeof options.singleton !== 'boolean') {
        options.singleton = isOldIE();
      }

      list = list || [];
      var lastIdentifiers = modulesToDom(list, options);
      return function update(newList) {
        newList = newList || [];

        if (Object.prototype.toString.call(newList) !== '[object Array]') {
          return;
        }

        for (var i = 0; i < lastIdentifiers.length; i++) {
          var identifier = lastIdentifiers[i];
          var index = getIndexByIdentifier(identifier);
          stylesInDom[index].references--;
        }

        var newLastIdentifiers = modulesToDom(newList, options);

        for (var _i = 0; _i < lastIdentifiers.length; _i++) {
          var _identifier = lastIdentifiers[_i];

          var _index = getIndexByIdentifier(_identifier);

          if (stylesInDom[_index].references === 0) {
            stylesInDom[_index].updater();

            stylesInDom.splice(_index, 1);
          }
        }

        lastIdentifiers = newLastIdentifiers;
      };
    };
    /***/ }),

  /***/ './node_modules/symbol-observable/es/index.js':
  /*! ****************************************************!*\
  !*** ./node_modules/symbol-observable/es/index.js ***!
  \*************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* WEBPACK VAR INJECTION */(function (global, module) {
      /* harmony import */ var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ponyfill.js */ './node_modules/symbol-observable/es/ponyfill.js');
      /* global window */

      var root;

      if (typeof self !== 'undefined') {
        root = self;
      } else if (typeof window !== 'undefined') {
        root = window;
      } else if (typeof global !== 'undefined') {
        root = global;
      } else if (true) {
        root = module;
      } else {}

      var result = Object(_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.default)(root);
      /* harmony default export */ __webpack_exports__.default = (result);
      /* WEBPACK VAR INJECTION */ }.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ './node_modules/webpack/buildin/global.js'), __webpack_require__(/*! ./../../webpack/buildin/harmony-module.js */ './node_modules/webpack/buildin/harmony-module.js')(module)));
    /***/ }),

  /***/ './node_modules/symbol-observable/es/ponyfill.js':
  /*! *******************************************************!*\
  !*** ./node_modules/symbol-observable/es/ponyfill.js ***!
  \****************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, 'default', () => symbolObservablePonyfill);
    function symbolObservablePonyfill(root) {
      var result;
      var { Symbol } = root;

      if (typeof Symbol === 'function') {
        if (Symbol.observable) {
          result = Symbol.observable;
        } else {
          result = Symbol('observable');
          Symbol.observable = result;
        }
      } else {
        result = '@@observable';
      }

      return result;
    }
    /***/ }),

  /***/ './node_modules/tiny-invariant/dist/tiny-invariant.esm.js':
  /*! ****************************************************************!*\
  !*** ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js ***!
  \*************************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    var isProduction = 'development' === 'production';
    var prefix = 'Invariant failed';

    function invariant(condition, message) {
      if (condition) {
        return;
      }

      if (isProduction) {
        throw new Error(prefix);
      }

      throw new Error(`${prefix}: ${message || ''}`);
    }

    /* harmony default export */ __webpack_exports__.default = (invariant);
    /***/ }),

  /***/ './node_modules/tiny-warning/dist/tiny-warning.esm.js':
  /*! ************************************************************!*\
  !*** ./node_modules/tiny-warning/dist/tiny-warning.esm.js ***!
  \*********************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    var isProduction = 'development' === 'production';

    function warning(condition, message) {
      if (!isProduction) {
        if (condition) {
          return;
        }

        var text = `Warning: ${message}`;

        if (typeof console !== 'undefined') {
          console.warn(text);
        }

        try {
          throw Error(text);
        } catch (x) {}
      }
    }

    /* harmony default export */ __webpack_exports__.default = (warning);
    /***/ }),

  /***/ './node_modules/url/url.js':
  /*! *********************************!*\
  !*** ./node_modules/url/url.js ***!
  \******************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var punycode = __webpack_require__(/*! punycode */ './node_modules/node-libs-browser/node_modules/punycode/punycode.js');

    var util = __webpack_require__(/*! ./util */ './node_modules/url/util.js');

    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;

    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    } // Reference: RFC 3986, RFC 1808, RFC 2396
    // define these here so at least they only have to be
    // compiled once on the first module load.

    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    // Special case for a simple path URL
    var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    var delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'];
    // RFC 2396: characters not allowed for various reasons.
    var unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims);
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    var autoEscape = ['\''].concat(unwise);
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    var nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape);
    var hostEndingChars = ['/', '?', '#'];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    // protocols that can allow "unsafe" and "unwise" chars.
    var unsafeProtocol = {
      javascript: true,
      'javascript:': true,
    };
    // protocols that never have a hostname.
    var hostlessProtocol = {
      javascript: true,
      'javascript:': true,
    };
    // protocols that always contain a // bit.
    var slashedProtocol = {
      http: true,
      https: true,
      ftp: true,
      gopher: true,
      file: true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true,
    };
    var querystring = __webpack_require__(/*! querystring */ './node_modules/querystring-es3/index.js');

    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && util.isObject(url) && url instanceof Url) return url;
      var u = new Url();
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }

    Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
      if (!util.isString(url)) {
        throw new TypeError(`Parameter 'url' must be a string, not ${typeof url}`);
      } // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://code.google.com/p/chromium/issues/detail?id=25916

      var queryIndex = url.indexOf('?');
      var splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#';
      var uSplit = url.split(splitter);
      var slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url = uSplit.join(splitter);
      var rest = url; // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"

      rest = rest.trim();

      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);

        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];

          if (simplePath[2]) {
            this.search = simplePath[2];

            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = '';
            this.query = {};
          }

          return this;
        }
      }

      var proto = protocolPattern.exec(rest);

      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      } // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.

      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';

        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }

      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;

        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        } // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.

        var auth; var
          atSign;

        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        } // Now we have a portion which is definitely the auth.
        // Pull that off.

        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        } // the host is the remaining to the left of the first non-host char

        hostEnd = -1;

        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        } // if we still have not hit it, then the entire thing is a host.

        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd); // pull out port.

        this.parseHost(); // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.

        this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.

        var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);

          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;

            if (!part.match(hostnamePartPattern)) {
              var newpart = '';

              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              } // we test again with ASCII char only

              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);

                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }

                if (notHost.length) {
                  rest = `/${notHost.join('.')}${rest}`;
                }

                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        } else {
          // hostnames are always lower case.
          this.hostname = this.hostname.toLowerCase();
        }

        if (!ipv6Hostname) {
          // IDNA Support: Returns a punycoded representation of "domain".
          // It only converts parts of the domain name that
          // have non-ASCII characters, i.e. it doesn't matter if
          // you call it with a domain that already is ASCII-only.
          this.hostname = punycode.toASCII(this.hostname);
        }

        var p = this.port ? `:${this.port}` : '';
        var h = this.hostname || '';
        this.host = h + p;
        this.href += this.host; // strip [ and ] from the hostname
        // the host field still retains them, though

        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);

          if (rest[0] !== '/') {
            rest = `/${rest}`;
          }
        }
      } // now rest is set to the post-host stuff.
      // chop off any delim chars.

      if (!unsafeProtocol[lowerProto]) {
        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1) continue;
          var esc = encodeURIComponent(ae);

          if (esc === ae) {
            esc = escape(ae);
          }

          rest = rest.split(ae).join(esc);
        }
      } // chop off from the tail first.

      var hash = rest.indexOf('#');

      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }

      var qm = rest.indexOf('?');

      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);

        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }

        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = '';
        this.query = {};
      }

      if (rest) this.pathname = rest;

      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = '/';
      } // to support http.request

      if (this.pathname || this.search) {
        var p = this.pathname || '';
        var s = this.search || '';
        this.path = p + s;
      } // finally, reconstruct the href based on what has been validated.

      this.href = this.format();
      return this;
    }; // format a parsed object into a url string

    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (util.isString(obj)) obj = urlParse(obj);
      if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
      return obj.format();
    }

    Url.prototype.format = function () {
      var auth = this.auth || '';

      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }

      var protocol = this.protocol || '';
      var pathname = this.pathname || '';
      var hash = this.hash || '';
      var host = false;
      var query = '';

      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : `[${this.hostname}]`);

        if (this.port) {
          host += `:${this.port}`;
        }
      }

      if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }

      var search = this.search || query && `?${query}` || '';
      if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.

      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = `//${host || ''}`;
        if (pathname && pathname.charAt(0) !== '/') pathname = `/${pathname}`;
      } else if (!host) {
        host = '';
      }

      if (hash && hash.charAt(0) !== '#') hash = `#${hash}`;
      if (search && search.charAt(0) !== '?') search = `?${search}`;
      pathname = pathname.replace(/[?#]/g, match => encodeURIComponent(match));
      search = search.replace('#', '%23');
      return protocol + host + pathname + search + hash;
    };

    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }

    Url.prototype.resolve = function (relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };

    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }

    Url.prototype.resolveObject = function (relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }

      var result = new Url();
      var tkeys = Object.keys(this);

      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      } // hash is always overridden, no matter what.
      // even href="" will remove it.

      result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

      if (relative.href === '') {
        result.href = result.format();
        return result;
      } // hrefs like //foo/bar always cut to the protocol.

      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);

        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol') result[rkey] = relative[rkey];
        } // urlParse appends trailing / to urls like http://www.example.com

        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }

        result.href = result.format();
        return result;
      }

      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);

          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }

          result.href = result.format();
          return result;
        }

        result.protocol = relative.protocol;

        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || '').split('/');

          while (relPath.length && !(relative.host = relPath.shift()));

          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }

        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port; // to support http.request

        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }

        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }

      var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/';
      var isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/';
      var mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname;
      var removeAllDots = mustEndAbs;
      var srcPath = result.pathname && result.pathname.split('/') || [];
      var relPath = relative.pathname && relative.pathname.split('/') || [];
      var psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.

      if (psychotic) {
        result.hostname = '';
        result.port = null;

        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host; else srcPath.unshift(result.host);
        }

        result.host = '';

        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;

          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host; else relPath.unshift(relative.host);
          }

          relative.host = null;
        }

        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }

      if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === '' ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath; // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift(); // occationaly the auth can get stuck only in host
          // this especially happens in cases like
          // url.resolveObject('mailto:local1@domain1', 'local2@domain2')

          var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }

        result.search = relative.search;
        result.query = relative.query; // to support http.request

        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
        }

        result.href = result.format();
        return result;
      }

      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null; // to support http.request

        if (result.search) {
          result.path = `/${result.search}`;
        } else {
          result.path = null;
        }

        result.href = result.format();
        return result;
      } // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.

      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0

      var up = 0;

      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];

        if (last === '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      } // if the path is allowed to go above the root, restore leading ..s

      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }

      if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }

      if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
        srcPath.push('');
      }

      var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; // occationaly the auth can get stuck only in host
        // this especially happens in cases like
        // url.resolveObject('mailto:local1@domain1', 'local2@domain2')

        var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      mustEndAbs = mustEndAbs || result.host && srcPath.length;

      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }

      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      } // to support request.http

      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
      }

      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };

    Url.prototype.parseHost = function () {
      var { host } = this;
      var port = portPattern.exec(host);

      if (port) {
        port = port[0];

        if (port !== ':') {
          this.port = port.substr(1);
        }

        host = host.substr(0, host.length - port.length);
      }

      if (host) this.hostname = host;
    };
    /***/ }),

  /***/ './node_modules/url/util.js':
  /*! **********************************!*\
  !*** ./node_modules/url/util.js ***!
  \********************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    module.exports = {
      isString(arg) {
        return typeof arg === 'string';
      },
      isObject(arg) {
        return typeof arg === 'object' && arg !== null;
      },
      isNull(arg) {
        return arg === null;
      },
      isNullOrUndefined(arg) {
        return arg == null;
      },
    };
    /***/ }),

  /***/ './node_modules/value-equal/esm/value-equal.js':
  /*! *****************************************************!*\
  !*** ./node_modules/value-equal/esm/value-equal.js ***!
  \**************************************************** */
  /*! exports provided: default */
  /***/ (function (module, __webpack_exports__, __webpack_require__) {
    __webpack_require__.r(__webpack_exports__);
    function valueOf(obj) {
      return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
    }

    function valueEqual(a, b) {
      // Test for strict equality first.
      if (a === b) return true; // Otherwise, if either of them == null they are not equal.

      if (a == null || b == null) return false;

      if (Array.isArray(a)) {
        return Array.isArray(b) && a.length === b.length && a.every((item, index) => valueEqual(item, b[index]));
      }

      if (typeof a === 'object' || typeof b === 'object') {
        var aValue = valueOf(a);
        var bValue = valueOf(b);
        if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
        return Object.keys({ ...a, ...b }).every(key => valueEqual(a[key], b[key]));
      }

      return false;
    }

    /* harmony default export */ __webpack_exports__.default = (valueEqual);
    /***/ }),

  /***/ './node_modules/webpack/buildin/global.js':
  /*! ***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \********************************** */
  /*! no static exports found */
  /***/ (function (module, exports) {
    var g; // This works in non-strict mode

    g = (function () {
      return this;
    }());

    try {
      // This works if eval is allowed (see CSP)
      g = g || new Function('return this')();
    } catch (e) {
      // This works if the window reference is available
      if (typeof window === 'object') g = window;
    } // g can still be undefined, but nothing to do about it...
    // We return undefined, instead of nothing here, so it's
    // easier to handle this case. if(!global) { ...}

    module.exports = g;
    /***/ }),

  /***/ './node_modules/webpack/buildin/harmony-module.js':
  /*! *******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \****************************************** */
  /*! no static exports found */
  /***/ (function (module, exports) {
    module.exports = function (originalModule) {
      if (!originalModule.webpackPolyfill) {
        var module = Object.create(originalModule); // module.parent = undefined by default

        if (!module.children) module.children = [];
        Object.defineProperty(module, 'loaded', {
          enumerable: true,
          get() {
            return module.l;
          },
        });
        Object.defineProperty(module, 'id', {
          enumerable: true,
          get() {
            return module.i;
          },
        });
        Object.defineProperty(module, 'exports', {
          enumerable: true,
        });
        module.webpackPolyfill = 1;
      }

      return module;
    };
    /***/ }),

  /***/ './node_modules/webpack/buildin/module.js':
  /*! ***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \********************************** */
  /*! no static exports found */
  /***/ (function (module, exports) {
    module.exports = function (module) {
      if (!module.webpackPolyfill) {
        module.deprecate = function () {};

        module.paths = []; // module.parent = undefined by default

        if (!module.children) module.children = [];
        Object.defineProperty(module, 'loaded', {
          enumerable: true,
          get() {
            return module.l;
          },
        });
        Object.defineProperty(module, 'id', {
          enumerable: true,
          get() {
            return module.i;
          },
        });
        module.webpackPolyfill = 1;
      }

      return module;
    };
    /***/ }),

  /***/ './node_modules/webpack/hot/dev-server.js':
  /*! ***********************************!*\
  !*** (webpack)/hot/dev-server.js ***!
  \********************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

    /* globals window __webpack_hash__ */
    if (true) {
      var lastHash;

      var upToDate = function upToDate() {
        return lastHash.indexOf(__webpack_require__.h()) >= 0;
      };

      var log = __webpack_require__(/*! ./log */ './node_modules/webpack/hot/log.js');

      var check = function check() {
        module.hot.check(true).then(updatedModules => {
          if (!updatedModules) {
            log('warning', '[HMR] Cannot find update. Need to do a full reload!');
            log('warning', '[HMR] (Probably because of restarting the webpack-dev-server)');
            window.location.reload();
            return;
          }

          if (!upToDate()) {
            check();
          }

          __webpack_require__(/*! ./log-apply-result */ './node_modules/webpack/hot/log-apply-result.js')(updatedModules, updatedModules);

          if (upToDate()) {
            log('info', '[HMR] App is up to date.');
          }
        }).catch(err => {
          var status = module.hot.status();

          if (['abort', 'fail'].indexOf(status) >= 0) {
            log('warning', '[HMR] Cannot apply update. Need to do a full reload!');
            log('warning', `[HMR] ${log.formatError(err)}`);
            window.location.reload();
          } else {
            log('warning', `[HMR] Update failed: ${log.formatError(err)}`);
          }
        });
      };

      var hotEmitter = __webpack_require__(/*! ./emitter */ './node_modules/webpack/hot/emitter.js');

      hotEmitter.on('webpackHotUpdate', currentHash => {
        lastHash = currentHash;

        if (!upToDate() && module.hot.status() === 'idle') {
          log('info', '[HMR] Checking for updates on the server...');
          check();
        }
      });
      log('info', '[HMR] Waiting for update signal from WDS...');
    } else {}
    /***/ }),

  /***/ './node_modules/webpack/hot/emitter.js':
  /*! ********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \******************************* */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    var EventEmitter = __webpack_require__(/*! events */ './node_modules/events/events.js');

    module.exports = new EventEmitter();
    /***/ }),

  /***/ './node_modules/webpack/hot/log-apply-result.js':
  /*! *****************************************!*\
  !*** (webpack)/hot/log-apply-result.js ***!
  \**************************************** */
  /*! no static exports found */
  /***/ (function (module, exports, __webpack_require__) {
    /*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
    module.exports = function (updatedModules, renewedModules) {
      var unacceptedModules = updatedModules.filter(moduleId => renewedModules && renewedModules.indexOf(moduleId) < 0);

      var log = __webpack_require__(/*! ./log */ './node_modules/webpack/hot/log.js');

      if (unacceptedModules.length > 0) {
        log('warning', "[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
        unacceptedModules.forEach(moduleId => {
          log('warning', `[HMR]  - ${moduleId}`);
        });
      }

      if (!renewedModules || renewedModules.length === 0) {
        log('info', '[HMR] Nothing hot updated.');
      } else {
        log('info', '[HMR] Updated modules:');
        renewedModules.forEach(moduleId => {
          if (typeof moduleId === 'string' && moduleId.indexOf('!') !== -1) {
            var parts = moduleId.split('!');
            log.groupCollapsed('info', `[HMR]  - ${parts.pop()}`);
            log('info', `[HMR]  - ${moduleId}`);
            log.groupEnd('info');
          } else {
            log('info', `[HMR]  - ${moduleId}`);
          }
        });
        var numberIds = renewedModules.every(moduleId => typeof moduleId === 'number');
        if (numberIds) log('info', '[HMR] Consider using the NamedModulesPlugin for module names.');
      }
    };
    /***/ }),

  /***/ './node_modules/webpack/hot/log.js':
  /*! ****************************!*\
  !*** (webpack)/hot/log.js ***!
  \*************************** */
  /*! no static exports found */
  /***/ (function (module, exports) {
    var logLevel = 'info';

    function dummy() {}

    function shouldLog(level) {
      var shouldLog = logLevel === 'info' && level === 'info' || ['info', 'warning'].indexOf(logLevel) >= 0 && level === 'warning' || ['info', 'warning', 'error'].indexOf(logLevel) >= 0 && level === 'error';
      return shouldLog;
    }

    function logGroup(logFn) {
      return function (level, msg) {
        if (shouldLog(level)) {
          logFn(msg);
        }
      };
    }

    module.exports = function (level, msg) {
      if (shouldLog(level)) {
        if (level === 'info') {
          console.log(msg);
        } else if (level === 'warning') {
          console.warn(msg);
        } else if (level === 'error') {
          console.error(msg);
        }
      }
    };
    /* eslint-disable node/no-unsupported-features/node-builtins */

    var group = console.group || dummy;
    var groupCollapsed = console.groupCollapsed || dummy;
    var groupEnd = console.groupEnd || dummy;
    /* eslint-enable node/no-unsupported-features/node-builtins */

    module.exports.group = logGroup(group);
    module.exports.groupCollapsed = logGroup(groupCollapsed);
    module.exports.groupEnd = logGroup(groupEnd);

    module.exports.setLogLevel = function (level) {
      logLevel = level;
    };

    module.exports.formatError = function (err) {
      var { message } = err;
      var { stack } = err;

      if (!stack) {
        return message;
      } if (stack.indexOf(message) < 0) {
        return `${message}\n${stack}`;
      }
      return stack;
    };
    /***/ }),

}]);
// # sourceMappingURL=0.chunk.js.map
